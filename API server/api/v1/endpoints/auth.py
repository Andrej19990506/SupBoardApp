from fastapi import APIRouter, Depends, HTTPException, status, Header, Request, Path, Body, Response
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import BaseModel
from db.session import get_db_session
from crud.user import user_crud
from core.config import settings
from schemas.customer import CustomerCreate
from schemas.user import UserCreate, UserCreateOAuth
from services.auth_security_service import AuthSecurityService
from core.session_middleware import require_valid_session
import random
import string
import requests
from datetime import datetime, timedelta
import redis
import asyncio
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from passlib.context import CryptContext
import jwt
from typing import Dict, Any, Optional
import logging

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è auth endpoints
router = APIRouter()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è SMS –∫–æ–¥–æ–≤
# redis_client = redis.Redis(host='localhost', port=6379, db=0)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
sms_codes_storage = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω—è–µ—Ç SMS –∫–æ–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
registration_tokens_storage = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_service = AuthSecurityService()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis/–ë–î)
auto_cleanup_settings = {"days": 30}

class SMSCodeCreate(BaseModel):
    phone: str

class SMSCodeVerify(BaseModel):
    phone: str
    code: str

class RegisterRequest(BaseModel):
    phone: str
    password: str
    name: str
    email: str
    registration_token: str  # –ù–æ–≤–æ–µ –ø–æ–ª–µ!

class LoginRequest(BaseModel):
    phone: str
    password: str

def generate_sms_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 4-–∑–Ω–∞—á–Ω—ã–π SMS –∫–æ–¥ –¥–ª—è –ª–æ–≥–∏–Ω–∞"""
    return ''.join(random.choices(string.digits, k=4))

def generate_registration_sms_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π SMS –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    return ''.join(random.choices(string.digits, k=6))

def check_sms_ru_senders(api_id: str) -> list:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –≤ SMS.ru"""
    import requests
    try:
        url = "https://sms.ru/my/senders"
        params = {
            'api_id': api_id,
            'json': 1
        }
        response = requests.get(url, params=params, timeout=10)
        result = response.json()
        print(f"[SMS.ru] –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {result}")
        
        if result.get('status') == 'OK':
            return result.get('senders', [])
        else:
            print(f"[SMS.ru] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {result}")
            return []
    except Exception as e:
        print(f"[SMS.ru] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {e}")
        return []

def send_sms_via_sms_ru(phone: str, message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —á–µ—Ä–µ–∑ SMS.ru API"""
    from core.config import settings
    api_id = settings.SMS_RU_API_ID
    
    if not api_id:
        print("SMS.ru API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
    senders = check_sms_ru_senders(api_id)
    print(f"[SMS.ru] –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏: {senders}")
    
    url = "https://sms.ru/sms/send"
    params = {
        'api_id': api_id,
        'to': phone,
        'msg': message,
        'from': 'SubBoard',
        'json': 1,
        'test': 1
    }
    
    try:
        print(f"[SMS.ru] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –Ω–∞ {phone} —Å —Ç–µ–∫—Å—Ç–æ–º: {message}")
        print(f"[SMS.ru] URL: {url}")
        print(f"[SMS.ru] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        response = requests.get(url, params=params, timeout=10)
        result = response.json()
        
        print(f"[SMS.ru] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if result.get('status') == 'OK':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π SMS
            sms_data = result.get('sms', {})
            for phone_num, sms_info in sms_data.items():
                if sms_info.get('status') == 'OK':
                    print(f"[SMS.ru] ‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {phone_num}, ID: {sms_info.get('sms_id')}")
                    print(f"[SMS.ru] –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('balance', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Ä—É–±.")
                    return True
                else:
                    print(f"[SMS.ru] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –Ω–∞ {phone_num}: {sms_info.get('status_text', 'Unknown error')}")
            return False
        else:
            print(f"[SMS.ru] ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ API: {result.get('status_text', 'Unknown error')}")
            print(f"[SMS.ru] –ö–æ–¥ –æ—à–∏–±–∫–∏: {result.get('status_code', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            return False
    except Exception as e:
        print(f"[SMS.ru] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: {e}")
        return False

def send_sms_via_smsc(phone: str, message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —á–µ—Ä–µ–∑ SMSC.ru API (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)"""
    # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç SMSC.ru API
    print(f"[–¢–ï–°–¢] SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {phone}: {message}")
    return True

@router.post("/check-phone")
async def check_phone_exists(
    sms_data: SMSCodeCreate,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {sms_data.phone}")
        
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        phone = ''.join(filter(str.isdigit, sms_data.phone))
        logger.info(f"üìû –û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {phone}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7 –∏ –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä)
        if not phone.startswith('7') or len(phone) != 11:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: {phone}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            )
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_phone = f"+{phone}"
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É: {formatted_phone}")
        
        # üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –õ–û–ì–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        logger.info(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä: '{sms_data.phone}'")
        logger.info(f"üîç –û—á–∏—â–µ–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã: '{phone}'")
        logger.info(f"üîç –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞: '{formatted_phone}'")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–∞–∫–∂–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        possible_formats = [
            formatted_phone,  # +79135849601
            sms_data.phone,   # –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            phone,            # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã 79135849601
            f"8{phone[1:]}" if phone.startswith('7') else phone,  # 89135849601
            f"+{phone[:1]} ({phone[1:4]}) {phone[4:7]}-{phone[7:9]}-{phone[9:11]}",  # +7 (913) 584-96-01
        ]
        
        logger.info(f"üîç –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: {possible_formats}")
        
        try:
            existing_client = None
            found_format = None
            
            # –ò—â–µ–º –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º
            for format_to_try in possible_formats:
                logger.info(f"üîç –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç: '{format_to_try}'")
                try:
                    candidate = await user_crud.get_user_by_phone(db, phone=format_to_try)
                    if candidate:
                        existing_client = candidate
                        found_format = format_to_try
                        logger.info(f"‚úÖ –ù–ê–ô–î–ï–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '{format_to_try}' - ID={candidate.id}, Name='{candidate.name}'")
                        break
                    else:
                        logger.info(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '{format_to_try}'")
                except Exception as format_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '{format_to_try}': {format_error}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—ã–≤–µ–¥–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                from sqlalchemy import text
                result = await db.execute(text("SELECT id, name, phone FROM users ORDER BY id DESC LIMIT 5"))
                all_users = result.fetchall()
                logger.info(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î:")
                for user_row in all_users:
                    logger.info(f"  - ID={user_row[0]}, Name='{user_row[1]}', Phone='{user_row[2]}'")
            except Exception as debug_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {debug_error}")
            
            if existing_client:
                logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ - –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '{found_format}'")
            else:
                logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                
        except Exception as db_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_error}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(db_error)}")
            import traceback
            logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(db_error)}"
            )
        
        if not existing_client:
            logger.info(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω —Å –Ω–æ–º–µ—Ä–æ–º: {formatted_phone}")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
            )
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç: ID={existing_client.id}, –ò–º—è={existing_client.name}")
        
        return {
            "success": True,
            "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω",
            "user_exists": True,
            "user_name": existing_client.name,
            "user_avatar": existing_client.avatar
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ check_phone_exists: {e}")
        logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        logger.error(f"‚ùå –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.post("/send-sms-code")
async def send_sms_code(
    sms_data: SMSCodeCreate,
    request: Request,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS –∫–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    """
    try:
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        phone = ''.join(filter(str.isdigit, sms_data.phone))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7 –∏ –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä)
        if not phone.startswith('7') or len(phone) != 11:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            )
        
        # üõ°Ô∏è –ü–†–û–í–ï–†–Ø–ï–ú SMS RATE LIMIT
        formatted_phone = f"+{phone}"
        rate_limit_result = await security_service.check_sms_rate_limit(db, formatted_phone)
        
        if not rate_limit_result["allowed"]:
            logger.warning(f"üö´ SMS rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è {formatted_phone}: {rate_limit_result['requests_count']}/{rate_limit_result['max_requests']}")
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç SMS –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {rate_limit_result['reset_at']} –º–∏–Ω—É—Ç."
            )
        
        logger.info(f"‚úÖ SMS rate limit OK –¥–ª—è {formatted_phone}: {rate_limit_result['requests_count']}/{rate_limit_result['max_requests']}")
        
        # üõ°Ô∏è –ü–†–û–í–ï–†–Ø–ï–ú LOGIN RATE LIMIT
        login_rate_result = await security_service.check_login_rate_limit(db, request, formatted_phone)
        
        if not login_rate_result["allowed"]:
            logger.warning(f"üö´ Login rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è {formatted_phone}: {login_rate_result['requests_count']}/{login_rate_result['max_requests']}")
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π SMS: {formatted_phone}")
        
        # üîç –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–ê–ö–û–ô –ñ–ï –ü–û–ò–°–ö –í –†–ê–ó–ù–´–• –§–û–†–ú–ê–¢–ê–• –ö–ê–ö –í check-phone
        possible_formats = [
            formatted_phone,  # +79135849601
            sms_data.phone,   # –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            phone,            # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã 79135849601
            f"8{phone[1:]}" if phone.startswith('7') else phone,  # 89135849601
            f"+{phone[:1]} ({phone[1:4]}) {phone[4:7]}-{phone[7:9]}-{phone[9:11]}",  # +7 (913) 584-96-01
        ]
        
        logger.info(f"üîç [send-sms] –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: {possible_formats}")
        
        existing_client = None
        found_format = None
        
        # –ò—â–µ–º –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º
        for format_to_try in possible_formats:
            logger.info(f"üîç [send-sms] –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç: '{format_to_try}'")
            try:
                candidate = await user_crud.get_user_by_phone(db, phone=format_to_try)
                if candidate:
                    existing_client = candidate
                    found_format = format_to_try
                    logger.info(f"‚úÖ [send-sms] –ù–ê–ô–î–ï–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '{format_to_try}' - ID={candidate.id}, Name='{candidate.name}'")
                    break
                else:
                    logger.info(f"‚ùå [send-sms] –ù–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '{format_to_try}'")
            except Exception as format_error:
                logger.error(f"‚ùå [send-sms] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '{format_to_try}': {format_error}")
        
        if not existing_client:
            logger.info(f"‚ùå [send-sms] –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –æ—Ç–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
            )
        
        logger.info(f"‚úÖ [send-sms] –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ '{found_format}', –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS: ID={existing_client.id}, –ò–º—è={existing_client.name}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        code = generate_sms_code()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è (1 –º–∏–Ω—É—Ç–∞)
        expiry_time = datetime.now() + timedelta(minutes=1)
        sms_codes_storage[phone] = {
            'code': code,
            'expires_at': expiry_time,
            'attempts': 0,
            'type': 'login'  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∫–æ–¥ –ª–æ–≥–∏–Ω–∞
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ SUBboards: {code}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ SMS.ru
        success = send_sms_via_sms_ru(phone, message)  # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        # success = send_sms_via_smsc(phone, message)  # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ—Ç–∫–ª—é—á–µ–Ω)
        
        if not success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS"
            )
        
        return {
            "success": True,
            "message": "SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            "expires_in": 60  # 1 –º–∏–Ω—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.post("/verify-sms-code")
async def verify_sms_code(
    verify_data: SMSCodeVerify,
    request: Request,
    response: Response,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç SMS –∫–æ–¥ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = ''.join(filter(str.isdigit, verify_data.phone))
        
        # üõ°Ô∏è –ì–ï–ù–ï–†–ò–†–£–ï–ú DEVICE FINGERPRINT (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —á—Ç–æ –∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        device_fingerprints = security_service.generate_flexible_fingerprint(request)
        device_fingerprint = device_fingerprints["strict"]
        ip_address = security_service.get_client_ip(request)
        user_agent = request.headers.get("user-agent", "")
        
        logger.info(f"üîê Device fingerprint: {device_fingerprint[:16]}... IP: {ip_address}")
        
        # üõ°Ô∏è –ê–ù–ê–õ–ò–ó –£–°–¢–†–û–ô–°–¢–í–ê
        device_info = security_service.parse_device_info(user_agent)
        location_info = security_service.get_location_info(ip_address)
        
        logger.info(f"üì± Device info: {device_info}")
        logger.info(f"üåç Location info: {location_info}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        if phone not in sms_codes_storage:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
            )
        
        stored_data = sms_codes_storage[phone]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥
        if datetime.now() > stored_data['expires_at']:
            del sms_codes_storage[phone]
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if stored_data['attempts'] >= 3:
            del sms_codes_storage[phone]
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
        if verify_data.code != stored_data['code']:
            stored_data['attempts'] += 1
            if stored_data['attempts'] >= 3:
                del sms_codes_storage[phone]
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
                )
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–¥–∞ (–ª–æ–≥–∏–Ω –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
        code_type = stored_data.get('type', 'login')
        logger.info(f"üîç –¢–∏–ø –∫–æ–¥–∞: {code_type}")
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_phone = f"+{phone}"
        logger.info(f"üîç –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É: {formatted_phone}")
        
        # üîç –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–ò–°–ö –í –†–ê–ó–ù–´–• –§–û–†–ú–ê–¢–ê–• –ö–ê–ö –í check-phone –∏ send-sms-code
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ verify_data
        possible_formats = [
            formatted_phone,  # +79135849601
            verify_data.phone,   # –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            phone,            # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã 79135849601
            f"8{phone[1:]}" if phone.startswith('7') else phone,  # 89135849601
        ]
        
        logger.info(f"üîç [verify-sms] –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: {possible_formats}")
        
        existing_client = None
        found_format = None
        
        # –ò—â–µ–º –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º
        for format_to_try in possible_formats:
            logger.info(f"üîç [verify-sms] –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç: '{format_to_try}'")
            try:
                candidate = await user_crud.get_user_by_phone(db, phone=format_to_try)
                if candidate:
                    existing_client = candidate
                    found_format = format_to_try
                    logger.info(f"‚úÖ [verify-sms] –ù–ê–ô–î–ï–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '{format_to_try}' - ID={candidate.id}, Name='{candidate.name}'")
                    break
                else:
                    logger.info(f"‚ùå [verify-sms] –ù–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '{format_to_try}'")
            except Exception as format_error:
                logger.error(f"‚ùå [verify-sms] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '{format_to_try}': {format_error}")
        
        if code_type == 'login':
            # –î–ª—è –≤—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç –î–û–õ–ñ–ï–ù —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            if not existing_client:
                logger.info(f"‚ùå [verify-sms] –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                # –£–¥–∞–ª—è–µ–º –∫–æ–¥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                del sms_codes_storage[phone]
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
                )
            logger.info(f"‚úÖ [verify-sms] –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '{found_format}': ID={existing_client.id}, –ò–º—è={existing_client.name}")
            client = existing_client

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–∞–∑—É!
            client_id = str(client.id)
            client_name = client.name
            client_phone = client.phone
            client_avatar = client.avatar
            client_created_at = client.created_at.isoformat() if client.created_at else ""
            client_updated_at = client.updated_at.isoformat() if client.updated_at else ""
            
            # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π –¥–ª—è –≤—Ö–æ–¥–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            del sms_codes_storage[phone]
        else:
            # –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç –ù–ï –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            if existing_client:
                logger.info(f"‚ùå –ö–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ID={existing_client.id}")
                # –£–¥–∞–ª—è–µ–º –∫–æ–¥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                del sms_codes_storage[phone]
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É."
                )
            logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –ø–∞–º—è—Ç–∏
            registration_token = security_service.generate_secure_token(32)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è (10 –º–∏–Ω—É—Ç)
            registration_tokens_storage[registration_token] = {
                'phone': formatted_phone,
                'verified_at': datetime.now(),
                'expires_at': datetime.now() + timedelta(minutes=10)
            }
            
            # –£–¥–∞–ª—è–µ–º SMS –∫–æ–¥ –∏–∑ storage - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
            del sms_codes_storage[phone]
            logger.info(f"‚úÖ SMS –∫–æ–¥ —É–¥–∞–ª–µ–Ω, —Å–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {formatted_phone}")
            
            # –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –ù–ï —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ /register endpoint
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            return {
                "success": True,
                "message": "SMS –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                "phone": formatted_phone,
                "registration_token": registration_token  # –ù–æ–≤–æ–µ –ø–æ–ª–µ!
            }
        
        # üõ°Ô∏è –°–û–ó–î–ê–ï–ú SECURE SESSION
        refresh_token = security_service.generate_secure_token(32)
        print(f"üîç [verify-sms] –°–æ–∑–¥–∞–µ–º secure session –¥–ª—è client_id: {client_id}")
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_session = await security_service.create_secure_session(
                db=db,
                user=client,  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: client -> user (–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è client)
                request=request,
                refresh_token=refresh_token
            )
            print(f"‚úÖ [verify-sms] –°–æ–∑–¥–∞–Ω–∞ secure session: ID={device_session.id}")
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ secure session: ID={device_session.id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ö–æ–¥–µ –∫–ª–∏–µ–Ω—Ç–∞
            await security_service.update_user_login_info(db, client, request)
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫–∏ –≤—Ö–æ–¥–∞
            risk_analysis = await security_service.analyze_login_risk(db, client, request)
            logger.info(f"üîç Risk analysis: {risk_analysis}")
        except Exception as security_error:
            print(f"‚ùå [verify-sms] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è secure session: {security_error}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è secure session: {security_error}")
            import traceback
            print(f"‚ùå [verify-sms] Traceback: {traceback.format_exc()}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JWT access token
        access_token_data = {
            "sub": client_id,
            "phone": client_phone,
            "name": client_name,
            "provider": "sms"
        }
        access_token = create_access_token(data=access_token_data)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        user_data = {
            "id": client_id,
            "name": client_name,
            "email": client_phone,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ email
            "avatar": client_avatar,
            "role": "user",
            "provider": "sms",
            "providerId": phone,
            "createdAt": client_created_at,
            "updatedAt": client_updated_at
        }
        logger.info(f"DEBUG: user_data={user_data}")
        
        # üõ°Ô∏è –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú HTTPONLY COOKIE —Å refresh token
        response.set_cookie(
            key="refresh_token",
            value=refresh_token,
            max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            httponly=True,  # –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è JavaScript
            secure=True,    # –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS
            samesite="lax"  # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
        )
        print(f"üîê [verify-sms] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω HttpOnly cookie —Å refresh token")
        
        return {
            "user": user_data,
            "token": access_token,
            "refreshToken": refresh_token  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }
        
    except HTTPException:
        raise
    except Exception as e:
        import traceback
        logger.error(f"‚ùå EXCEPTION in verify_sms_code: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.get("/me")
async def get_current_user(
    authorization: str = Header(None),
    request: Request = None,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        if not authorization:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω (—Ñ–æ—Ä–º–∞—Ç: "Bearer token_value")
        if not authorization.startswith("Bearer "):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"
            )
        
        token = authorization.replace("Bearer ", "")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω: {token[:20]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å eyJ)
        if not token.startswith("eyJ"):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"
            )
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        try:
            import jwt
            payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=["HS256"])
            client_id = int(payload.get("sub"))
        except (jwt.InvalidTokenError, ValueError, TypeError) as e:
            print(f"‚ùå JWT –æ—à–∏–±–∫–∞ –≤ /me: {e}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"
            )
        
        print(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {client_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = await user_crud.get_user(db, client_id)
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.name}")
        
        # üõ°Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê DEVICE SESSION
        refresh_token_from_cookie = security_service.get_refresh_token_from_cookie(request)
        if not refresh_token_from_cookie:
            print(f"‚ùå Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ cookie - —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh token"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
        from crud.device_session import CRUDDeviceSession
        crud = CRUDDeviceSession()
        current_session = await crud.get_session_by_refresh_token(db, refresh_token_from_cookie)
        
        if not current_session:
            print(f"‚ùå Device session –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è refresh token –∏–∑ cookie")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
            )
        
        if current_session.user_id != user.id:
            print(f"‚ùå Device session –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {current_session.user_id} != {user.id}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
            )
        
        print(f"‚úÖ Device session –≤–∞–ª–∏–¥–Ω–∞: ID={current_session.id}")
        
        # –î–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ payload –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º "jwt"
        provider = payload.get("provider", "jwt")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        user_data = {
            "id": str(user.id),
            "name": user.name,
            "email": user.phone,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ email
            "avatar": user.avatar,
            "role": "user",
            "provider": provider,
            "providerId": str(user.id),
            "createdAt": user.created_at.isoformat() if user.created_at else "",
            "updatedAt": user.updated_at.isoformat() if user.updated_at else ""
        }
        
        print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
        return user_data
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /me: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.post("/telegram")
async def authenticate_telegram(
    telegram_data: dict,
    response: Response,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
    """
    # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    try:
        user_id = telegram_data.get('id')
        first_name = telegram_data.get('first_name', '')
        last_name = telegram_data.get('last_name', '')
        username = telegram_data.get('username')
        
        if not user_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        full_name = f"{first_name} {last_name}".strip()
        if full_name:
            name = full_name
        elif username:
            name = username
        else:
            name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        
        print(f"üîç Telegram auth data: first_name='{first_name}', last_name='{last_name}', username='{username}', final_name='{name}'")
        
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π Telegram ID –∫–∞–∫ —Ç–µ–ª–µ—Ñ–æ–Ω
        short_telegram_id = str(user_id)[-10:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä
        phone = f"+t{short_telegram_id}"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∞–∫—Å 12 —Å–∏–º–≤–æ–ª–æ–≤)
        
        existing_user = await user_crud.get_user_by_phone(db, phone=phone)
        
        if existing_user:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            update_needed = False
            if existing_user.name != name:
                existing_user.name = name
                update_needed = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            photo_url = telegram_data.get('photo_url')
            if photo_url and existing_user.avatar != photo_url:
                existing_user.avatar = photo_url
                update_needed = True
            
            if update_needed:
                await db.commit()
                await db.refresh(existing_user)
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {existing_user.name}")
            
            user = existing_user
        else:
            user_data = UserCreate(
                name=name,
                phone=phone,
                avatar=telegram_data.get('photo_url')
            )
            user = await user_crud.create_user(db, user_in=user_data)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
        access_token = f"telegram_token_{user.id}_{int(datetime.now().timestamp())}"
        refresh_token = f"refresh_{user.id}_{int(datetime.now().timestamp())}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        user_data = {
            "id": str(user.id),
            "name": user.name,
            "email": user.phone,
            "avatar": telegram_data.get('photo_url'),
            "role": "admin",  # Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —ç—Ç–æ –±–∏–∑–Ω–µ—Å–º–µ–Ω—ã
            "provider": "telegram",
            "providerId": str(user_id),
            "createdAt": user.created_at.isoformat() if user.created_at else "",
            "updatedAt": user.updated_at.isoformat() if user.updated_at else ""
        }
        
        # üõ°Ô∏è –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú HTTPONLY COOKIE —Å refresh token
        response.set_cookie(
            key="refresh_token",
            value=refresh_token,
            max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            httponly=True,  # –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è JavaScript
            secure=True,    # –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS
            samesite="lax"  # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
        )
        print(f"üîê [telegram-auth] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω HttpOnly cookie —Å refresh token")
        
        return {
            "user": user_data,
            "token": access_token,
            "refreshToken": refresh_token
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.post("/google")
async def authenticate_google(
    google_data: dict,
    response: Response,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google OAuth
    """
    try:
        import httpx
        
        code = google_data.get('code')
        if not code:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google"
            )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º redirect_uri –¥–ª—è Google OAuth
        redirect_uri = "https://supboardapp.ru/auth/google/callback"
        
        # Google OAuth —Ç—Ä–µ–±—É–µ—Ç client_secret –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
        token_url = "https://oauth2.googleapis.com/token"
        token_data = {
            "client_id": settings.GOOGLE_CLIENT_ID,
            "client_secret": settings.GOOGLE_CLIENT_SECRET,
            "code": code,
            "grant_type": "authorization_code",
            "redirect_uri": redirect_uri
        }
        
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Google...")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            token_response = await client.post(token_url, data=token_data)
            
            if token_response.status_code != 200:
                error_detail = token_response.text if token_response.text else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                print(f"Google OAuth error: {token_response.status_code} - {error_detail}")
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –æ—Ç Google: {error_detail}"
                )
            
            token_info = token_response.json()
            google_access_token = token_info.get('access_token')
            
            if not google_access_token:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            print(f"üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Google...")
            user_info_url = f"https://www.googleapis.com/oauth2/v2/userinfo?access_token={google_access_token}"
            user_response = await client.get(user_info_url)
            
            if user_response.status_code != 200:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Google"
                )
            
            user_info = user_response.json()
            print(f"Google user info: {user_info}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        google_id = user_info.get('id')
        email = user_info.get('email')
        name = user_info.get('name', '')
        picture = user_info.get('picture')
        
        print(f"Extracted data: google_id={google_id}, email={email}, name={name}")
        
        if not google_id or not email:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Google"
            )
        
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π Google ID –∫–∞–∫ —Ç–µ–ª–µ—Ñ–æ–Ω (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä)
        short_google_id = str(google_id)[-10:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä
        phone = f"+g{short_google_id}"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∞–∫—Å 12 —Å–∏–º–≤–æ–ª–æ–≤)
        
        print(f"Looking for existing user with phone: {phone}")
        existing_user = await user_crud.get_user_by_phone(db, phone=phone)
        print(f"Existing user found: {existing_user is not None}")
        
        if existing_user:
            user = existing_user
            print(f"Using existing user: {user.id}")
        else:
            print("Creating new user...")
            user_data = UserCreateOAuth(
                name=name or email.split('@')[0],
                phone=phone,
                email=email
            )
            print(f"User data: {user_data}")
            user = await user_crud.create_user(db, user_in=user_data)
            print(f"Created new user: {user.id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
        access_token = f"google_token_{user.id}_{int(datetime.now().timestamp())}"
        refresh_token = f"refresh_{user.id}_{int(datetime.now().timestamp())}"
        
        print(f"Generated tokens for user {user.id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        user_data = {
            "id": str(user.id),
            "name": user.name,
            "email": email,
            "avatar": picture,
            "role": "admin",  # Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —ç—Ç–æ –±–∏–∑–Ω–µ—Å–º–µ–Ω—ã
            "provider": "google",
            "providerId": str(google_id),
            "createdAt": user.created_at.isoformat() if user.created_at else "",
            "updatedAt": user.updated_at.isoformat() if user.updated_at else ""
        }
        
        print(f"Returning user data: {user_data}")
        
        # üõ°Ô∏è –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú HTTPONLY COOKIE —Å refresh token
        response.set_cookie(
            key="refresh_token",
            value=refresh_token,
            max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            httponly=True,  # –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è JavaScript
            secure=True,    # –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS
            samesite="lax"  # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
        )
        print(f"üîê [google-auth] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω HttpOnly cookie —Å refresh token")
        
        return {
            "user": user_data,
            "token": access_token,
            "refreshToken": refresh_token
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Exception in Google OAuth: {str(e)}")
        print(f"Exception type: {type(e)}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google: {str(e)}"
        )

@router.post("/vk")
async def authenticate_vk(
    vk_data: dict,
    response: Response,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ VK ID
    """
    try:
        print(f"Received VK data: {vk_data}")
        
        # VK ID SDK –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id_token, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
        id_token = vk_data.get('id_token')
        if not id_token:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id_token –≤ –¥–∞–Ω–Ω—ã—Ö VK"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º access_token –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ VK API
        access_token = vk_data.get('access_token')
        if not access_token:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç access_token –≤ –¥–∞–Ω–Ω—ã—Ö VK"
            )

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id
        import jwt
        try:
            decoded_token = jwt.decode(id_token, options={"verify_signature": False})
            print(f"Decoded VK token: {decoded_token}")
            user_id = decoded_token.get('sub')
        except Exception as jwt_error:
            print(f"JWT decode error: {jwt_error}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è VK —Ç–æ–∫–µ–Ω–∞"
            )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        user_info = vk_data.get('user_info')
        print(f"VK user_info from frontend: {user_info}")
        
        if user_info:
            first_name = user_info.get('first_name', 'VK User')
            last_name = user_info.get('last_name', str(user_id))
            avatar = user_info.get('avatar')
            phone = user_info.get('phone')
            email = user_info.get('email')
            print(f"Using user data from VK ID SDK: {first_name} {last_name}")
        else:
            # Fallback –∫ –±–∞–∑–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
            print(f"No user_info from frontend, using basic data for user_id: {user_id}")
            first_name = f"VK User"
            last_name = str(user_id)
            avatar = None
            phone = None
            email = None
        
        if not user_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ VK"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name = f"{first_name} {last_name}".strip() or f"VK User {user_id}"
        
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ VK, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        if phone and phone.startswith('+'):
            user_phone = phone
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º VK ID –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
            user_phone = f"+v{user_id}"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è VK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        print(f"Looking for existing VK client with phone: {user_phone}")
        existing_user = await user_crud.get_user_by_phone(db, phone=user_phone)
        print(f"Existing VK user found: {existing_user is not None}")
        
        if existing_user:
            user = existing_user
            print(f"Using existing VK user: {user.id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ VK
            updated = False
            if avatar and not existing_user.avatar:
                existing_user.avatar = avatar
                updated = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ VK
            if name != f"VK User {user_id}" and existing_user.name == f"VK User {user_id}":
                existing_user.name = name
                updated = True
                
            # –û–±–Ω–æ–≤–ª—è–µ–º email –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ VK
            if email and not existing_user.email:
                existing_user.email = email
                updated = True
                
            if updated:
                await db.commit()
                await db.refresh(existing_user)
        else:
            print("Creating new VK user...")
            user_data = UserCreateOAuth(
                name=name,
                phone=user_phone,
                email=email,
                avatar=avatar
            )
            print(f"VK User data: {user_data}")
            user = await user_crud.create_user(db, user_in=user_data)
            print(f"Created new VK user: {user.id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
        access_token = f"vk_token_{user.id}_{int(datetime.now().timestamp())}"
        refresh_token = f"refresh_{user.id}_{int(datetime.now().timestamp())}"
        
        print(f"Generated tokens for VK user {user.id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        await db.refresh(user)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        user_data = {
            "id": str(user.id),
            "name": user.name,
            "email": user.email or email,
            "phone": user.phone,
            "avatar": user.avatar or avatar,
            "role": "admin",  # VK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —ç—Ç–æ –±–∏–∑–Ω–µ—Å–º–µ–Ω—ã
            "provider": "vk",
            "providerId": str(user_id),
            "createdAt": user.created_at.isoformat() if user.created_at else "",
            "updatedAt": user.updated_at.isoformat() if user.updated_at else ""
        }
        
        print(f"Returning VK user data: {user_data}")
        
        # üõ°Ô∏è –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú HTTPONLY COOKIE —Å refresh token
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSONResponse –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookies
        from fastapi.responses import JSONResponse
        
        response_data = {
            "user": user_data,
            "token": access_token,
            "refreshToken": refresh_token
        }
        
        json_response = JSONResponse(content=response_data)
        json_response.set_cookie(
            key="refresh_token",
            value=refresh_token,
            max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            httponly=True,  # –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è JavaScript
            secure=True,    # –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS
            samesite="lax"  # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
        )
        print(f"üîê [vk-auth] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω HttpOnly cookie —Å refresh token")
        
        return json_response
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Exception in VK OAuth: {str(e)}")
        print(f"Exception type: {type(e)}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK: {str(e)}"
        )

@router.post("/register")
async def register_user(
    request: RegisterRequest,
    response: Response,
    http_request: Request,
    db: AsyncSession = Depends(get_db_session)
):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–∞—Ä–æ–ª–µ–º, –∏–º–µ–Ω–µ–º –∏ email"""
    try:
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ storage
        phone_digits = ''.join(filter(str.isdigit, request.phone))
        formatted_phone = f"+{phone_digits}"  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ formatted_phone
        logger.info(f"üîç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º: {request.phone} (—Ü–∏—Ñ—Ä—ã: {phone_digits})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ SMS –∫–æ–¥–∞
        registration_token = request.registration_token
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_token[:16] if registration_token else 'None'}...")
        
        if not registration_token or registration_token not in registration_tokens_storage:
            logger.info(f"‚ùå –¢–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.info(f"üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {len(registration_tokens_storage)}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–¢–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ."
            )
            
        token_data = registration_tokens_storage[registration_token]
        logger.info(f"üîç –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞: phone={token_data.get('phone')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫
        if datetime.now() > token_data.get('expires_at'):
            logger.info(f"‚ùå –¢–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫")
            del registration_tokens_storage[registration_token]
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–¢–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ."
            )
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if token_data.get('phone') != formatted_phone:
            logger.info(f"‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º: {formatted_phone} != {token_data.get('phone')}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing_user = await user_crud.get_user_by_phone(db, phone=request.phone)
        if existing_user:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing_email = await user_crud.get_user_by_email(db, email=request.email)
        if existing_email:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        
        # üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –õ–û–ì–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        logger.info(f"üîç [register] –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: '{request.phone}'")
        logger.info(f"üîç [register] –û—á–∏—â–µ–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã: '{phone_digits}'")
        logger.info(f"üîç [register] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: '{formatted_phone}'")
        logger.info(f"üîç [register] –ù–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î: '{request.phone}'")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∏–∑–Ω–µ—Å-–≤–ª–∞–¥–µ–ª—å—Ü–∞)
        user_data = UserCreate(
            name=request.name,
            phone=request.phone,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!
            email=request.email,
            password=request.password  # CRUD —Å–∞–º –∑–∞—Ö–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å
        )
        
        client = await user_crud.create_user(db, user=user_data)
        
        # üîç –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –°–û–•–†–ê–ù–ò–õ–û–°–¨ –í –ë–î
        logger.info(f"üîç [register] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ID={client.id}, Phone='{client.phone}', Name='{client.name}'")
        
        # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∏–∑–±–µ–≥–∞–µ–º greenlet –ø—Ä–æ–±–ª–µ–º)
        client_id = client.id
        client_phone = client.phone
        client_name = client.name
        client_email = client.email
        client_avatar = getattr(client, 'avatar', None)
        client_created_at = client.created_at.isoformat() if hasattr(client, 'created_at') and client.created_at else ""
        client_updated_at = client.updated_at.isoformat() if hasattr(client, 'updated_at') and client.updated_at else ""
        
        logger.info(f"‚úÖ [register] –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ID={client_id}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if registration_token in registration_tokens_storage:
            del registration_tokens_storage[registration_token]
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        
        # üõ°Ô∏è –°–û–ó–î–ê–ï–ú SECURE SESSION (–∫–∞–∫ –≤ verify-sms-code)
        refresh_token = security_service.generate_secure_token(32)
        logger.info(f"üîç [register] –°–æ–∑–¥–∞–µ–º secure session –¥–ª—è user_id: {client_id}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_session = await security_service.create_secure_session(
                db=db,
                user=client,
                request=http_request,
                refresh_token=refresh_token
            )
            logger.info(f"‚úÖ [register] –°–æ–∑–¥–∞–Ω–∞ secure session: ID={device_session.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await security_service.update_user_login_info(db, client, http_request)
                logger.info(f"‚úÖ [register] –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            except Exception as login_info_error:
                logger.warning(f"‚ö†Ô∏è [register] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–µ: {login_info_error}")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            
        except Exception as security_error:
            logger.error(f"‚ùå [register] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è secure session: {security_error}")
            import traceback
            logger.error(f"‚ùå [register] Traceback: {traceback.format_exc()}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JWT access token
        access_token_data = {
            "sub": str(client_id),
            "phone": client_phone,
            "name": client_name,
            "provider": "registration"
        }
        access_token = create_access_token(data=access_token_data)
        
        # üõ°Ô∏è –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú HTTPONLY COOKIE —Å refresh token
        response.set_cookie(
            key="refresh_token",
            value=refresh_token,
            max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            httponly=True,  # –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è JavaScript
            secure=True,    # –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS
            samesite="lax"  # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
        )
        logger.info(f"üîê [register] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω HttpOnly cookie —Å refresh token")
        
        # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
        try:
            await db.commit()
            logger.info(f"‚úÖ [register] –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        except Exception as commit_error:
            logger.warning(f"‚ö†Ô∏è [register] –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–º–º–∏—Ç–æ–º –ë–î: {commit_error}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {request.phone}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∏–∑–±–µ–≥–∞–µ–º greenlet –æ—à–∏–±–æ–∫)
        response_data = {
            "access_token": access_token,
            "token_type": "bearer",
            "user": {
                "id": str(client_id),
                "phone": client_phone,
                "name": client_name,
                "email": client_email,
                "avatar": client_avatar,
                "role": "user",
                "provider": "sms",
                "providerId": phone_digits,
                "createdAt": client_created_at,
                "updatedAt": client_updated_at
            },
            "refreshToken": refresh_token  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }
        logger.info(f"‚úÖ [register] –û—Ç–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return response_data
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@router.post("/login")
async def login_user(
    login_data: LoginRequest,
    request: Request,
    response: Response,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—é
    """
    try:
        logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å: {login_data.phone}")
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª—è
        user = await user_crud.authenticate_user(db, login_data.phone, login_data.password)
        
        if not user:
            logger.warning(f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {login_data.phone}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
            )
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {user.name} (ID: {user.id})")
        
        # üõ°Ô∏è –ì–ï–ù–ï–†–ò–†–£–ï–ú DEVICE FINGERPRINT
        device_fingerprints = security_service.generate_flexible_fingerprint(request)
        device_fingerprint = device_fingerprints["strict"]
        ip_address = security_service.get_client_ip(request)
        user_agent = request.headers.get("user-agent", "")
        
        # üõ°Ô∏è –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ SECURE SESSION
        refresh_token = security_service.generate_secure_token(32)
        device_session = await security_service.device_session_crud.create_session(
            db,
            user_id=user.id,
            device_fingerprint=device_fingerprint,
            refresh_token=refresh_token,
            ip_address=ip_address,
            user_agent=user_agent,
            expires_hours=168  # 7 –¥–Ω–µ–π
        )
        logger.info(f"‚úÖ [login] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ID={device_session.id}")
        
        # üç™ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú HTTPONLY COOKIE —Å refresh token
        security_service.set_refresh_token_cookie(response, refresh_token)
        logger.info(f"‚úÖ [login] HttpOnly cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–µ
        await user_crud.update_login_info(
            db, user.id, ip_address, user_agent, device_fingerprint
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT access token
        access_token_data = {
            "sub": str(user.id),
            "phone": user.phone,
            "name": user.name,
            "provider": "password"
        }
        access_token = create_access_token(data=access_token_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        user_data = {
            "id": str(user.id),
            "name": user.name,
            "email": user.email,
            "avatar": user.avatar,
            "role": "user",
            "provider": "password",
            "providerId": None,
            "createdAt": user.created_at.isoformat() if user.created_at else "",
            "updatedAt": user.updated_at.isoformat() if user.updated_at else ""
        }
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å: {user_data['name']}")
        
        return {
            "user": user_data,
            "token": access_token,
            "refreshToken": refresh_token  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å: {str(e)}")
        import traceback
        logger.error(f"‚ùå –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ"
        )

@router.post("/send-registration-sms-code")
async def send_registration_sms_code(
    sms_data: SMSCodeCreate,
    request: Request,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π SMS –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        phone = ''.join(filter(str.isdigit, sms_data.phone))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7 –∏ –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä)
        if not phone.startswith('7') or len(phone) != 11:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            )
        
        # üõ°Ô∏è –ü–†–û–í–ï–†–Ø–ï–ú SMS RATE LIMIT –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        formatted_phone = f"+{phone}"
        rate_limit_result = await security_service.check_sms_rate_limit(db, formatted_phone)
        
        if not rate_limit_result["allowed"]:
            logger.warning(f"üö´ SMS rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {formatted_phone}: {rate_limit_result['requests_count']}/{rate_limit_result['max_requests']}")
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç SMS –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {rate_limit_result['reset_at']} –º–∏–Ω—É—Ç."
            )
        
        logger.info(f"‚úÖ SMS rate limit OK –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {formatted_phone}: {rate_limit_result['requests_count']}/{rate_limit_result['max_requests']}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        code = generate_registration_sms_code()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è (1 –º–∏–Ω—É—Ç–∞)
        expiry_time = datetime.now() + timedelta(minutes=1)
        sms_codes_storage[phone] = {
            'code': code,
            'expires_at': expiry_time,
            'attempts': 0,
            'type': 'registration'  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"–ö–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ SUBboards: {code}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ SMS.ru
        success = send_sms_via_sms_ru(phone, message)
        
        if not success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS"
            )
        
        return {
            "success": True,
            "message": "SMS –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            "expires_in": 60  # 1 –º–∏–Ω—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.post("/logout")
async def logout_user():
    """
    –õ–æ–≥–∞—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞)
    """
    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}

@router.post("/refresh")
async def refresh_access_token(
    request: Request,
    response: Response,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç access token –∏—Å–ø–æ–ª—å–∑—É—è refresh token –∏–∑ HttpOnly cookie
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º refresh token –∏–∑ HttpOnly cookie
        refresh_token = request.cookies.get('refresh_token')
        if not refresh_token:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh token –≤ cookie"
            )
        
        # üõ°Ô∏è –í–ê–õ–ò–î–ò–†–£–ï–ú SECURE SESSION (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è refresh)
        device_session, user = await security_service.validate_session(db, refresh_token, request, strict_fingerprint=False)
        
        if not device_session or not user:
            logger.warning(f"üö´ –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è refresh token")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh token"
            )
        
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: ID={device_session.id}, User={user.id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        await security_service.device_session_crud.update_last_used(
            db, device_session.id, security_service.get_client_ip(request)
        )
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π secure refresh token –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        new_refresh_token = security_service.generate_secure_token(32)
        await security_service.device_session_crud.update_refresh_token(
            db, device_session.id, new_refresh_token
        )
        logger.info(f"‚úÖ [refresh] –û–±–Ω–æ–≤–ª–µ–Ω refresh token –≤ –ë–î –¥–ª—è session {device_session.id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ JWT —Ç–æ–∫–µ–Ω—ã
        access_token_data = {
            "sub": str(user.id),
            "phone": user.phone,
            "name": user.name,
            "provider": "refresh"
        }
        new_access_token = create_access_token(data=access_token_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "id": str(user.id),
            "name": user.name,
            "email": user.phone,
            "avatar": user.avatar,
            "role": "user",
            "provider": "sms",
            "providerId": str(user.id),
            "createdAt": user.created_at.isoformat() if user.created_at else "",
            "updatedAt": user.updated_at.isoformat() if user.updated_at else ""
        }
        
        # üõ°Ô∏è –û–ë–ù–û–í–õ–Ø–ï–ú HTTPONLY COOKIE —Å –Ω–æ–≤—ã–º refresh token
        response.set_cookie(
            key="refresh_token",
            value=new_refresh_token,
            max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            httponly=True,  # –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è JavaScript
            secure=True,    # –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS
            samesite="lax"  # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
        )
        logger.info(f"üîê [refresh] –û–±–Ω–æ–≤–ª–µ–Ω HttpOnly cookie —Å –Ω–æ–≤—ã–º refresh token")
        
        return {
            "user": user_data,
            "token": new_access_token,
            "refreshToken": new_refresh_token
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå [refresh] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–æ–≤
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ 15 –º–∏–Ω—É—Ç
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.JWT_SECRET_KEY, algorithm="HS256")
    return encoded_jwt

@router.get("/device-sessions")
async def get_device_sessions(
    session_data: dict = Depends(require_valid_session),
    request: Request = None
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö device-—Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    user_id = session_data["user_id"]
    current_session_id = session_data["session_id"]
    db = session_data["db"]
    
    print(f"üîç [device-sessions] –ó–∞–ø—Ä–æ—Å —Å–µ–∞–Ω—Å–æ–≤ –¥–ª—è user_id: {user_id}")
    print(f"üîç [device-sessions] –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∏–∑ middleware: ID={current_session_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º device-—Å–µ—Å—Å–∏–∏
    from crud.device_session import CRUDDeviceSession
    crud = CRUDDeviceSession()
    sessions = await crud.get_active_sessions_for_user(db, user_id)
    
    print(f"üîç [device-sessions] –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤: {len(sessions)}")
    
    for session in sessions:
        is_current = session.id == current_session_id if current_session_id else False
        print(f"üîç [device-sessions] Session ID: {session.id}, is_current: {is_current}")
    
    sessions_dict = [s.to_dict() for s in sessions]
    print(f"üîç [device-sessions] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ: {sessions_dict}")
    print(f"üîç [device-sessions] Current session ID: {current_session_id}")
    
    return {
        "sessions": sessions_dict,
        "current_session_id": current_session_id
    }

@router.post("/device-sessions/close-others")
async def close_other_device_sessions(
    session_data: dict = Depends(require_valid_session)
):
    """
    –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ device-—Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    user_id = session_data["user_id"]
    current_session_id = session_data["session_id"]
    db = session_data["db"]
    
    print(f"üîç [close-others] –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∏–∑ middleware: ID={current_session_id}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
    from crud.device_session import CRUDDeviceSession
    crud = CRUDDeviceSession()
    count = await crud.revoke_all_sessions_for_user(db, user_id, except_session_id=current_session_id)
    print(f"üóëÔ∏è [close-others] –£–¥–∞–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: {count}")
    
    return {"deleted": count}

@router.delete("/device-sessions/{session_id}")
async def delete_device_session(
    session_id: int = Path(..., description="ID —Å–µ—Å—Å–∏–∏"),
    session_data: dict = Depends(require_valid_session),
    request: Request = None,
    response: Response = None
):
    """
    –ó–∞–≤–µ—Ä—à–∏—Ç—å (–æ—Ç–æ–∑–≤–∞—Ç—å) –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é device-—Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    user_id = session_data["user_id"]
    current_session_id = session_data["session_id"]
    db = session_data["db"]
    
    print(f"üóëÔ∏è [delete-session] –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é {session_id} –¥–ª—è user_id: {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    from crud.device_session import CRUDDeviceSession
    crud = CRUDDeviceSession()
    sessions = await crud.get_active_sessions_for_user(db, user_id)
    
    print(f"üîç [delete-session] –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤: {len(sessions)}")
    for session in sessions:
        print(f"üîç [delete-session] Session ID: {session.id}")
    
    if not any(s.id == session_id for s in sessions):
        print(f"‚ùå [delete-session] –°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    
    # üõ°Ô∏è –ü–†–û–í–ï–†–Ø–ï–ú –Ø–í–õ–Ø–ï–¢–°–Ø –õ–ò –≠–¢–ê –°–ï–°–°–ò–Ø –¢–ï–ö–£–©–ï–ô
    is_current_session = (current_session_id == session_id)
    
    if is_current_session:
        print(f"‚ö†Ô∏è [delete-session] –£–¥–∞–ª—è–µ—Ç—Å—è –¢–ï–ö–£–©–ê–Ø —Å–µ—Å—Å–∏—è - –æ—á–∏—â–∞–µ–º HttpOnly cookie")
    
    print(f"‚úÖ [delete-session] –°–µ—Å—Å–∏—è {session_id} –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î...")
    ok = await crud.revoke_session(db, session_id)
    print(f"‚úÖ [delete-session] –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: {ok}")
    
    # üõ°Ô∏è –û–ß–ò–©–ê–ï–ú HTTPONLY COOKIE –ï–°–õ–ò –≠–¢–û –¢–ï–ö–£–©–ê–Ø –°–ï–°–°–ò–Ø
    if is_current_session and response:
        response.set_cookie(
            key="refresh_token",
            value="",
            max_age=0,  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º
            httponly=True,
            secure=True,
            samesite="lax"
        )
        print(f"üßπ [delete-session] HttpOnly cookie –æ—á–∏—â–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏")
    
    return {"deleted": ok, "was_current_session": is_current_session}

@router.patch("/device-sessions/settings")
async def update_device_sessions_settings(
    days: int = Body(..., embed=True, ge=1, le=365, description="–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏"),
):
    """
    –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö device-—Å–µ—Å—Å–∏–π (–∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ)
    """
    auto_cleanup_settings["days"] = days
    return {"auto_cleanup_days": days}

@router.post("/check-device-trust")
async def check_device_trust(
    trust_data: dict,
    request: Request,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
    """
    try:
        phone = trust_data.get('phone')
        if not phone:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            )
        
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        client = await user_crud.get_user_by_phone(db, phone=phone)
        if not client:
            return {
                "trusted": False,
                "reason": "user_not_found",
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        # üõ°Ô∏è –ü–†–û–í–ï–†–Ø–ï–ú HTTPONLY COOKIE —Å refresh token
        refresh_token_from_cookie = security_service.get_refresh_token_from_cookie(request)
        if not refresh_token_from_cookie:
            return {
                "trusted": False,
                "reason": "no_refresh_token",
                "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh token –≤ cookie"
            }
        
        # üõ°Ô∏è –í–ê–õ–ò–î–ò–†–£–ï–ú –°–ï–°–°–ò–Æ –° –ü–†–û–í–ï–†–ö–û–ô DEVICE FINGERPRINT
        session, validated_client = await security_service.validate_session(
            db, refresh_token_from_cookie, request, strict_fingerprint=False  # –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è check-device-trust
        )
        
        if not session or not validated_client:
            return {
                "trusted": False,
                "reason": "invalid_session",
                "message": "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
            }
        
        if session.user_id != client.id:
            return {
                "trusted": False,
                "reason": "session_mismatch",
                "message": "–°–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            }
        
        # ‚úÖ –£–°–¢–†–û–ô–°–¢–í–û –î–û–í–ï–†–ï–ù–ù–û–ï - –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è
        logger.info(f"‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è {phone}: session_id={session.id}")
        
        return {
            "trusted": True,
            "reason": "valid_session",
            "message": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ",
            "session_id": session.id,
            "device_info": {
                "browser": session.browser_name,
                "os": session.os_name,
                "device": session.device_type,
                "last_used": session.last_used_at.isoformat() if session.last_used_at else None
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Device Trust: {e}")
        return {
            "trusted": False,
            "reason": "server_error",
            "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }

@router.post("/auto-login")
async def auto_login_trusted_device(
    login_data: dict,
    request: Request,
    response: Response,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è HttpOnly cookie
    """
    try:
        phone = login_data.get('phone')
        if not phone:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            )
        
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        client = await user_crud.get_user_by_phone(db, phone=phone)
        if not client:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # üõ°Ô∏è –í–ê–õ–ò–î–ò–†–£–ï–ú REFRESH TOKEN –ò–ó HTTPONLY COOKIE
        refresh_token_from_cookie = security_service.get_refresh_token_from_cookie(request)
        if not refresh_token_from_cookie:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh token - —Ç—Ä–µ–±—É–µ—Ç—Å—è SMS –∫–æ–¥"
            )
        
        # üõ°Ô∏è –í–ê–õ–ò–î–ò–†–£–ï–ú –°–ï–°–°–ò–Æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–æ –∏ –≤ check-device-trust)
        session, validated_client = await security_service.validate_session(
            db, refresh_token_from_cookie, request, strict_fingerprint=False  # –ú—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ –≤ check-device-trust
        )
        
        if not session or not validated_client or session.user_id != client.id:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è SMS –∫–æ–¥"
            )
        
        # ‚úÖ –£–°–¢–†–û–ô–°–¢–í–û –î–û–í–ï–†–ï–ù–ù–û–ï - –°–û–ó–î–ê–ï–ú –ù–û–í–´–ï –¢–û–ö–ï–ù–´
        logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {phone}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π JWT access token
        access_token_data = {
            "sub": str(client.id),
            "phone": client.phone,
            "name": client.name,
            "provider": "auto_login"
        }
        access_token = create_access_token(data=access_token_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π refresh token –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        new_refresh_token = security_service.generate_secure_token(32)
        from crud.device_session import CRUDDeviceSession
        crud = CRUDDeviceSession()
        await crud.update_refresh_token(db, session.id, new_refresh_token)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "id": str(client.id),
            "name": client.name,
            "email": client.phone,
            "avatar": client.avatar,
            "role": "user",
            "provider": "auto_login",
            "providerId": str(client.id),
            "createdAt": client.created_at.isoformat() if client.created_at else "",
            "updatedAt": client.updated_at.isoformat() if client.updated_at else ""
        }
        
        # üõ°Ô∏è –û–ë–ù–û–í–õ–Ø–ï–ú HTTPONLY COOKIE —Å –Ω–æ–≤—ã–º refresh token
        response.set_cookie(
            key="refresh_token",
            value=new_refresh_token,
            max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            httponly=True,  # –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è JavaScript
            secure=True,    # –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS
            samesite="lax"  # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
        )
        
        logger.info(f"üîê [auto-login] –û–±–Ω–æ–≤–ª–µ–Ω HttpOnly cookie –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        
        return {
            "user": user_data,
            "token": access_token,
            "refreshToken": new_refresh_token,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            "login_method": "auto_trusted_device"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.post("/soft-logout")
async def soft_logout_user(
    request: Request,
    response: Response,
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ú—è–≥–∫–∏–π –≤—ã—Ö–æ–¥ - –æ—á–∏—â–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç device session –¥–ª—è Device Trust
    """
    try:
        # üõ°Ô∏è –ü–û–õ–£–ß–ê–ï–ú REFRESH TOKEN –ò–ó HTTPONLY COOKIE
        refresh_token_from_cookie = security_service.get_refresh_token_from_cookie(request)
        if not refresh_token_from_cookie:
            logger.info("‚ö†Ô∏è Soft logout: refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –æ—á–∏—â–∞–µ–º cookie
            response.set_cookie(
                key="refresh_token",
                value="",
                max_age=0,
                httponly=True,
                secure=True,
                samesite="lax"
            )
            return {"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω (—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª)"}
        
        # –ù–∞—Ö–æ–¥–∏–º device session
        from crud.device_session import CRUDDeviceSession
        crud = CRUDDeviceSession()
        current_session = await crud.get_session_by_refresh_token(db, refresh_token_from_cookie)
        
        if current_session:
            # üîÑ –û–ë–ù–û–í–õ–Ø–ï–ú REFRESH TOKEN (–∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π)
            new_refresh_token = security_service.generate_secure_token(32)
            await crud.update_refresh_token(db, current_session.id, new_refresh_token)
            logger.info(f"‚úÖ Soft logout: refresh token –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è session {current_session.id}")
            
            # üõ°Ô∏è –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ù–û–í–´–ô HTTPONLY COOKIE (–ù–ï –û–ß–ò–©–ê–ï–ú!)
            response.set_cookie(
                key="refresh_token",
                value=new_refresh_token,
                max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π
                httponly=True,
                secure=True,
                samesite="lax"
            )
            logger.info(f"üîê Soft logout: –Ω–æ–≤—ã–π HttpOnly cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Soft logout: device session –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –æ—á–∏—â–∞–µ–º cookie")
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –æ—á–∏—â–∞–µ–º cookie
            response.set_cookie(
                key="refresh_token",
                value="",
                max_age=0,
                httponly=True,
                secure=True,
                samesite="lax"
            )
        
        return {"message": "–ú—è–≥–∫–∏–π –≤—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ soft logout: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—á–∏—â–∞–µ–º cookie
        response.set_cookie(
            key="refresh_token",
            value="",
            max_age=0,
            httponly=True,
            secure=True,
            samesite="lax"
        )
        return {"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –æ—à–∏–±–∫–æ–π"}

@router.post("/debug-device-fingerprint")
async def debug_device_fingerprint(
    request: Request,
    db: AsyncSession = Depends(get_db_session)
):
    """
    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô ENDPOINT - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç device fingerprint –∏ —Å–µ—Å—Å–∏–∏
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã fingerprint
        device_fingerprints = security_service.generate_flexible_fingerprint(request)
        ip_address = security_service.get_client_ip(request)
        user_agent = request.headers.get("user-agent", "")
        
        # –ò—â–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —Å —Ç–∞–∫–∏–º –∂–µ fingerprint
        from crud.device_session import CRUDDeviceSession
        device_crud = CRUDDeviceSession()
        
        # –ò—â–µ–º –í–°–ï —Å–µ—Å—Å–∏–∏ –ø–æ loose fingerprint (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
        all_sessions = await device_crud.get_sessions_by_fingerprint(
            db, device_fingerprints["loose"], include_inactive=True
        )
        active_sessions = await device_crud.get_sessions_by_fingerprint(
            db, device_fingerprints["loose"], include_inactive=False
        )
        
        # –ü–æ–ª—É—á–∞–µ–º refresh token –∏–∑ cookie
        refresh_token = request.cookies.get("refresh_token")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        sessions_by_user = {}
        for session in all_sessions:
            user_id = session.user_id
            if user_id not in sessions_by_user:
                sessions_by_user[user_id] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ refresh token
            token_matches = False
            if refresh_token and session.refresh_token_hash:
                import bcrypt
                try:
                    token_matches = bcrypt.checkpw(
                        refresh_token.encode('utf-8'), 
                        session.refresh_token_hash.encode('utf-8')
                    )
                except:
                    token_matches = False
            
            sessions_by_user[user_id].append({
                "session_id": session.id,
                "is_active": session.is_active,
                "created_at": session.created_at.isoformat() if session.created_at else None,
                "last_used_at": session.last_used_at.isoformat() if session.last_used_at else None,
                "expires_at": session.expires_at.isoformat() if session.expires_at else None,
                "browser": session.browser_name,
                "os": session.os_name,
                "device_type": session.device_type,
                "refresh_token_hash": session.refresh_token_hash[:10] + "..." if session.refresh_token_hash else None,
                "current_refresh_token_matches": token_matches
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        users_info = {}
        for user_id in sessions_by_user.keys():
            user = await user_crud.get_user(db, user_id)
            if user:
                users_info[user_id] = {
                    "name": user.name,
                    "phone": user.phone,
                    "email": user.email
                }
        
        return {
            "current_request": {
                "ip_address": ip_address,
                "user_agent": user_agent,
                "fingerprints": {
                    "strict": device_fingerprints["strict"][:16] + "...",
                    "loose": device_fingerprints["loose"][:16] + "...", 
                    "very_loose": device_fingerprints["very_loose"][:16] + "..."
                },
                "has_refresh_token": bool(refresh_token),
                "refresh_token_preview": refresh_token[:10] + "..." if refresh_token else None
            },
            "sessions_analysis": {
                "total_sessions_all": len(all_sessions),
                "total_sessions_active": len(active_sessions),
                "unique_users_count": len(sessions_by_user),
                "sessions_by_user": sessions_by_user,
                "users_info": users_info
            },
            "problem_analysis": {
                "multiple_users_same_device": len(sessions_by_user) > 1,
                "sessions_deactivated": len(all_sessions) > len(active_sessions),
                "explanation": "–ï—Å–ª–∏ multiple_users_same_device = true –∏ sessions_deactivated = true, —Ç–æ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ device fingerprint: {e}")
        import traceback
        return {
            "error": str(e),
            "traceback": traceback.format_exc()
        }
