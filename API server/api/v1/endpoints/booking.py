from fastapi import APIRouter, Depends, HTTPException, status, Query, Header
from sqlalchemy.ext.asyncio import AsyncSession
from db.session import get_db_session
from crud.booking import get_bookings, create_booking, update_booking
from crud.user import user_crud
from schemas.booking import BookingOut, BookingCreate, BookingUpdate
from typing import List, Optional
from datetime import datetime, timedelta, timezone

router = APIRouter()

async def get_current_user_optional(
    authorization: str = Header(None),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ JWT —Ç–æ–∫–µ–Ω—É
    """
    if not authorization:
        return None
    
    if not authorization.startswith("Bearer "):
        return None
    
    token = authorization.replace("Bearer ", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å eyJ)
    if not token.startswith("eyJ"):
        return None
    
    try:
        from core.config import settings
        import jwt
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=["HS256"])
        user_id = int(payload.get("sub"))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = await user_crud.get_user(db, user_id)
        if user:
            print(f"‚úÖ [get_current_user_optional] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID={user.id}, –ò–º—è={user.name}")
        else:
            print(f"‚ùå [get_current_user_optional] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        return user
        
    except (jwt.InvalidTokenError, ValueError, TypeError) as e:
        print(f"‚ùå [get_current_user_optional] JWT –æ—à–∏–±–∫–∞: {e}")
        return None

@router.get("/test")
async def test_endpoint():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞"""
    return {"message": "Booking router works!", "status": "ok"}

@router.get("/list", response_model=List[BookingOut])
async def list_bookings(
    status: str = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"),
    all_bookings: bool = Query(False, description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"),
    db: AsyncSession = Depends(get_db_session),
    current_user = Depends(get_current_user_optional)
):
    """Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if not current_user:
        print("‚ùå [list_bookings] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        return []
    
    print(f"‚úÖ [list_bookings] –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={current_user.id}, –ò–º—è={current_user.name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    all_user_bookings = await get_bookings(db, status_filter=status)
    print(f"üîç [list_bookings] –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –ë–î: {len(all_user_bookings)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_bookings = [booking for booking in all_user_bookings if booking.business_owner_id == current_user.id]
    print(f"üîç [list_bookings] –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}: {len(user_bookings)}")
    
    return user_bookings

# –ü—É–±–ª–∏—á–Ω—ã–π endpoint —É–¥–∞–ª–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

@router.post("/", response_model=BookingOut, status_code=status.HTTP_201_CREATED)
async def add_booking(booking_in: BookingCreate, db: AsyncSession = Depends(get_db_session)):
    return await create_booking(db, booking_in)

@router.post("/create", response_model=BookingOut, status_code=status.HTTP_201_CREATED)
async def create_booking_alt(
    booking_in: BookingCreate, 
    db: AsyncSession = Depends(get_db_session),
    current_user = Depends(get_current_user_optional)
):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    from crud.customer import customer_crud
    from schemas.customer import CustomerCreate
    
    if not current_user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
    
    # –ï—Å–ª–∏ frontend –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è (client_name, phone) –±–µ–∑ customer_id
    if booking_in.client_name and booking_in.phone and not booking_in.customer_id:
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞
        customer = await customer_crud.get_customer_by_phone_and_owner(
            db, booking_in.phone, current_user.id
        )
        
        if not customer:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            customer_data = CustomerCreate(
                name=booking_in.client_name,
                phone=booking_in.phone,
                email=None,
                notes=None
            )
            customer = await customer_crud.create_customer(db, customer_data, current_user.id)
            print(f"‚úÖ [create_booking] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: ID={customer.id}, –ò–º—è={customer.name}")
        else:
            print(f"‚úÖ [create_booking] –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç: ID={customer.id}, –ò–º—è={customer.name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking_data = booking_in.dict()
        booking_data['business_owner_id'] = current_user.id
        booking_data['customer_id'] = customer.id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç BookingCreate —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        updated_booking = BookingCreate(**booking_data)
        return await create_booking(db, updated_booking)
    
    # –ï—Å–ª–∏ frontend –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤—ã–µ –ø–æ–ª—è (customer_id), –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
    elif booking_in.customer_id:
        customer = await customer_crud.get_customer(db, booking_in.customer_id)
        if not customer or customer.business_owner_id != current_user.id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
            )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º business_owner_id
        booking_data = booking_in.dict()
        booking_data['business_owner_id'] = current_user.id
        
        updated_booking = BookingCreate(**booking_data)
        return await create_booking(db, updated_booking)
    
    else:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (client_name + phone –∏–ª–∏ customer_id)"
        )

@router.patch("/{booking_id}", response_model=BookingOut)
async def patch_booking(booking_id: int, booking_in: BookingUpdate, db: AsyncSession = Depends(get_db_session)):
    booking = await update_booking(db, booking_id, booking_in)
    if not booking:
        raise HTTPException(status_code=404, detail="Booking not found")
    return booking

@router.get("/fully-booked-days")
async def get_fully_booked_days(
    from_date: str = Query(..., description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞, —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"),
    to_date: str = Query(..., description="–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞, —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç (YYYY-MM-DD), –∫–æ–≥–¥–∞ –≤—Å–µ –¥–æ—Å–∫–∏ –∑–∞–Ω—è—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    –î–µ–Ω—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç—ã–º, –µ—Å–ª–∏ –Ω–∞ –ö–ê–ñ–î–´–ô 5-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–π –¥–æ—Å–∫–∏.
    
    –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –≥–∏–±–∫—É—é —Å–∏—Å—Ç–µ–º—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å selected_items
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å affects_availability=true (SUP –¥–æ—Å–∫–∏)
    """
    from crud.inventory import get_inventory_stats, get_inventory_types
    from crud.booking import get_bookings
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    inventory_types = await get_inventory_types(db)
    availability_affecting_types = {
        str(inv_type.id): inv_type.board_equivalent 
        for inv_type in inventory_types 
        if inv_type.affects_availability
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Ç–æ–ª—å–∫–æ –≤–ª–∏—è—é—â–µ–≥–æ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)
    inventory_stats = await get_inventory_stats(db)
    
    # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∫–æ—Ç–æ—Ä—ã–π –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    total_boards = 0
    for type_id, type_stats in inventory_stats.get('by_type', {}).items():
        if str(type_id) in availability_affecting_types:
            total_boards += type_stats.get('total', 0) * availability_affecting_types[str(type_id)]
    
    # Fallback –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if total_boards == 0:
        total_boards = 12  # Fallback –Ω–∞ 12 SUP –¥–æ—Å–æ–∫
    
    fully_booked_days = []
    start = datetime.strptime(from_date, "%Y-%m-%d")
    end = datetime.strptime(to_date, "%Y-%m-%d")
    day_count = (end - start).days + 1
    interval_minutes = 5
    intervals_per_day = 24 * 60 // interval_minutes
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
    all_bookings = await get_bookings(db)
    
    for i in range(day_count):
        day = start + timedelta(days=i)
        day_start = day.replace(hour=0, minute=0, second=0, microsecond=0, tzinfo=timezone.utc)
        fully_booked = True
        
        for interval in range(intervals_per_day):
            interval_start = day_start + timedelta(minutes=interval * interval_minutes)
            interval_end = interval_start + timedelta(minutes=interval_minutes)
            
            boards_taken = 0
            for b in all_bookings:
                b_start = b.planned_start_time
                b_end = b_start + timedelta(hours=b.duration_in_hours + 1)  # +1 —á–∞—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                
                if b_start < interval_end and b_end > interval_start:
                    # –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤–ª–∏—è—é—â–∏–π –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                    if hasattr(b, 'selected_items') and b.selected_items:
                        boards_for_this_booking = 0
                        for type_id, quantity in b.selected_items.items():
                            if str(type_id) in availability_affecting_types:
                                # –£—á–∏—Ç—ã–≤–∞–µ–º board_equivalent (—Å–∫–æ–ª—å–∫–æ "–¥–æ—Å–æ–∫" —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ)
                                boards_for_this_booking += quantity * availability_affecting_types[str(type_id)]
                    else:
                        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        boards_for_this_booking = (b.board_count or 0) + (b.board_with_seat_count or 0)
                        if hasattr(b, 'service_type') and b.service_type == 'RENT':
                            boards_for_this_booking += (b.raft_count or 0) * 2
                        else:
                            boards_for_this_booking += (b.raft_count or 0)
                    
                    boards_taken += boards_for_this_booking
            
            if boards_taken < total_boards:
                fully_booked = False
                break
        
        if fully_booked:
            fully_booked_days.append(day.strftime("%Y-%m-%d"))
    
    return fully_booked_days

@router.get("/availability")
async def get_day_availability(
    date: str = Query(..., description="–î–∞—Ç–∞, —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–æ—Å–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
    –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –≥–∏–±–∫—É—é —Å–∏—Å—Ç–µ–º—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    """
    from crud.inventory import get_inventory_stats
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    inventory_stats = await get_inventory_stats(db)
    total_boards = inventory_stats.get('total_items', 12)  # Fallback –Ω–∞ 12
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    available_boards = inventory_stats.get('available_items', total_boards)
    
    return {
        "date": date, 
        "is_fully_booked": available_boards == 0, 
        "free_boards": available_boards,
        "total_boards": total_boards
    }

@router.get("/days-availability")
async def get_days_availability(
    from_date: str = Query(..., description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞, —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"),
    to_date: str = Query(..., description="–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞, —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - fully_booked_days: —Å–ø–∏—Å–æ–∫ –¥–∞—Ç, –∫–æ–≥–¥–∞ –≤—Å–µ –¥–æ—Å–∫–∏ –∑–∞–Ω—è—Ç—ã –Ω–∞ –∫–∞–∂–¥—ã–π 5-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    - partially_booked_days: —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ {date, available_after}, –≥–¥–µ available_after ‚Äî –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (UTC+7)
    
    –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –≥–∏–±–∫—É—é —Å–∏—Å—Ç–µ–º—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å selected_items
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å affects_availability=true (SUP –¥–æ—Å–∫–∏)
    """
    from crud.inventory import get_inventory_stats, get_inventory_types
    from crud.booking import get_bookings
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    inventory_types = await get_inventory_types(db)
    availability_affecting_types = {
        str(inv_type.id): inv_type.board_equivalent 
        for inv_type in inventory_types 
        if inv_type.affects_availability
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Ç–æ–ª—å–∫–æ –≤–ª–∏—è—é—â–µ–≥–æ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)
    inventory_stats = await get_inventory_stats(db)
    
    # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∫–æ—Ç–æ—Ä—ã–π –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    total_boards = 0
    for type_id, type_stats in inventory_stats.get('by_type', {}).items():
        if str(type_id) in availability_affecting_types:
            total_boards += type_stats.get('total', 0) * availability_affecting_types[str(type_id)]
    
    # Fallback –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if total_boards == 0:
        total_boards = 12  # Fallback –Ω–∞ 12 SUP –¥–æ—Å–æ–∫
    
    fully_booked_days = []
    partially_booked_days = []
    start = datetime.strptime(from_date, "%Y-%m-%d")
    end = datetime.strptime(to_date, "%Y-%m-%d")
    day_count = (end - start).days + 1
    interval_minutes = 5
    work_start_hour_utc = 2   # 09:00 –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫
    work_end_hour_utc = 16    # 23:00 –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    all_bookings = await get_bookings(db)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –Ω—É–∂–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    period_start = start.replace(hour=work_start_hour_utc, minute=0, second=0, microsecond=0, tzinfo=timezone.utc)
    period_end = (end + timedelta(days=1)).replace(hour=work_end_hour_utc, minute=0, second=0, microsecond=0, tzinfo=timezone.utc)
    
    relevant_bookings = []
    for b in all_bookings:
        booking_start = b.planned_start_time
        booking_end = booking_start + timedelta(hours=b.duration_in_hours)
        if booking_end > period_start and booking_start < period_end:
            relevant_bookings.append(b)
    
    for i in range(day_count):
        day = start + timedelta(days=i)
        day_start = day.replace(hour=0, minute=0, second=0, microsecond=0, tzinfo=timezone.utc)
        work_start = day_start + timedelta(hours=work_start_hour_utc)
        work_end = day_start + timedelta(hours=work_end_hour_utc)
        
        intervals_per_day = (work_end_hour_utc - work_start_hour_utc) * 60 // interval_minutes
        interval_is_free = []
        
        for interval in range(intervals_per_day):
            interval_start = work_start + timedelta(minutes=interval * interval_minutes)
            interval_end = interval_start + timedelta(minutes=interval_minutes)
            boards_taken = 0
            
            for b in relevant_bookings:
                b_start = b.planned_start_time
                b_end = b_start + timedelta(hours=b.duration_in_hours + 1)  # +1 —á–∞—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                
                if b_start < interval_end and b_end > interval_start:
                    # –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤–ª–∏—è—é—â–∏–π –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                    if hasattr(b, 'selected_items') and b.selected_items:
                        boards_for_this_booking = 0
                        for type_id, quantity in b.selected_items.items():
                            if str(type_id) in availability_affecting_types:
                                # –£—á–∏—Ç—ã–≤–∞–µ–º board_equivalent (—Å–∫–æ–ª—å–∫–æ "–¥–æ—Å–æ–∫" —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ)
                                boards_for_this_booking += quantity * availability_affecting_types[str(type_id)]
                    else:
                        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        boards_for_this_booking = (b.board_count or 0) + (b.board_with_seat_count or 0)
                        if hasattr(b, 'service_type') and b.service_type == 'RENT':
                            boards_for_this_booking += (b.raft_count or 0) * 2
                        else:
                            boards_for_this_booking += (b.raft_count or 0)
                    
                    boards_taken += boards_for_this_booking
            
            interval_is_free.append(boards_taken < total_boards)
        
        # --- –ë–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω ---
        min_rent_intervals = 24 * 60 // interval_minutes  # 24—á
        min_rafting_intervals = 4 * 60 // interval_minutes  # 4—á
        
        free_windows = []
        free_windows_times = []
        cur_streak = 0
        streak_start = None
        first_available = None
        
        for idx, is_free in enumerate(interval_is_free):
            if is_free:
                if cur_streak == 0:
                    streak_start = idx
                    if first_available is None:
                        first_available = work_start + timedelta(minutes=idx * interval_minutes)
                cur_streak += 1
            else:
                if cur_streak > 0:
                    free_windows.append(cur_streak)
                    start_time = work_start + timedelta(minutes=streak_start * interval_minutes)
                    end_time = work_start + timedelta(minutes=(idx) * interval_minutes)
                    free_windows_times.append((start_time, end_time, cur_streak))
                cur_streak = 0
                streak_start = None
        
        if cur_streak > 0:
            free_windows.append(cur_streak)
            start_time = work_start + timedelta(minutes=streak_start * interval_minutes)
            end_time = work_start + timedelta(minutes=(intervals_per_day) * interval_minutes)
            free_windows_times.append((start_time, end_time, cur_streak))
        
        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–Ω—è ---
        all_intervals_free = all(interval_is_free)
        has_rent_window = any(w >= min_rent_intervals for w in free_windows)
        has_rafting_window = any(w >= min_rafting_intervals for w in free_windows)
        
        if has_rent_window or has_rafting_window:
            if first_available is not None and not all_intervals_free:
                available_after_krsk = (first_available + timedelta(hours=7)).time()
                partially_booked_days.append({
                    "date": day.strftime("%Y-%m-%d"),
                    "available_after": available_after_krsk.strftime("%H:%M")
                })
        else:
            fully_booked_days.append(day.strftime("%Y-%m-%d"))
    
    return {"fully_booked_days": fully_booked_days, "partially_booked_days": partially_booked_days} 