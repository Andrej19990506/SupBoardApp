from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Optional
from db.session import get_db_session
from crud.customer import customer_crud
from schemas.customer import (
    Customer, CustomerCreate, CustomerUpdate, CustomerWithStats,
    CustomerSearch, CustomerListResponse
)
from schemas.user import User
from core.dependencies import get_current_user

router = APIRouter()

@router.post("/", response_model=Customer, status_code=status.HTTP_201_CREATED)
async def create_customer(
    customer_data: CustomerCreate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞
    existing_customer = await customer_crud.get_customer_by_phone_and_owner(
        db, customer_data.phone, current_user.id
    )
    if existing_customer:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    return await customer_crud.create_customer(db, customer_data, current_user.id)

@router.get("/", response_model=CustomerListResponse)
async def get_customers(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    search: Optional[str] = Query(None),
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞
    """
    customers = await customer_crud.get_customers_by_owner(
        db, 
        business_owner_id=current_user.id,
        skip=skip, 
        limit=limit, 
        search=search
    )
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
    total = len(await customer_crud.get_customers_by_owner(db, current_user.id, skip=0, limit=10000))
    
    return CustomerListResponse(
        customers=customers,
        total=total,
        skip=skip,
        limit=limit
    )

@router.get("/top", response_model=List[CustomerWithStats])
async def get_top_customers(
    limit: int = Query(10, ge=1, le=50),
    by_bookings: bool = Query(True),
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–ª–∏ —Ç—Ä–∞—Ç–µ
    """
    customers = await customer_crud.get_top_customers(
        db, 
        business_owner_id=current_user.id,
        limit=limit,
        by_bookings=by_bookings
    )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ CustomerWithStats –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    result = []
    for customer in customers:
        customer_stats = CustomerWithStats.from_orm(customer)
        customer_stats.spent_rub = customer.total_spent / 100.0  # –ö–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
        customer_stats.is_vip = customer.total_bookings_count >= 5
        # TODO: –î–æ–±–∞–≤–∏—Ç—å last_booking_date –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        result.append(customer_stats)
    
    return result

@router.get("/search", response_model=List[Customer])
async def search_customers_get(
    q: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞"),
    limit: int = Query(10, ge=1, le=100, description="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    skip: int = Query(0, ge=0, description="–°–º–µ—â–µ–Ω–∏–µ"),
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É (GET endpoint –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
    """
    print(f"üîç [customer search] User ID: {current_user.id}, Query: '{q}', Limit: {limit}")
    
    customers = await customer_crud.get_customers_by_owner(
        db,
        business_owner_id=current_user.id,
        skip=skip,
        limit=limit,
        search=q  # q –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    )
    
    print(f"‚úÖ [customer search] –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(customers)}")
    for customer in customers:
        print(f"   - ID={customer.id}, Name='{customer.name}', Phone='{customer.phone}'")
    
    return customers

@router.get("/{customer_id}", response_model=CustomerWithStats)
async def get_customer(
    customer_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID (—Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–≥–æ)
    """
    customer = await customer_crud.get_customer(db, customer_id)
    if not customer or customer.business_owner_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    customer_stats = CustomerWithStats.from_orm(customer)
    customer_stats.spent_rub = customer.total_spent / 100.0
    customer_stats.is_vip = customer.total_bookings_count >= 5
    
    return customer_stats

@router.put("/{customer_id}", response_model=Customer)
async def update_customer(
    customer_id: int,
    customer_update: CustomerUpdate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–≥–æ)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º
    if customer_update.phone:
        existing_customer = await customer_crud.get_customer_by_phone_and_owner(
            db, customer_update.phone, current_user.id
        )
        if existing_customer and existing_customer.id != customer_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
    
    updated_customer = await customer_crud.update_customer(
        db, customer_id, customer_update, current_user.id
    )
    if not updated_customer:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    return updated_customer

@router.delete("/{customer_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_customer(
    customer_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–≥–æ)
    """
    success = await customer_crud.delete_customer(db, customer_id, current_user.id)
    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )

@router.post("/search", response_model=List[Customer])
async def search_customers_post(
    search_params: CustomerSearch,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """
    –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (POST endpoint)
    """
    customers = await customer_crud.get_customers_by_owner(
        db,
        business_owner_id=current_user.id,
        skip=search_params.skip,
        limit=search_params.limit,
        search=search_params.search
    )
    
    return customers 