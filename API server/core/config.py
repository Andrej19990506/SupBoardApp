import os
from dotenv import load_dotenv
from pydantic_settings import BaseSettings
from pathlib import Path
from typing import Optional

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
env_path = Path('.') / '.env' 
load_dotenv(dotenv_path=env_path)

def format_pem_key(key_value: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç PEM –∫–ª—é—á, –¥–æ–±–∞–≤–ª—è—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    """
    if not key_value:
        return ""
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã \n –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    if '\\n' in key_value:
        key_value = key_value.replace('\\n', '\n')
    
    # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if '\n' in key_value:
        return key_value
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if not key_value.startswith('-----'):
        return f"-----BEGIN PRIVATE KEY-----\n{key_value}\n-----END PRIVATE KEY-----"
    
    # –ï—Å–ª–∏ –∫–ª—é—á –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
    if key_value.startswith('-----BEGIN PRIVATE KEY-----'):
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–ª—é—á –Ω–∞ —á–∞—Å—Ç–∏
        parts = key_value.replace('-----BEGIN PRIVATE KEY-----', '').replace('-----END PRIVATE KEY-----', '').strip()
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 64 —Å–∏–º–≤–æ–ª–∞
        lines = [parts[i:i+64] for i in range(0, len(parts), 64)]
        return f"-----BEGIN PRIVATE KEY-----\n{chr(10).join(lines)}\n-----END PRIVATE KEY-----"
    
    if key_value.startswith('-----BEGIN PUBLIC KEY-----'):
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–ª—é—á –Ω–∞ —á–∞—Å—Ç–∏
        parts = key_value.replace('-----BEGIN PUBLIC KEY-----', '').replace('-----END PUBLIC KEY-----', '').strip()
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 64 —Å–∏–º–≤–æ–ª–∞
        lines = [parts[i:i+64] for i in range(0, len(parts), 64)]
        return f"-----BEGIN PUBLIC KEY-----\n{chr(10).join(lines)}\n-----END PUBLIC KEY-----"
    
    return key_value

class Settings(BaseSettings):
    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
    POSTGRES_HOST: str = os.getenv("POSTGRES_HOST", "postgres")
    POSTGRES_PORT: int = int(os.getenv("POSTGRES_PORT", 5432))
    POSTGRES_DB: str = os.getenv("POSTGRES_DB", "appsubboard")
    POSTGRES_USER: str = os.getenv("POSTGRES_USER", "postgres")
    POSTGRES_PASSWORD: str = os.getenv("POSTGRES_PASSWORD", "postgres")

    # –°–æ–±–∏—Ä–∞–µ–º URL –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞ asyncpg
    DATABASE_URL: str = (
        f"postgresql+asyncpg://{POSTGRES_USER}:{POSTGRES_PASSWORD}@"
        f"{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"
    )

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FastAPI ---
    API_V1_STR: str = "/api/v1" 
    PROJECT_NAME: str = "AppSubboard API"
    PROJECT_VERSION: str = "0.1.0"

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT ---
    JWT_SECRET_KEY: str = os.getenv("JWT_SECRET_KEY", "your-secret-key-change-in-production")
    ACCESS_TOKEN_EXPIRE_MINUTES: int = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 30))

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    _vapid_public_key_raw: str = os.getenv("VAPID_PUBLIC_KEY", "")
    _vapid_private_key_raw: str = os.getenv("VAPID_PRIVATE_KEY", "")
    
    @property
    def VAPID_PUBLIC_KEY(self) -> str:
        return format_pem_key(self._vapid_public_key_raw)
    
    @property
    def VAPID_PRIVATE_KEY(self) -> str:
        return format_pem_key(self._vapid_private_key_raw)
    
    VAPID_CLAIMS_SUB: str = os.getenv("VAPID_CLAIMS_SUB", "mailto:admin@example.com")
    APPLICATION_SERVER_KEY: str = os.getenv("APPLICATION_SERVER_KEY", "")

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMS.ru ---
    SMS_RU_API_ID: str = os.getenv("SMS_RU_API_ID", "")

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google OAuth ---
    GOOGLE_CLIENT_ID: str = os.getenv("GOOGLE_CLIENT_ID", "")
    GOOGLE_CLIENT_SECRET: str = os.getenv("GOOGLE_CLIENT_SECRET", "")

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VK OAuth ---
    VK_CLIENT_ID: str = os.getenv("VK_CLIENT_ID", "")
    VK_CLIENT_SECRET: str = os.getenv("VK_CLIENT_SECRET", "")

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Email SMTP ---
    SMTP_SERVER: str = os.getenv("SMTP_SERVER", "smtp.yandex.ru")
    SMTP_PORT: int = int(os.getenv("SMTP_PORT", 587))
    SMTP_USERNAME: str = os.getenv("SMTP_USERNAME", "")
    SMTP_PASSWORD: str = os.getenv("SMTP_PASSWORD", "")
    FROM_EMAIL: str = os.getenv("FROM_EMAIL", "noreply@supboardapp.ru")
    FRONTEND_URL: str = os.getenv("FRONTEND_URL", "https://supboardapp.ru")

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ cookies ---
    ENVIRONMENT: str = os.getenv("ENVIRONMENT", "development")
    
    @property
    def USE_SECURE_COOKIES(self) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å secure cookies.
        –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
        """
        return False  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OAuth –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö

    class Config:
        case_sensitive = True


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
settings = Settings()

# –õ–æ–≥–∏—Ä—É–µ–º SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import logging
logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º print –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–≥—Ä—É–∑–∫–∏
print("üîß [CONFIG] –ó–∞–≥—Ä—É–∂–µ–Ω—ã SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
print(f"üìß [CONFIG] SMTP_SERVER: {settings.SMTP_SERVER}")
print(f"üîå [CONFIG] SMTP_PORT: {settings.SMTP_PORT}")
print(f"üë§ [CONFIG] SMTP_USERNAME: {settings.SMTP_USERNAME}")
print(f"üîë [CONFIG] SMTP_PASSWORD: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.SMTP_PASSWORD else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
print(f"üì§ [CONFIG] FROM_EMAIL: {settings.FROM_EMAIL}")
print(f"üåê [CONFIG] FRONTEND_URL: {settings.FRONTEND_URL}")

logger.info("üîß –ó–∞–≥—Ä—É–∂–µ–Ω—ã SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
logger.info(f"üìß SMTP_SERVER: {settings.SMTP_SERVER}")
logger.info(f"üîå SMTP_PORT: {settings.SMTP_PORT}")
logger.info(f"üë§ SMTP_USERNAME: {settings.SMTP_USERNAME}")
logger.info(f"üîë SMTP_PASSWORD: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.SMTP_PASSWORD else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
logger.info(f"üì§ FROM_EMAIL: {settings.FROM_EMAIL}")
logger.info(f"üåê FRONTEND_URL: {settings.FRONTEND_URL}")

def get_settings() -> Settings:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–¥–ª—è dependency injection)"""
    return settings 