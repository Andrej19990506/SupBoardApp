from fastapi import HTTPException, status, Request, Header, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Optional
from services.auth_security_service import AuthSecurityService
from crud.user import user_crud
from crud.device_session import CRUDDeviceSession
from db.session import get_db_session
import logging

logger = logging.getLogger(__name__)

class SessionSecurityMiddleware:
    """
    Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ device session
    –Ω–∞ –≤—Å–µ—Ö –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö API endpoints
    """
    
    def __init__(self):
        self.security_service = AuthSecurityService()
        self.device_session_crud = CRUDDeviceSession()
    
    async def verify_session_security(
        self,
        request: Request,
        authorization: str,
        db: AsyncSession
    ) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å access token –∏ device session
        
        Returns:
            dict: {"user_id": int, "session_id": int} –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–æ
        
        Raises:
            HTTPException: 401 –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
        """
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç authorization header
        if not authorization or not authorization.startswith("Bearer "):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            )
        
        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º access token
        token = authorization.replace("Bearer ", "")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã, —Ç–∞–∫ –∏ JWT)
        is_legacy_token = (token.startswith("google_token_") or 
                          token.startswith("telegram_token_") or 
                          token.startswith("sms_token_") or
                          token.startswith("vk_token_"))
        is_jwt_token = token.startswith("eyJ")  # JWT —Ç–æ–∫–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å eyJ
        
        if not (is_legacy_token or is_jwt_token):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"
            )
        
        # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞
        try:
            if is_jwt_token:
                # –î–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º payload
                import jwt
                from core.config import settings
                
                try:
                    payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=["HS256"])
                    user_id = int(payload.get("sub"))
                    if not user_id:
                        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç subject –≤ JWT —Ç–æ–∫–µ–Ω–µ")
                except jwt.ExpiredSignatureError:
                    raise HTTPException(
                        status_code=status.HTTP_401_UNAUTHORIZED,
                        detail="–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫"
                    )
                except jwt.InvalidTokenError:
                    raise HTTPException(
                        status_code=status.HTTP_401_UNAUTHORIZED,
                        detail="–ù–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω"
                    )
            else:
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∏–º–µ–Ω–∏
                parts = token.split("_")
                if len(parts) >= 3:
                    user_id = int(parts[2])
                else:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
        except (ValueError, IndexError):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"
            )
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user = await user_crud.get_user(db, user_id)
        if not user or not user.is_active:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            )
        
        # 5. üõ°Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê DEVICE SESSION
        refresh_token_from_cookie = self.security_service.get_refresh_token_from_cookie(request)
        
        if not refresh_token_from_cookie:
            logger.warning(f"Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ cookie –¥–ª—è user_id: {user_id}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh token"
            )
        
        # üõ°Ô∏è –í–ê–õ–ò–î–ò–†–£–ï–ú –°–ï–°–°–ò–Æ –° –ü–†–û–í–ï–†–ö–û–ô DEVICE FINGERPRINT
        session, validated_user = await self.security_service.validate_session(
            db, refresh_token_from_cookie, request, strict_fingerprint=False  # üîß –û—Ç–∫–ª—é—á–∞–µ–º strict mode –¥–ª—è dev
        )
        
        if not session or not validated_user:
            logger.warning(f"Session validation failed for user_id: {user_id}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
            )
        
        if session.user_id != user.id:
            logger.warning(f"Session user mismatch: {session.user_id} != {user.id}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
            )
        
        logger.debug(f"Session validated with fingerprint check: ID={session.id}, user_id={user_id}")
        
        return {
            "user_id": user_id,
            "session_id": session.id,
            "user": validated_user,
            "db": db
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
session_middleware = SessionSecurityMiddleware()


async def require_valid_session(
    request: Request,
    authorization: str = Header(None),
    db: AsyncSession = Depends(get_db_session)
) -> dict:
    """
    Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints
    
    Usage:
        @router.get("/protected-endpoint")
        async def protected_endpoint(
            session_data: dict = Depends(require_valid_session)
        ):
            user_id = session_data["user_id"]
            # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
    """
    return await session_middleware.verify_session_security(request, authorization, db) 
