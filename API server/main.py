from fastapi import FastAPI, Request, status, Depends
from fastapi.staticfiles import StaticFiles
from dotenv import load_dotenv
import os
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from models.base import Base
from core.config import settings
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from loguru import logger
import redis.asyncio as redis


from api.v1.api import api_router as api_v1_router # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä V1
from core.logging_config import setup_logging
from db.session import get_db_session, async_engine

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv() 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã)
async def create_tables():
    async with async_engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    logger.info("Database tables checked/created.")


redis_client = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü - –∏—Å–ø–æ–ª—å–∑—É–µ–º Alembic
    # await create_tables()
    
    # ---> –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞ < ---
    global redis_client
    redis_host = os.getenv("REDIS_HOST", "cache") # –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ docker-compose
    redis_port = int(os.getenv("REDIS_PORT", 6379))
    try:
        redis_client = redis.Redis(host=redis_host, port=redis_port, decode_responses=True) # decode_responses=True –¥–ª—è —Å—Ç—Ä–æ–∫
        await redis_client.ping() # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis/DragonflyDB –ø–æ –∞–¥—Ä–µ—Å—É {redis_host}:{redis_port}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis/DragonflyDB: {e}")
        redis_client = None # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    # ---> –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis < ---

    yield # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")

    if redis_client:
        await redis_client.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis/DragonflyDB –∑–∞–∫—Ä—ã—Ç–æ.")


# ---> –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI —Å lifespan < ---
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.PROJECT_VERSION,
    openapi_url=f"{settings.API_V1_STR}/openapi.json",
    docs_url=f"{settings.API_V1_STR}/docs",
    redoc_url=f"{settings.API_V1_STR}/redoc",
    lifespan=lifespan
)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000", 
        "http://localhost", 
        "http://192.168.0.115:3000", 
        "http://192.168.0.115",
        "https://supboardapp.ru",
        "http://supboardapp.ru"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –¥–æ–≤–µ—Ä–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –ø—Ä–æ–∫—Å–∏
@app.middleware("http")
async def trust_proxy_headers(request, call_next):
    # –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É HTTPS –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Cloudflare
    if "cf-connecting-ip" in request.headers:
        request.scope["scheme"] = "https"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –∫–∞–∫ HTTPS, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Forwarded-Proto —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ
    if "x-forwarded-proto" in request.headers:
        request.scope["scheme"] = request.headers["x-forwarded-proto"]
    
    # –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Forwarded-Ssl
    if "x-forwarded-ssl" in request.headers and request.headers["x-forwarded-ssl"].lower() == "on":
        request.scope["scheme"] = "https"
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
    response = await call_next(request)
    return response

@app.get("/")
async def root():
    return {"message": "API server is running"}

@app.get("/api/")
async def api_root():
    return {"message": "API v1 is running", "version": "1.0.0"}

@app.get("/health")
async def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API."""
    return {"status": "ok"}

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä API v1 –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º preflight
app.include_router(api_v1_router, prefix=settings.API_V1_STR)

@app.options("/{full_path:path}")
async def preflight_handler(request: Request, full_path: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ preflight –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS"""
    return JSONResponse(content={}, headers={
        "Access-Control-Allow-Origin": request.headers.get("origin", "*"),
        "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
        "Access-Control-Allow-Credentials": "true"
    })

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
app.mount("/static", StaticFiles(directory="data"), name="static")


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    errors = []
    for error in exc.errors():
        errors.append({
            "loc": error["loc"],
            "msg": error["msg"],
            "type": error["type"],
        })
    logger.error(f"Validation error for {request.url.path}: {errors}")
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={"detail": errors},
    )

if __name__ == "__main__":
    import uvicorn
    host = os.getenv("FASTAPI_HOST", "127.0.0.1")
    port = int(os.getenv("FASTAPI_PORT", "8000")) 
    
    print(f"üöÄ Starting FastAPI server on http://{host}:{port}")
    uvicorn.run(
        "main:app",
        host=host, 
        port=port, 
        reload=True
    ) 