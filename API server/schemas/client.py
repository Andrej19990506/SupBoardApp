from pydantic import BaseModel, Field, validator
from typing import Optional, List
from datetime import datetime
from decimal import Decimal


class ClientBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=255, description="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")
    phone: str = Field(..., min_length=10, max_length=32, description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    email: Optional[str] = Field(None, max_length=255, description="Email –∞–¥—Ä–µ—Å")
    avatar: Optional[str] = Field(None, max_length=500, description="URL –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    is_vip: bool = Field(False, description="VIP —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞")
    comments: Optional[str] = Field(None, description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ")


class ClientCreate(ClientBase):
    password_hash: Optional[str] = Field(None, description="–•–µ—à –ø–∞—Ä–æ–ª—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")


class ClientUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=255)
    phone: Optional[str] = Field(None, min_length=10, max_length=32)
    email: Optional[str] = Field(None, max_length=255)
    avatar: Optional[str] = Field(None, max_length=500)
    is_vip: Optional[bool] = None
    comments: Optional[str] = None


class ClientResponse(ClientBase):
    id: int
    total_bookings: int = Field(0, description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (—Å fallback)")
    completed_bookings: int = Field(0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (—Å fallback)")
    created_at: datetime
    updated_at: datetime
    
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö)
    total_bookings_count: int = Field(0, description="–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ–±—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
    completed_bookings_count: int = Field(0, description="–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
    cancelled_bookings_count: int = Field(0, description="–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
    total_revenue: Decimal = Field(Decimal('0.00'), description="–û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
    first_booking_date: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    last_booking_date: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

    class Config:
        from_attributes = True
        
    @classmethod
    def from_orm(cls, obj):
        from loguru import logger
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º
        logger.info(f"[CLIENT_FROM_ORM] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {obj.name} (ID: {obj.id})")
        logger.info(f"[CLIENT_FROM_ORM] _bookings_loaded: {hasattr(obj, '_bookings_loaded') and obj._bookings_loaded}")
        
        # üîß –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        total_bookings = obj.total_bookings_count
        completed_bookings = obj.completed_bookings_count
        logger.info(f"[CLIENT_FROM_ORM] –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ: total={total_bookings}, completed={completed_bookings}")
            
        response = cls(
            id=obj.id,
            name=obj.name,
            phone=obj.phone,
            email=obj.email,
            avatar=obj.avatar,
            is_vip=obj.is_vip,
            comments=obj.comments,
            total_bookings=total_bookings,
            completed_bookings=completed_bookings,
            created_at=obj.created_at,
            updated_at=obj.updated_at,
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
            total_bookings_count=obj.total_bookings_count,
            completed_bookings_count=obj.completed_bookings_count,
            cancelled_bookings_count=obj.cancelled_bookings_count,
            total_revenue=obj.total_revenue,
            first_booking_date=obj.first_booking_date,
            last_booking_date=obj.last_booking_date,
        )
        
        logger.info(f"[CLIENT_FROM_ORM] –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {obj.name}: total_bookings={response.total_bookings}, completed_bookings={response.completed_bookings}, is_vip={response.is_vip}")
        return response


class ClientSearchResponse(BaseModel):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç)"""
    id: str
    name: str
    phone: str
    is_vip: bool = False
    total_bookings: int = 0
    last_booking_date: Optional[str] = None
    comments: Optional[str] = None 