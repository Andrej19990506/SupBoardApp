from typing import Dict, Any, Optional, TYPE_CHECKING
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi import Request
from datetime import datetime, timedelta
import random
import string
import logging
import requests
from core.config import settings
from crud.user import user_crud
from services.email_service import email_service

if TYPE_CHECKING:
    from models.user import User

logger = logging.getLogger(__name__)

class PasswordRecoveryService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π"""
    
    def __init__(self):
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ Redis)
        self.reset_codes_storage = {}
        self.reset_tokens_storage = {}
    
    def generate_reset_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
        return ''.join(random.choices(string.digits, k=6))
    
    def generate_reset_token(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
        return ''.join(random.choices(string.ascii_letters + string.digits, k=32))
    
    async def send_reset_code(
        self, 
        db: AsyncSession, 
        phone: str, 
        user: Any, 
        request: Request
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS –∫–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        """
        try:
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_digits = ''.join(filter(str.isdigit, phone))
            logger.info(f"üîç –û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {phone_digits}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
            if not phone_digits.startswith('7') or len(phone_digits) != 11:
                logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: {phone_digits}")
                return {
                    "success": False,
                    "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            reset_code = self.generate_reset_code()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–∞–∫ –∫–∞–∫ SMS –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
            logger.info(f"üîë [DEV] –ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {phone_digits}: {reset_code}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)
            expiry_time = datetime.now() + timedelta(minutes=5)
            self.reset_codes_storage[phone_digits] = {
                'code': reset_code,
                'expires_at': expiry_time,
                'attempts': 0,
                'user_id': user.id,
                'type': 'password_reset'
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è SUBboards: {reset_code}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
            sms_sent = self._send_sms(phone_digits, message)
            
            if not sms_sent:
                return {
                    "success": False,
                    "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS"
                }
            
            logger.info(f"‚úÖ SMS –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
            return {
                "success": True,
                "message": "SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return {
                "success": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS"
            }
    
    async def verify_reset_code(
        self, 
        db: AsyncSession, 
        phone: str, 
        code: str
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç SMS –∫–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        """
        try:
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_digits = ''.join(filter(str.isdigit, phone))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            if phone_digits not in self.reset_codes_storage:
                return {
                    "valid": False,
                    "error": "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
                }
            
            stored_data = self.reset_codes_storage[phone_digits]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥
            if datetime.now() > stored_data['expires_at']:
                del self.reset_codes_storage[phone_digits]
                return {
                    "valid": False,
                    "error": "–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            if stored_data['attempts'] >= 3:
                del self.reset_codes_storage[phone_digits]
                return {
                    "valid": False,
                    "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
            if code != stored_data['code']:
                stored_data['attempts'] += 1
                if stored_data['attempts'] >= 3:
                    del self.reset_codes_storage[phone_digits]
                    return {
                        "valid": False,
                        "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
                    }
                return {
                    "valid": False,
                    "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"
                }
            
            # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            reset_token = self.generate_reset_token()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è (10 –º–∏–Ω—É—Ç)
            self.reset_tokens_storage[reset_token] = {
                'phone': phone_digits,
                'user_id': stored_data['user_id'],
                'verified_at': datetime.now(),
                'expires_at': datetime.now() + timedelta(minutes=10)
            }
            
            # –£–¥–∞–ª—è–µ–º SMS –∫–æ–¥ - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
            del self.reset_codes_storage[phone_digits]
            
            logger.info(f"‚úÖ –ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {stored_data['user_id']}")
            
            return {
                "valid": True,
                "reset_token": reset_token
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return {
                "valid": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞"
            }
    
    async def reset_password(
        self, 
        db: AsyncSession, 
        phone: str, 
        code: str, 
        new_password: str
    ) -> Dict[str, Any]:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –µ—â–µ —Ä–∞–∑
            verify_result = await self.verify_reset_code(db, phone, code)
            
            if not verify_result["valid"]:
                return {
                    "success": False,
                    "error": verify_result["error"]
                }
            
            reset_token = verify_result["reset_token"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            if reset_token not in self.reset_tokens_storage:
                return {
                    "success": False,
                    "error": "–¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
                }
            
            token_data = self.reset_tokens_storage[reset_token]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
            if datetime.now() > token_data['expires_at']:
                del self.reset_tokens_storage[reset_token]
                return {
                    "success": False,
                    "error": "–¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_crud.get_user(db, token_data['user_id'])
            if not user:
                return {
                    "success": False,
                    "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ CRUD
            success = await user_crud.update_password(db, user.id, new_password)
            
            if not success:
                return {
                    "success": False,
                    "error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"
                }
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞
            del self.reset_tokens_storage[reset_token]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if user.email:
                try:
                    email_result = email_service.send_password_changed_notification(
                        to_email=user.email,
                        user_name=user.name
                    )
                    if email_result["success"]:
                        logger.info(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user.email}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {user.email}: {email_result.get('error')}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: {str(e)}")
            
            logger.info(f"‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
            return {
                "success": True,
                "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {str(e)}")
            return {
                "success": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è"
            }
    
    async def reset_password_with_token(
        self, 
        db: AsyncSession, 
        phone: str, 
        reset_token: str, 
        new_password: str
    ) -> Dict[str, Any]:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            if reset_token not in self.reset_tokens_storage:
                return {
                    "success": False,
                    "error": "–¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫"
                }
            
            token_data = self.reset_tokens_storage[reset_token]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
            if datetime.now() > token_data['expires_at']:
                del self.reset_tokens_storage[reset_token]
                return {
                    "success": False,
                    "error": "–¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
                }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_digits = ''.join(filter(str.isdigit, phone))
            if phone_digits != token_data['phone']:
                return {
                    "success": False,
                    "error": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_crud.get_user(db, token_data['user_id'])
            if not user:
                return {
                    "success": False,
                    "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ CRUD
            success = await user_crud.update_password(db, user.id, new_password)
            
            if not success:
                return {
                    "success": False,
                    "error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"
                }
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞
            del self.reset_tokens_storage[reset_token]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if user.email:
                try:
                    email_result = email_service.send_password_changed_notification(
                        to_email=user.email,
                        user_name=user.name
                    )
                    if email_result["success"]:
                        logger.info(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user.email}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {user.email}: {email_result.get('error')}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: {str(e)}")
            
            logger.info(f"‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω")
            
            return {
                "success": True,
                "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω: {str(e)}")
            return {
                "success": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è"
            }
    
    async def email_fallback_recovery(
        self, 
        db: AsyncSession, 
        email: str, 
        phone: str, 
        request: Request
    ) -> Dict[str, Any]:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ email + –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: {email}")
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            user = await user_crud.get_user_by_email(db, email=email)
            
            if not user:
                logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {
                    "success": False,
                    "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user.id}, Phone={user.phone}")
            
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            phone_digits = ''.join(filter(str.isdigit, phone))
            user_phone_digits = ''.join(filter(str.isdigit, user.phone))
            
            logger.info(f"üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞: –≤–≤–µ–¥–µ–Ω–Ω—ã–π={phone_digits}, –≤ –ë–î={user_phone_digits}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if phone_digits != user_phone_digits:
                logger.warning(f"‚ùå –ù–æ–º–µ—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {phone_digits} != {user_phone_digits}")
                return {
                    "success": False,
                    "error": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                }
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º EMAIL —Å —Å—Å—ã–ª–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ {email}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è email –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            reset_token = email_service.generate_email_reset_token()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            email_result = email_service.send_password_reset_email(
                to_email=email,
                user_name=user.name,
                reset_token=reset_token
            )
            
            if email_result["success"]:
                logger.info(f"‚úÖ Email –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
                return {
                    "success": True,
                    "message": "–°—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ email",
                    "method": "email_link",
                    "dev_info": email_result.get("dev_reset_link")  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {email_result.get('error')}")
                return {
                    "success": False,
                    "error": email_result.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email")
                }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ email –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return {
                "success": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ email"
            }
    
    def _send_sms(self, phone: str, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —á–µ—Ä–µ–∑ SMS.ru API
        """
        try:
            api_id = settings.SMS_RU_API_ID
            
            if not api_id:
                logger.warning("SMS.ru API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                return False
            
            url = "https://sms.ru/sms/send"
            params = {
                'api_id': api_id,
                'to': phone,
                'msg': message,
                'from': 'SubBoard',
                'json': 1,
                'test': 1  # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            }
            
            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ {phone}")
            
            response = requests.get(url, params=params, timeout=10)
            result = response.json()
            
            logger.info(f"üì± SMS.ru –æ—Ç–≤–µ—Ç: {result}")
            
            if result.get('status') == 'OK':
                sms_data = result.get('sms', {})
                for phone_num, sms_info in sms_data.items():
                    if sms_info.get('status') == 'OK':
                        logger.info(f"‚úÖ SMS –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {phone_num}")
                        return True
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {sms_info.get('status_text')}")
                return False
            else:
                logger.error(f"‚ùå SMS.ru API –æ—à–∏–±–∫–∞: {result.get('status_text')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: {e}")
            return False 