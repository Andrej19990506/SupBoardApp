import json
import aiohttp
import tempfile
import os
from pathlib import Path
from typing import List, Dict, Any, Optional
from loguru import logger

from webpush import WebPush, WebPushSubscription
from core.config import get_settings
from models.push_subscription import PushSubscription
from schemas.push_subscription import NotificationPayload, NotificationResult


class PushNotificationService:
    def __init__(self):
        self.settings = get_settings()
        self.web_push = None
        self.temp_private_key_path = None
        self.temp_public_key_path = None
        self._initialize_webpush()
    
    def _initialize_webpush(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç WebPush —Å VAPID –∫–ª—é—á–∞–º–∏"""
        try:
            if not self.settings.VAPID_PRIVATE_KEY or not self.settings.VAPID_PUBLIC_KEY:
                logger.warning("VAPID –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                return
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –∫–ª—é—á–∞–º–∏ –¥–ª—è webpush 1.0.5
            self._create_temp_key_files()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebPush —Å Path –æ–±—ä–µ–∫—Ç–∞–º–∏ (webpush 1.0.5)
            self.web_push = WebPush(
                private_key=Path(self.temp_private_key_path),
                public_key=Path(self.temp_public_key_path),
                subscriber=self.settings.VAPID_CLAIMS_SUB
            )
            
            logger.info("WebPush –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebPush: {e}")
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")
            self.web_push = None
    
    def _create_temp_key_files(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –∫–ª—é—á–∞–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–ª—é—á–µ–π
            with tempfile.NamedTemporaryFile(mode='w', suffix='.pem', delete=False) as f:
                f.write(self.settings.VAPID_PRIVATE_KEY)
                self.temp_private_key_path = f.name
            
            with tempfile.NamedTemporaryFile(mode='w', suffix='.pem', delete=False) as f:
                f.write(self.settings.VAPID_PUBLIC_KEY)
                self.temp_public_key_path = f.name
                
            logger.info(f"–°–æ–∑–¥–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–ª—é—á–µ–π: {self.temp_private_key_path}, {self.temp_public_key_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–ª—é—á–µ–π: {e}")
            raise
    
    def _cleanup_temp_files(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –∫–ª—é—á–∞–º–∏"""
        try:
            if self.temp_private_key_path and os.path.exists(self.temp_private_key_path):
                os.unlink(self.temp_private_key_path)
                logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {self.temp_private_key_path}")
                
            if self.temp_public_key_path and os.path.exists(self.temp_public_key_path):
                os.unlink(self.temp_public_key_path)
                logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {self.temp_public_key_path}")
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self._cleanup_temp_files()
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return self.web_push is not None
    
    async def send_notification(
        self,
        subscription: PushSubscription,
        payload: NotificationPayload
    ) -> NotificationResult:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
        """
        if not self.is_available():
            return NotificationResult(
                success=False,
                error="Push notification service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            )
        
        try:
            # –°–æ–∑–¥–∞–µ–º WebPushSubscription –∏–∑ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏
            web_push_subscription = WebPushSubscription.model_validate({
                "endpoint": subscription.endpoint,
                "keys": {
                    "auth": subscription.auth,
                    "p256dh": subscription.p256dh
                }
            })
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_data = payload.model_dump()
            message = self.web_push.get(
                message=json.dumps(message_data),
                subscription=web_push_subscription
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url=subscription.endpoint,
                    data=message.encrypted,
                    headers=message.headers,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200 or response.status == 201:
                        logger.info(f"Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {subscription.endpoint}")
                        return NotificationResult(success=True)
                    elif response.status == 410:
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –±–æ–ª–µ–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
                        logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ (410): {subscription.endpoint}")
                        return NotificationResult(
                            success=False,
                            error="subscription_invalid",
                            should_remove=True
                        )
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status} - {error_text}")
                        return NotificationResult(
                            success=False,
                            error=f"HTTP {response.status}: {error_text}"
                        )
        
        except aiohttp.ClientError as e:
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return NotificationResult(
                success=False,
                error=f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            )
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return NotificationResult(
                success=False,
                error=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            )
    
    async def send_bulk_notifications(
        self,
        subscriptions: List[PushSubscription],
        payload: NotificationPayload,
        max_concurrent: int = 10
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        """
        if not subscriptions:
            return {
                "total": 0,
                "successful": 0,
                "failed": 0,
                "invalid_subscriptions": []
            }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {len(subscriptions)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        import asyncio
        semaphore = asyncio.Semaphore(max_concurrent)
        
        async def send_with_semaphore(subscription: PushSubscription):
            async with semaphore:
                return await self.send_notification(subscription, payload)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(
            *[send_with_semaphore(sub) for sub in subscriptions],
            return_exceptions=True
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = 0
        failed = 0
        invalid_subscriptions = []
        
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {result}")
                failed += 1
            elif result.success:
                successful += 1
            else:
                failed += 1
                if result.should_remove:
                    invalid_subscriptions.append(subscriptions[i].id)
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –Ω–µ—É–¥–∞—á–Ω–æ")
        
        return {
            "total": len(subscriptions),
            "successful": successful,
            "failed": failed,
            "invalid_subscriptions": invalid_subscriptions
        }
    
    def create_booking_notification(
        self,
        booking_id: int,
        client_name: str,
        notification_type: str,
        additional_data: Optional[Dict[str, Any]] = None
    ) -> NotificationPayload:
        """
        –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        """
        notifications = {
            "pending_confirmation": {
                "title": "üîî SUPBoard - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "body": f"–ö–ª–∏–µ–Ω—Ç {client_name} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.",
                "icon": "/canoe.png",
                "badge": "/canoe.png",
                "tag": f"booking_{booking_id}_confirmation",
                "requireInteraction": True,  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                "actions": [
                    {
                        "action": "confirm",
                        "title": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        "icon": "/canoe.png"
                    },
                    {
                        "action": "cancel", 
                        "title": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        "icon": "/canoe.png"
                    }
                ],
                "data": {
                    "booking_id": booking_id,
                    "type": "pending_confirmation",
                    "url": f"/bookings/{booking_id}",
                    "client_name": client_name,
                    "priority": "high"
                }
            },
            "client_arriving": {
                "title": "üö∂‚Äç‚ôÇÔ∏è SubBoard - –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è",
                "body": f"{client_name} –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!",
                "icon": "/canoe.png",
                "badge": "/canoe.png",
                "tag": f"booking_{booking_id}_arriving",
                "requireInteraction": True,
                "actions": [
                    {
                        "action": "prepare",
                        "title": "üéí –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å",
                        "icon": "/canoe.png"
                    },
                    {
                        "action": "view",
                        "title": "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                        "icon": "/canoe.png"
                    }
                ],
                "data": {
                    "booking_id": booking_id,
                    "type": "client_arriving",
                    "url": f"/bookings/{booking_id}",
                    "client_name": client_name,
                    "priority": "medium"
                }
            },
            "client_arriving_soon": {
                "title": "‚è∞ SubBoard - –ö–ª–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ –ø—Ä–∏–¥–µ—Ç",
                "body": f"{client_name} –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç. –í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!",
                "icon": "/canoe.png",
                "badge": "/canoe.png",
                "tag": f"booking_{booking_id}_arriving_soon",
                "requireInteraction": True,
                "actions": [
                    {
                        "action": "prepare",
                        "title": "üéí –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å",
                        "icon": "/canoe.png"
                    },
                    {
                        "action": "contact",
                        "title": "üìû –°–≤—è–∑–∞—Ç—å—Å—è",
                        "icon": "/canoe.png"
                    }
                ],
                "data": {
                    "booking_id": booking_id,
                    "type": "client_arriving_soon", 
                    "url": f"/bookings/{booking_id}",
                    "client_name": client_name,
                    "priority": "medium"
                }
            },
            "client_overdue": {
                "title": "‚ö†Ô∏è SubBoard - –ö–ª–∏–µ–Ω—Ç –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç",
                "body": f"{client_name} –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç –Ω–∞ {additional_data.get('minutes_overdue', 0)} –º–∏–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è?",
                "icon": "/canoe.png", 
                "badge": "/canoe.png",
                "tag": f"booking_{booking_id}_overdue",
                "requireInteraction": True,
                "actions": [
                    {
                        "action": "contact",
                        "title": "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å",
                        "icon": "/canoe.png"
                    },
                    {
                        "action": "arrived",
                        "title": "‚úÖ –ü—Ä–∏—à–µ–ª",
                        "icon": "/canoe.png"
                    },
                    {
                        "action": "cancel",
                        "title": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        "icon": "/canoe.png"
                    }
                ],
                "data": {
                    "booking_id": booking_id,
                    "type": "client_overdue",
                    "url": f"/bookings/{booking_id}",
                    "client_name": client_name,
                    "minutes_overdue": additional_data.get('minutes_overdue', 0) if additional_data else 0,
                    "priority": "high"
                }
            },
            "return_time": {
                "title": "üîÑ SubBoard - –í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
                "body": f"{client_name} –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. –ù–∞–ø–æ–º–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –æ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                "icon": "/canoe.png",
                "badge": "/canoe.png", 
                "tag": f"booking_{booking_id}_return",
                "requireInteraction": True,
                "actions": [
                    {
                        "action": "remind",
                        "title": "üì¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å",
                        "icon": "/canoe.png"
                    },
                    {
                        "action": "returned",
                        "title": "‚úÖ –í–µ—Ä–Ω—É–ª",
                        "icon": "/canoe.png"
                    }
                ],
                "data": {
                    "booking_id": booking_id,
                    "type": "return_time",
                    "url": f"/bookings/{booking_id}",
                    "client_name": client_name,
                    "priority": "medium"
                }
            },
            "return_overdue": {
                "title": "üö® SubBoard - –ü—Ä–æ—Å—Ä–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞",
                "body": f"{client_name} –ø—Ä–æ—Å—Ä–æ—á–∏–ª –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ {additional_data.get('minutes_overdue', 0)} –º–∏–Ω! –°—Ä–æ—á–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º.",
                "icon": "/canoe.png",
                "badge": "/canoe.png",
                "tag": f"booking_{booking_id}_return_overdue",
                "requireInteraction": True,
                "actions": [
                    {
                        "action": "contact_urgent",
                        "title": "üö® –°—Ä–æ—á–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å",
                        "icon": "/canoe.png"
                    },
                    {
                        "action": "returned",
                        "title": "‚úÖ –í–µ—Ä–Ω—É–ª",
                        "icon": "/canoe.png"
                    },
                    {
                        "action": "lost",
                        "title": "‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–ª",
                        "icon": "/canoe.png"
                    }
                ],
                "data": {
                    "booking_id": booking_id,
                    "type": "return_overdue",
                    "url": f"/bookings/{booking_id}",
                    "client_name": client_name,
                    "minutes_overdue": additional_data.get('minutes_overdue', 0) if additional_data else 0,
                    "priority": "urgent"
                }
            }
        }
        
        notification_config = notifications.get(notification_type)
        if not notification_config:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_type}")
        
        return NotificationPayload(**notification_config)
    
    def get_vapid_public_key(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π VAPID –∫–ª—é—á –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.is_available():
            return None
        
        return self.settings.VAPID_PUBLIC_KEY

    def get_vapid_public_key_for_web_push(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π VAPID –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64url –¥–ª—è Web Push API"""
        if not self.is_available():
            return None
        
        try:
            from cryptography.hazmat.primitives import serialization
            from cryptography.hazmat.primitives.serialization import load_pem_public_key
            import base64
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º PEM –∫–ª—é—á
            pem_key = self.settings.VAPID_PUBLIC_KEY
            if not pem_key:
                return None
            
            # –ü–∞—Ä—Å–∏–º PEM –∫–ª—é—á
            public_key = load_pem_public_key(pem_key.encode('utf-8'))
            
            # –ü–æ–ª—É—á–∞–µ–º raw public key bytes –≤ —Ñ–æ—Ä–º–∞—Ç–µ uncompressed point
            raw_key = public_key.public_bytes(
                encoding=serialization.Encoding.X962,
                format=serialization.PublicFormat.UncompressedPoint
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64url (–±–µ–∑ padding)
            base64url_key = base64.urlsafe_b64encode(raw_key).decode('utf-8').rstrip('=')
            
            return base64url_key
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ VAPID –∫–ª—é—á–∞ –¥–ª—è Web Push: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
_push_notification_service = None

def get_push_notification_service() -> PushNotificationService:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)"""
    global _push_notification_service
    if _push_notification_service is None:
        _push_notification_service = PushNotificationService()
    return _push_notification_service

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
push_notification_service = get_push_notification_service() 