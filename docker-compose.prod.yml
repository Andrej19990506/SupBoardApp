version: '3.8'

services:
  bot:
    build: 
      context: ./telegramBot
      target: production
    environment:
      - API_URL=https://supboardapp.ru
      - ENVIRONMENT=production
      - PYTHONPATH=/app
      - BOT_PORT=8003
      - SCHEDULER_API_URL=http://scheduler:8002
    volumes:
      - shared-data:/app/shared
    env_file:
      - ./env.prod
    networks:
      - subboard-network
    command: python -u /app/telegramNinjaBot/main.py
    restart: unless-stopped
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  server:
    build:
      context: ./API server
      dockerfile: Dockerfile
      target: production
    expose:
      - 8000
    command: gunicorn main:app -b 0.0.0.0:8000 --workers 4 --timeout 120 -k uvicorn.workers.UvicornWorker
    environment:
      - API_BASE_URL=https://supboardapp.ru/api
      - BOT_URL=http://bot:8003
      - SCHEDULER_URL=http://scheduler:8002
      - WEBSOCKET_SERVER_URL=http://websocket:8001
      - SOCKET_URL=wss://supboardapp.ru
      - DOMAIN=supboardapp.ru
      - ALLOWED_ORIGINS=*
      - TRUST_PROXY=true
      - PORT=8000
      - HOST=0.0.0.0
      - ENVIRONMENT=production
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    env_file:
      - ./env.prod
    networks:
      - subboard-network
    restart: unless-stopped
    depends_on:
      bot:
        condition: service_started
      postgres:
        condition: service_healthy
      cache:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  scheduler:
    build:
      context: ./scheduler
      dockerfile: Dockerfile
      target: production
    environment:
      - API_URL=http://nginx:80
      - ENVIRONMENT=production
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=appsubboard
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BOT_API_URL=http://bot:8003
      - HEALTHCHECK_API_URL=https://supboardapp.ru/api/health
      - HEALTHCHECK_BOT_URL=https://supboardapp.ru/api/bot/health
      - HEALTHCHECK_BOT_SEND_MESSAGE_URL=http://bot:8003/send_message/health
    env_file:
      - ./env.prod
    networks:
      - subboard-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  websocket:
    command: gunicorn src.asgi:app -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8001 --workers 1
    environment:
      - ENVIRONMENT=production
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=appsubboard
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PORT=8001
      - HOST=0.0.0.0
      - PYTHONPATH=/app
    env_file:
      - ./env.prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - subboard-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf.prod.template:/etc/nginx/templates/nginx.conf.template:ro
      - ./nginx_logs:/var/log/nginx
    environment:
      - VITE_APP_API_URL=${VITE_APP_API_URL:-https://supboardapp.ru}
      - VITE_APP_WS_URL=${VITE_APP_WS_URL:-wss://supboardapp.ru}
      - ENV_TYPE=${ENV_TYPE:-production}
      - VITE_APP_DEBUG=${VITE_APP_DEBUG:-false}
      - WEBHOOK_PATH=${WEBHOOK_PATH:-/api/telegram/wh_k8s3j9aLp7qWzXyB}
      - NGINX_HOST=supboardapp.ru
      - NGINX_PORT=80
      - APPLICATION_SERVER_KEY=${APPLICATION_SERVER_KEY}
    env_file:
      - ./env.prod
    networks:
      - subboard-network
    command: /bin/sh -c "envsubst '\$${WEBHOOK_PATH} \$${NGINX_HOST} \$${NGINX_PORT}' < /etc/nginx/templates/nginx.conf.template > /etc/nginx/nginx.conf && sh /docker-entrypoint.d/50-generate-config-js.sh && nginx -g 'daemon off;'"
    depends_on:
      server:
        condition: service_started
      websocket:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M

  postgres:
    ports: []
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  cache:
    restart: unless-stopped
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

networks:
  subboard-network:
    driver: bridge 