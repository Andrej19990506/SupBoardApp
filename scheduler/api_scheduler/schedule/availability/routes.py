from fastapi import APIRouter, Request, Depends
import logging
import asyncio
from typing import Dict, Any
from core.config import scheduler_settings
from pydantic import BaseModel

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class AccessSettingsRequest(BaseModel):
    chat_id: str

# –í–∞–∂–Ω–æ! –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º —Ç—ç–≥–æ–≤
router = APIRouter(
    prefix="/availability",
    tags=["availability"]
)

@router.post("/access-settings")
async def apply_access_settings(
    request: AccessSettingsRequest,
    request_obj: Request
):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã"""
    chat_id = request.chat_id
    logger.info(f"üì¨ –ü—Ä–∏–Ω—è—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ /scheduler/availability/access-settings –¥–ª—è chat_id: {chat_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å scheduler –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    scheduler_instance = request_obj.app.state.scheduler_instance
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ asyncio.create_task
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ task_manager —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if hasattr(scheduler_instance, 'task_manager') and scheduler_instance.task_manager:
        logger.info(f"–ó–∞–ø—É—Å–∫ asyncio.create_task –¥–ª—è TaskManager.schedule_shift_access, chat_id: {chat_id}")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞–ø—Ä—è–º—É—é
        asyncio.create_task(scheduler_instance.task_manager.schedule_shift_access(chat_id))
        message = f"Access settings application started in background for chat_id: {chat_id}"
        status = "success"
    else:
        logger.error(f"TaskManager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ scheduler_instance –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è chat_id: {chat_id}")
        # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É 500?
        message = f"Failed to start background task: TaskManager not found for chat_id: {chat_id}"
        status = "error"
        # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 500
        # raise HTTPException(status_code=500, detail=message)

    logger.info(f"–û—Ç–≤–µ—á–∞–µ–º 200 OK, —Å—Ç–∞—Ç—É—Å: {status}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    return {
        "status": status,
        "message": message,
        "chat_id": chat_id
    }

# –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ Flask –∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
# availability_bp = Blueprint(...) –∏ —Ç.–¥. 