import logging
import os
import asyncio # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç asyncio
from contextlib import asynccontextmanager

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø --- 
# –ü–µ—Ä–µ–Ω–æ—Å–∏–º basicConfig –∫–∞–∫ –º–æ–∂–Ω–æ –≤—ã—à–µ
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
log_handler = logging.StreamHandler()
log_handler.setFormatter(log_formatter)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO, handlers=[log_handler])

# –ü–æ–ª—É—á–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã
logger = logging.getLogger("SchedulerServiceAPI")
logger.setLevel(logging.INFO) # –Ø–≤–Ω–æ —Å—Ç–∞–≤–∏–º —É—Ä–æ–≤–µ–Ω—å
# –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞ Scheduler
scheduler_logger = logging.getLogger("Scheduler")
scheduler_logger.setLevel(logging.INFO)
# ----------------------------- 

# --- –î–û–ë–ê–í–õ–ï–ù–ò–ï DEBUG –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø APSCHEDULER ---
apscheduler_logger = logging.getLogger("apscheduler")
apscheduler_logger.setLevel(logging.DEBUG)
# –î–æ–±–∞–≤–∏–º –ª–æ–≥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
logger.info("‚úÖ –õ–æ–≥–≥–µ—Ä 'apscheduler' –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å DEBUG (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫).") 
# -----------------------------------------------------

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ
env = os.getenv('ENVIRONMENT', 'development')
if env == 'development':
    logger.info("üöÄüöÄüöÄ –®–ï–î–£–õ–ï–† –ó–ê–ü–£–©–ï–ù –í –†–ï–ñ–ò–ú–ï –†–ê–ó–†–ê–ë–û–¢–ö–ò (DEV ENVIRONMENT) üöÄüöÄüöÄ")
elif env == 'production':
    logger.info("üî¥üî¥üî¥ –®–ï–î–£–õ–ï–† –ó–ê–ü–£–©–ï–ù –í –†–ï–ñ–ò–ú–ï –ü–†–û–î–ê–ö–®–ù (PRODUCTION ENVIRONMENT) üî¥üî¥üî¥")
    logger.info("üî¥ API_URL: %s", os.getenv('API_URL', '–Ω–µ —É–∫–∞–∑–∞–Ω'))
    logger.info("üî¥ POSTGRES_HOST: %s", os.getenv('POSTGRES_HOST', '–Ω–µ —É–∫–∞–∑–∞–Ω'))
else:
    logger.info(f"üöÄ –®–ï–î–£–õ–ï–† –ó–ê–ü–£–©–ï–ù –í –†–ï–ñ–ò–ú–ï: {env.upper()}")

try:
    import asyncpg
except ImportError:
    # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ asyncpg
    logger.critical("""    ‚ùå –û–®–ò–ë–ö–ê: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!
    –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:
    1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤—Ä—É—á–Ω—É—é –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:
       docker-compose exec scheduler pip install asyncpg
       docker-compose restart scheduler
    2. –ò–õ–ò –¥–æ–±–∞–≤—å—Ç–µ asyncpg –≤ Dockerfile:
       RUN pip install asyncpg
    3. –ò–õ–ò —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'asyncpg' –¥–æ–±–∞–≤–ª–µ–Ω –≤ requirements.txt
       –∏ –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:
       docker-compose build --no-cache scheduler
       docker-compose up -d scheduler    """)
    raise

from fastapi import FastAPI, HTTPException

# –ò–º–ø–æ—Ä—Ç—ã (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏)
from api_scheduler.schedule.routes import router as schedule_router
from api_scheduler.schedule.availability.routes import router as availability_router
from api_scheduler.schedule.notifications.routes import router as notification_router
from core.config import scheduler_settings
from scheduler import InventoryScheduler
from services.database_service import DatabaseService


@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –∑–∞–ø—É—Å–∫ —à–µ–¥—É–ª–µ—Ä–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –∏—Å–ø–æ–ª—å–∑—É—è DATABASE_URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    dsn = scheduler_settings.DATABASE_URL
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ö–µ–º—É –¥–ª—è asyncpg (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç postgresql+psycopg)
    if dsn.startswith('postgresql+psycopg://'):
        dsn = dsn.replace('postgresql+psycopg://', 'postgresql://')
    elif dsn.startswith('postgresql+psycopg2://'):
        dsn = dsn.replace('postgresql+psycopg2://', 'postgresql://')
    elif dsn.startswith('postgres+psycopg://'):
        dsn = dsn.replace('postgres+psycopg://', 'postgresql://')
    
    db_pool = None
    try:
        db_pool = await asyncpg.create_pool(
            dsn=dsn,
            min_size=2,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            max_size=10, # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            timeout=30.0 # –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DatabaseService
        db_service = DatabaseService(pool=db_pool)
        app.state.db_service = db_service
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        if not await db_service.check_tables_exist():
            logger.warning("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏.")
        # –ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        logger.info("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            import requests
            api_url = scheduler_settings.API_URL
            base_api_url = str(api_url).rstrip('/')
            health_check_url = f"{base_api_url}/health"
            response = requests.get(health_check_url, timeout=1)
            if response.status_code == 200:
                logger.info(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {health_check_url}")
            else:
                logger.warning(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä ({health_check_url}) –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
        except Exception as api_error:
            logger.warning(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä ({scheduler_settings.API_URL}) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {api_error}")
        
        # --- –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞ --- 
        logger.info("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞...")
        telegram_bot_available = False
        try:
            import requests
            bot_url = "http://bot:8003" 
            bot_response = requests.get(f"{bot_url}/health", timeout=1)
            if bot_response.status_code == 200:
                telegram_bot_available = True
                logger.info(f"‚úÖ Telegram –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {bot_url}")
                logger.info("üîå üöÄ üîå –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –≠–ù–î–ü–û–ò–ù–¢–ê –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ë–û–¢–ê... üîå üöÄ üîå")
                try:
                    bot_send_message_health_url = f"{bot_url}/send_message/health"
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL: {bot_send_message_health_url}")
                    
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç
                    send_message_response = requests.get(bot_send_message_health_url, timeout=2)
                    if send_message_response.status_code == 200:
                        logger.info(f"‚úÖ ‚úÖ ‚úÖ –≠–ù–î–ü–û–ò–ù–¢ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ë–û–¢–ê –î–û–°–¢–£–ü–ï–ù: {bot_send_message_health_url}")
                        
                        # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
                        os.environ["HEALTHCHECK_BOT_SEND_MESSAGE_URL"] = bot_send_message_health_url
                        
                        if hasattr(scheduler_settings, 'HEALTHCHECK_BOT_SEND_MESSAGE_URL'):
                            scheduler_settings.HEALTHCHECK_BOT_SEND_MESSAGE_URL = bot_send_message_health_url
                        else:
                            setattr(scheduler_settings, 'HEALTHCHECK_BOT_SEND_MESSAGE_URL', bot_send_message_health_url)
                            logger.info(f"‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∞—Ç—Ä–∏–±—É—Ç HEALTHCHECK_BOT_SEND_MESSAGE_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º: {bot_send_message_health_url}")
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
                        if hasattr(scheduler_settings, 'HEALTHCHECK_BOT_SEND_MESSAGE_URL'):
                            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: HEALTHCHECK_BOT_SEND_MESSAGE_URL = {scheduler_settings.HEALTHCHECK_BOT_SEND_MESSAGE_URL}")
                        else:
                            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç HEALTHCHECK_BOT_SEND_MESSAGE_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    else:
                        logger.warning(f"‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è –≠–ù–î–ü–û–ò–ù–¢ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ë–û–¢–ê –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {send_message_response.status_code}: {bot_send_message_health_url}")
                except Exception as send_message_error:
                    logger.warning(f"‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è –≠–ù–î–ü–û–ò–ù–¢ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ë–û–¢–ê –ù–ï–î–û–°–¢–£–ü–ï–ù: {send_message_error}")
            else:
                logger.warning(f"‚ö†Ô∏è Telegram –±–æ—Ç –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {bot_response.status_code}: {bot_url}")
        except Exception as bot_api_error:
            logger.warning(f"‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {bot_api_error}")
        # -----------------------------------------------------
        
        scheduler_instance = InventoryScheduler(settings=scheduler_settings, db_service=db_service)
        app.state.scheduler_instance = scheduler_instance
        
        try:
            scheduler_instance.start()
            logger.info("‚úÖ –®–µ–¥—É–ª–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
            asyncio.create_task(scheduler_instance.reload_scheduled_tasks())
            logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ, —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∑–∞–ø—É—Å–∫")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...")
            try:
                await scheduler_instance.task_manager.schedule_booking_status_automation()
                logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
            except Exception as automation_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {automation_error}")
            
            yield
        except Exception as e:
            logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–µ–¥—É–ª–µ—Ä–∞: {e}")
            # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã FastAPI –ø–æ–Ω—è–ª, —á—Ç–æ –∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–µ–¥—É–ª–µ—Ä–∞: {str(e)}")
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã FastAPI –ø–æ–Ω—è–ª, —á—Ç–æ –∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–µ–¥—É–ª–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω
        if hasattr(app.state, 'scheduler_instance') and app.state.scheduler_instance and app.state.scheduler_instance.is_running():
            logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–µ–¥—É–ª–µ—Ä–∞...")
            app.state.scheduler_instance.stop()
            logger.info("‚úÖ –®–µ–¥—É–ª–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if db_pool:
            logger.info("üîç –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            await db_pool.close()
            logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç.")

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å lifespan
app = FastAPI(
    title="Scheduler Service API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —à–µ–¥—É–ª–µ—Ä–∞ (FastAPI).",
    version="1.0.0",
    lifespan=lifespan
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(schedule_router, prefix="/scheduler")
app.include_router(availability_router, prefix="/scheduler")
app.include_router(notification_router, prefix="/scheduler/notifications", tags=["Notifications"])
