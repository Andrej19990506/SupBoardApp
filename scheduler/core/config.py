import os
from pydantic_settings import BaseSettings
from pathlib import Path
from dotenv import load_dotenv
from pydantic import Field, PostgresDsn, validator, AnyUrl
from typing import Optional, Any, Dict, List
import logging
import datetime
from zoneinfo import ZoneInfo

# –ò—â–µ–º .env —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ scheduler/ –∏–ª–∏ –≤—ã—à–µ
env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)

class SchedulerSettings(BaseSettings):
    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
    POSTGRES_HOST: str = Field(..., validation_alias='POSTGRES_HOST')
    POSTGRES_PORT: int = Field(5432, validation_alias='POSTGRES_PORT')
    POSTGRES_DB: str = Field(..., validation_alias='POSTGRES_DB')
    POSTGRES_USER: str = Field(..., validation_alias='POSTGRES_USER')
    POSTGRES_PASSWORD: str = Field(..., validation_alias='POSTGRES_PASSWORD')

    # –°–æ–±–∏—Ä–∞–µ–º URL –¥–ª—è psycopg (–¥–ª—è NOTIFY) –∏ APScheduler
    # APScheduler —Ç–æ–∂–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç URL
    DATABASE_URL: Optional[str] = None

    # --- URL –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ---
    API_URL: AnyUrl = Field(..., validation_alias='API_URL')
    BOT_URL: str = os.getenv("BOT_URL", "http://bot:8000")

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
    TIMEZONE: str = Field("Asia/Krasnoyarsk", validation_alias='TIMEZONE')

    # <<< –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis/Dragonfly >>>
    REDIS_HOST: str = Field("cache", validation_alias='REDIS_HOST') # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ docker-compose
    REDIS_PORT: int = Field(6379, validation_alias='REDIS_PORT')
    REDIS_DB_SCHEDULER: int = Field(0, validation_alias='REDIS_DB_SCHEDULER') # –ë–î –¥–ª—è –∑–∞–¥–∞—á APScheduler
    REDIS_PASSWORD: Optional[str] = Field(None, validation_alias='REDIS_PASSWORD') # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å
    # <<< –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø >>>

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç–∞ (–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
    BOT_API_URL: AnyUrl = Field(..., validation_alias='BOT_API_URL')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    HEALTHCHECK_API_URL: AnyUrl = Field(..., validation_alias='HEALTHCHECK_API_URL')
    HEALTHCHECK_BOT_URL: AnyUrl = Field(..., validation_alias='HEALTHCHECK_BOT_URL')
    HEALTHCHECK_BOT_SEND_MESSAGE_URL: Optional[AnyUrl] = Field(None, validation_alias='HEALTHCHECK_BOT_SEND_MESSAGE_URL')
    HEALTHCHECK_INTERVAL_SECONDS: int = Field(default=60, env='HEALTHCHECK_INTERVAL_SECONDS')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Å–æ–∫–µ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    WEBSOCKET_URL: str = Field(default='ws://websocket:8002/ws', env='WEBSOCKET_URL')
    WEBSOCKET_CHANNEL: str = Field(default='websocket_channel', env='WEBSOCKET_CHANNEL')

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
    LOG_LEVEL: str = Field("INFO", validation_alias='LOG_LEVEL')

    @validator("DATABASE_URL", pre=True, always=True)
    def assemble_db_connection(cls, v: Optional[str], values: Dict[str, Any]) -> str:
        if isinstance(v, str):
            return v
        dsn = PostgresDsn.build(
            scheme="postgresql+psycopg",
            username=values.get("POSTGRES_USER"),
            password=values.get("POSTGRES_PASSWORD"),
            host=values.get("POSTGRES_HOST"),
            port=values.get("POSTGRES_PORT"),
            path=f"/{values.get('POSTGRES_DB') or ''}",
        )
        return str(dsn)

    @validator("API_URL", "BOT_API_URL", "HEALTHCHECK_API_URL", "HEALTHCHECK_BOT_URL", "HEALTHCHECK_BOT_SEND_MESSAGE_URL", pre=True)
    def url_to_string(cls, v: Any) -> str:
        if isinstance(v, AnyUrl):
            return str(v)
        return v

    class Config:
        case_sensitive = True
        # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å .env —Ñ–∞–π–ª —è–≤–Ω–æ, –µ—Å–ª–∏ –æ–Ω –≤—Å–µ–≥–¥–∞ –ª–µ–∂–∏—Ç –≤ –ø–∞–ø–∫–µ scheduler
        # env_file = ".env"
        # env_file_encoding = 'utf-8'
        env_file = ('.env.prod', '.env.dev', '.env') 
        env_file_encoding = 'utf-8'
        extra = 'ignore' # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ env

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö scheduler
scheduler_settings = SchedulerSettings()

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
logger = logging.getLogger(__name__)
logger.info("="*80)
logger.info("üïêüïêüïê –ß–ê–°–û–í–û–ô –ü–û–Ø–° –®–ï–î–£–õ–ï–†–ê: {} üïêüïêüïê".format(scheduler_settings.TIMEZONE))
local_time = datetime.datetime.now(ZoneInfo(scheduler_settings.TIMEZONE))
logger.info("üïêüïêüïê –¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø –í –ö–†–ê–°–ù–û–Ø–†–°–ö–ï: {} üïêüïêüïê".format(local_time.strftime("%Y-%m-%d %H:%M:%S %Z (UTC%z)")))
logger.info("="*80)

# --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ --- #
# import logging.config
# logging_config = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'standard': {
#             'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#         },
#     },
#     'handlers': {
#         'console': {
#             'level': scheduler_settings.LOG_LEVEL,
#             'formatter': 'standard',
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         '': { # root logger
#             'handlers': ['console'],
#             'level': scheduler_settings.LOG_LEVEL,
#             'propagate': True
#         },
#         # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
#         'apscheduler': {
#             'handlers': ['console'],
#             'level': 'WARNING', # –£–º–µ–Ω—å—à–∏—Ç—å —à—É–º –æ—Ç APScheduler
#             'propagate': False
#         },
#     }
# }
# logging.config.dictConfig(logging_config)