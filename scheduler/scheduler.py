from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
import logging
import asyncio 
from tasks.task_manager import TaskManager
from core.config import scheduler_settings as default_settings 
from services.database_service import DatabaseService
import traceback

logger = logging.getLogger('Scheduler')

class InventoryScheduler:
    def __init__(self, settings=None, db_service=None): 
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.settings = settings or default_settings 
        

        self.db_service = db_service
        
 
        self.timezone = pytz.timezone(self.settings.TIMEZONE)
        

        try:
            import redis
        except ImportError:
            raise

        jobstores = {
            'default': { 'type': 'redis',
                         'host': self.settings.REDIS_HOST,
                         'port': self.settings.REDIS_PORT,
                         'db': self.settings.REDIS_DB_SCHEDULER,
                         'password': self.settings.REDIS_PASSWORD
                       }
        }

        job_defaults = {
            'coalesce': False,
            'max_instances': 3
        }
        self.scheduler = AsyncIOScheduler(
            jobstores=jobstores,
            job_defaults=job_defaults,
            timezone=self.timezone,
        )
        redis_host = self.settings.REDIS_HOST
        redis_port = self.settings.REDIS_PORT
        redis_db = self.settings.REDIS_DB_SCHEDULER
        logger.info(f"üíæ APScheduler –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å RedisJobStore (DragonflyDB) -> {redis_host}:{redis_port}, DB: {redis_db}")
        
        self._is_running = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á, –ø–µ—Ä–µ–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–µ—Ä–≤–∏—Å –ë–î
        self.task_manager = TaskManager(self.scheduler, self.settings, self.db_service) 

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if not self._is_running:

                try:
                    loop = asyncio.get_running_loop()
                    self.scheduler.configure(event_loop=loop)
                    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π event loop: {loop}")
                except RuntimeError:

                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π event loop –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")

                
                self.scheduler.start() # AsyncIOScheduler.start() –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π
                self._is_running = True
                
                # –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –º–µ—Ç–æ–¥–∞ start()
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ app.py
                logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}")
            logger.error(traceback.format_exc()) # –î–æ–±–∞–≤–∏–º —Ç—Ä–µ–π—Å–±–µ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏
            raise

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self._is_running:
            self.scheduler.shutdown()
            self._is_running = False
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def is_running(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        return self._is_running

    # –ú–µ–Ω—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –Ω–∞ async def
    async def reload_scheduled_tasks(self): 
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")

 
            if not self.db_service:
                logger.error("–°–µ—Ä–≤–∏—Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏")
                return False


            result = await self.task_manager.reload_tasks() 
            
            logger.info(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
            return result
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á: {e}")
            return False


    async def apply_access_settings(self, chat_id):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —á–∞—Ç–∞ - –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –≤ task_manager.
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ apply_access_settings –¥–ª—è chat_id: {chat_id}")
        try:
            if hasattr(self, 'task_manager') and self.task_manager:
                result = await self.task_manager.schedule_shift_access(chat_id) 
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π schedule_shift_access –¥–ª—è chat_id: {chat_id}")
                return result
            else:
                logger.error("TaskManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                return False
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –≤—ã–∑–æ–≤–µ apply_access_settings –¥–ª—è chat_id {chat_id}: {e}")
            return False

