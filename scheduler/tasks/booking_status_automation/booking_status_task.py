#!/usr/bin/env python3
"""
–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
"""

import asyncio
import httpx
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Any, Optional
import logging
import traceback

logger = logging.getLogger(__name__)

from ..base_task import BaseTask


class BookingStatusAutomationTask(BaseTask):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:
    1. BOOKED ‚Üí PENDING_CONFIRMATION (–∑–∞ 60 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞)
    2. –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ NO_SHOW –ø—Ä–∏ –æ–ø–æ–∑–¥–∞–Ω–∏–∏
    """
    
    def __init__(self, scheduler_instance=None, task_manager=None, settings=None):
        super().__init__(scheduler_instance, task_manager, settings)
        self.api_base_url = "http://server:8000/api/v1"
        self.task_name = "booking_status_automation"
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (booking_id -> set of sent notification types)
        self.sent_notifications = {}
        
    async def execute(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.
        –†–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API.
        """
        from zoneinfo import ZoneInfo
        
        current_time = datetime.now(timezone.utc)
        krasnoyarsk_time = current_time.astimezone(ZoneInfo("Asia/Krasnoyarsk"))
        
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...")
        logger.info(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M:%S')} UTC / {krasnoyarsk_time.strftime('%H:%M:%S')} –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫")
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            bookings = await self._get_active_bookings()
            if not bookings:
                logger.info("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(bookings)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            updated_count = 0
            notifications_sent = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            for booking in bookings:
                try:
                    booking_id = booking.get('id')
                    client_name = booking.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
                    status = booking.get('status')
                    planned_start = booking.get('planned_start_time')
                    
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id}: {client_name}, —Å—Ç–∞—Ç—É—Å: {status}, –Ω–∞—á–∞–ª–æ: {planned_start}")
                    
                    result = await self._process_booking(booking)
                    if result and result.get('updated'):
                        updated_count += 1
                        logger.info(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    if result and result.get('notification_sent'):
                        notifications_sent += 1
                        logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{booking_id}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking.get('id', 'N/A')}: {e}")
                    continue
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            logger.error(traceback.format_exc())
            raise
    
    async def _get_active_bookings(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏: booked, pending_confirmation, confirmed, in_use
            statuses = ["booked", "pending_confirmation", "confirmed", "in_use"]
            url = f"{self.api_base_url}/bookings/"  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ
            
            params = {
                "status": ",".join(statuses)
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, params=params, timeout=30)
                response.raise_for_status()
                
                bookings = response.json()
                logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(bookings)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–∑ API")
                return bookings
                
        except httpx.HTTPError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return []
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return []
    
    async def _process_booking(self, booking: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        booking_id = booking.get('id')
        status = booking.get('status')
        planned_start = booking.get('planned_start_time')
        client_name = booking.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        
        if not planned_start:
            return {"updated": False, "notification_sent": False}
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        start_time = datetime.fromisoformat(planned_start.replace('Z', '+00:00'))
        now = datetime.now().astimezone()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        if start_time.tzinfo is None:
            start_time = start_time.replace(tzinfo=now.tzinfo)
        
        time_until_start = start_time - now
        minutes_until_start = time_until_start.total_seconds() / 60
        
        logger.info(f"üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id}: {status}, –Ω–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ {minutes_until_start:.1f} –º–∏–Ω")
        
        updated = False
        notification_sent = False
        
        # 1. BOOKED ‚Üí PENDING_CONFIRMATION (–∑–∞ 60 –º–∏–Ω—É—Ç)
        if status == "booked" and 0 <= minutes_until_start <= 60:
            await self._transition_to_pending_confirmation(booking)
            updated = True
            notification_sent = True
        
        # 2. PENDING_CONFIRMATION ‚Üí NO_SHOW (—á–µ—Ä–µ–∑ 120 –º–∏–Ω—É—Ç –æ–ø–æ–∑–¥–∞–Ω–∏—è)
        elif status == "pending_confirmation" and minutes_until_start < -120:
            await self._transition_to_no_show(booking, "pending_confirmation")
            updated = True
        
        # 3. BOOKED/CONFIRMED ‚Üí NO_SHOW (—á–µ—Ä–µ–∑ 90 –º–∏–Ω—É—Ç –æ–ø–æ–∑–¥–∞–Ω–∏—è)
        elif status in ["booked", "confirmed"] and minutes_until_start < -90:
            await self._transition_to_no_show(booking, status)
            updated = True
        
        # 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–∫–ª–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ –ø—Ä–∏–¥–µ—Ç" (–∑–∞ 15 –º–∏–Ω—É—Ç)
        elif status == "confirmed" and 10 <= minutes_until_start <= 20:
            if not self._was_notification_sent(booking_id, "client_arriving_soon"):
                await self._send_arriving_soon_notification(booking)
                self._mark_notification_sent(booking_id, "client_arriving_soon")
                notification_sent = True
        
        # 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–∫–ª–∏–µ–Ω—Ç –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç" (–æ—Ç 1 –¥–æ 15 –º–∏–Ω—É—Ç –æ–ø–æ–∑–¥–∞–Ω–∏—è)
        elif status in ["confirmed", "pending_confirmation"] and -15 <= minutes_until_start <= -1:
            if not self._was_notification_sent(booking_id, "client_overdue"):
                await self._send_overdue_notification(booking)
                self._mark_notification_sent(booking_id, "client_overdue")
                notification_sent = True
        
        # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ IN_USE (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞)
        elif status == "in_use":
            return await self._process_in_use_booking(booking)
        
        return {
            "updated": updated,
            "notification_sent": notification_sent
        }
    
    async def _transition_to_pending_confirmation(self, booking: Dict[str, Any]):
        """–ü–µ—Ä–µ—Ö–æ–¥ BOOKED ‚Üí PENDING_CONFIRMATION"""
        booking_id = booking.get('id')
        client_name = booking.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            async with httpx.AsyncClient() as client:
                response = await client.patch(
                    f"{self.api_base_url}/bookings/{booking_id}",
                    json={"status": "pending_confirmation"}
                )
                response.raise_for_status()
            
            logger.info(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ PENDING_CONFIRMATION")
            
            # –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
            self._clear_notification_tracking(booking_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self._send_push_notification(
                booking_id=booking_id,
                client_name=client_name,
                notification_type="pending_confirmation"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ PENDING_CONFIRMATION –¥–ª—è {booking_id}: {e}")
            raise
    
    async def _transition_to_no_show(self, booking: Dict[str, Any], from_status: str):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ NO_SHOW –ø—Ä–∏ –æ–ø–æ–∑–¥–∞–Ω–∏–∏"""
        booking_id = booking.get('id')
        client_name = booking.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            async with httpx.AsyncClient() as client:
                response = await client.patch(
                    f"{self.api_base_url}/bookings/{booking_id}",
                    json={"status": "no_show"}
                )
                response.raise_for_status()
            
            logger.info(f"‚ö†Ô∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ NO_SHOW (–∏–∑ {from_status})")
            
            # –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
            self._clear_notification_tracking(booking_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ NO_SHOW –¥–ª—è {booking_id}: {e}")
            raise
    
    async def _send_arriving_soon_notification(self, booking: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '–∫–ª–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ –ø—Ä–∏–¥–µ—Ç'"""
        booking_id = booking.get('id')
        client_name = booking.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        
        try:
            await self._send_push_notification(
                booking_id=booking_id,
                client_name=client_name,
                notification_type="client_arriving_soon"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 'arriving_soon' –¥–ª—è {booking_id}: {e}")
    
    async def _send_overdue_notification(self, booking: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '–∫–ª–∏–µ–Ω—Ç –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç'"""
        booking_id = booking.get('id')
        client_name = booking.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        planned_start = booking.get('planned_start_time')
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–ø–æ–∑–¥–∞–Ω–∏—è
        minutes_overdue = 0
        if planned_start:
            start_time = datetime.fromisoformat(planned_start.replace('Z', '+00:00'))
            now = datetime.now().astimezone()
            if start_time.tzinfo is None:
                start_time = start_time.replace(tzinfo=now.tzinfo)
            time_until_start = start_time - now
            minutes_overdue = abs(int(time_until_start.total_seconds() / 60))
        
        try:
            await self._send_push_notification(
                booking_id=booking_id,
                client_name=client_name,
                notification_type="client_overdue",
                additional_data={"minutes_overdue": minutes_overdue}
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 'overdue' –¥–ª—è {booking_id}: {e}")

    async def _process_in_use_booking(self, booking: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ IN_USE (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞)"""
        booking_id = booking.get('id')
        client_name = booking.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        actual_start = booking.get('actual_start_time')
        duration_hours = booking.get('duration_in_hours', 4)
        
        if not actual_start:
            logger.warning(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –≤ —Å—Ç–∞—Ç—É—Å–µ IN_USE, –Ω–æ –Ω–µ—Ç actual_start_time")
            return {"updated": False, "notification_sent": False}
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞
        start_time = datetime.fromisoformat(actual_start.replace('Z', '+00:00'))
        now = datetime.now().astimezone()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        if start_time.tzinfo is None:
            start_time = start_time.replace(tzinfo=now.tzinfo)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        return_time = start_time + timedelta(hours=duration_hours)
        time_until_return = return_time - now
        minutes_until_return = time_until_return.total_seconds() / 60
        
        logger.info(f"üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id}: IN_USE, –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ {minutes_until_return:.1f} –º–∏–Ω")
        
        notification_sent = False
        
        # 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞" (–∑–∞ 10-15 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è)
        if 10 <= minutes_until_return <= 15:
            if not self._was_notification_sent(booking_id, "return_time"):
                await self._send_return_time_notification(booking)
                self._mark_notification_sent(booking_id, "return_time")
                notification_sent = True
        
        # 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–ø—Ä–æ—Å—Ä–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞" (–æ—Ç 5 –¥–æ 60 –º–∏–Ω—É—Ç –ø—Ä–æ—Å—Ä–æ—á–∫–∏)
        elif -60 <= minutes_until_return <= -5:
            if not self._was_notification_sent(booking_id, "return_overdue"):
                await self._send_return_overdue_notification(booking, abs(int(minutes_until_return)))
                self._mark_notification_sent(booking_id, "return_overdue")
                notification_sent = True
        
        return {
            "updated": False,  # –°—Ç–∞—Ç—É—Å –Ω–µ –º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            "notification_sent": notification_sent
        }

    async def _send_return_time_notification(self, booking: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '–≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞'"""
        booking_id = booking.get('id')
        client_name = booking.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        
        try:
            await self._send_push_notification(
                booking_id=booking_id,
                client_name=client_name,
                notification_type="return_time"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 'return_time' –¥–ª—è {booking_id}: {e}")

    async def _send_return_overdue_notification(self, booking: Dict[str, Any], minutes_overdue: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '–ø—Ä–æ—Å—Ä–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞'"""
        booking_id = booking.get('id')
        client_name = booking.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        
        try:
            await self._send_push_notification(
                booking_id=booking_id,
                client_name=client_name,
                notification_type="return_overdue",
                additional_data={"minutes_overdue": minutes_overdue}
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 'return_overdue' –¥–ª—è {booking_id}: {e}")
    
    def _was_notification_sent(self, booking_id: int, notification_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return booking_id in self.sent_notifications and notification_type in self.sent_notifications[booking_id]
    
    def _mark_notification_sent(self, booking_id: int, notification_type: str):
        """–û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        if booking_id not in self.sent_notifications:
            self.sent_notifications[booking_id] = set()
        self.sent_notifications[booking_id].add(notification_type)
        logger.debug(f"üîñ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_type} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}")
    
    def _clear_notification_tracking(self, booking_id: int):
        """–û—á–∏—â–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è)"""
        if booking_id in self.sent_notifications:
            del self.sent_notifications[booking_id]
            logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}")

    async def _send_push_notification(self, booking_id: int, client_name: str, notification_type: str, additional_data: Optional[Dict[str, Any]] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.api_base_url}/push-notifications/send-booking-notification",
                    json={
                        "booking_id": booking_id,
                        "client_name": client_name,
                        "notification_type": notification_type,
                        "additional_data": additional_data
                    },
                    headers={"Content-Type": "application/json"}
                )
                response.raise_for_status()
                logger.info(f"üì§ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_type} –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id} (–∫–ª–∏–µ–Ω—Ç: {client_name})")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_type} –¥–ª—è {booking_id}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
    
    def get_schedule_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        return {
            "task_name": self.task_name,
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "schedule": "–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É",
            "cron": "* * * * *",  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            "enabled": True,
            "timeout": 60  # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        }

    async def schedule(self, *args, **kwargs):
        """
        –ú–µ—Ç–æ–¥ schedule –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏, 
        —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron –≤ TaskManager
        """
        logger.info("BookingStatusAutomationTask –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        return True


# –§—É–Ω–∫—Ü–∏—è-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è APScheduler
async def execute_automation(**kwargs):
    """
    –§—É–Ω–∫—Ü–∏—è-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è APScheduler –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.
    
    Args:
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç APScheduler (–Ω–∞–ø—Ä–∏–º–µ—Ä, task_type)
    """
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–¥–∞—á–∏ —Å None –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã)
        task = BookingStatusAutomationTask(
            scheduler_instance=None, 
            task_manager=None, 
            settings=None
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        await task.execute()
        
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
        logger.error(traceback.format_exc()) 