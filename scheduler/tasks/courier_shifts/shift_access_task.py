import logging
import requests
import httpx
import psycopg # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç psycopg
# from psycopg2.extras import RealDictCursor # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç psycopg2
from datetime import datetime, timedelta, time, date, timezone
import traceback
import os
import json # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç json
from ..base_task import BaseTask
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º
from core.config import scheduler_settings
from zoneinfo import ZoneInfo # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ZoneInfo
from typing import Optional, Dict, Any, TYPE_CHECKING
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º httpx –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import httpx
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DatabaseService –∏ SchedulerSettings –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
from services.database_service import DatabaseService 
from core.config import SchedulerSettings

if TYPE_CHECKING:
    from tasks.task_manager import TaskManager 

logger = logging.getLogger(__name__)



# --- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è APScheduler --- 
async def execute_job(chat_id: str, db_service: DatabaseService, settings: SchedulerSettings, task_manager: 'TaskManager', task_type: str = None, scheduler_instance = None):
    """–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±–µ—Ä—Ç–∫–∞, –≤—ã–∑—ã–≤–∞–µ–º–∞—è APScheduler.
       –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    logger.info(f"[ShiftAccessTask.execute_job] –ó–∞–ø—É—Å–∫ –¥–ª—è chat_id: {chat_id} (—Ç–∏–ø: {task_type})")
    task_success = False
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¢–û–õ–¨–ö–û —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        task_instance = ShiftAccessTask(scheduler_instance=None, task_manager=None, settings=settings)
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ chat_id –∏ settings
        await task_instance.execute(chat_id, settings) 
        task_success = True # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ execute –Ω–µ —É–ø–∞–ª
    except Exception as e:
        logger.error(f"[ShiftAccessTask.execute_job] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–ª—è chat_id {chat_id}: {e}")
        logger.error(traceback.format_exc())
        task_success = False
        
    # --- –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ --- 
    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Å–ø–µ—Ö–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    logger.info(f"[ShiftAccessTask.execute_job] –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è chat_id: {chat_id}")
    try:
        if task_manager and hasattr(task_manager, 'schedule_shift_access'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º await, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await task_manager.schedule_shift_access(chat_id) 
            logger.info(f"[ShiftAccessTask.execute_job] –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {chat_id} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ.")
        else:
            logger.error(f"[ShiftAccessTask.execute_job] TaskManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è {chat_id}.")
    except Exception as reschedule_err:
        logger.error(f"[ShiftAccessTask.execute_job] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è {chat_id}: {reschedule_err}")
        logger.error(traceback.format_exc())
    # ------------------------
# --------------------------------------------------

class ShiftAccessTask(BaseTask):
    TASK_TYPE = 'courier_shift_access' # –¢–∏–ø –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º

    def __init__(self, scheduler_instance, task_manager, settings):
        """
        –ó–∞–¥–∞—á–∞ –¥–ª—è –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í –¢–ï–õ–ï–ì–†–ê–ú –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–º–µ–Ω–∞–º –∫—É—Ä—å–µ—Ä–æ–≤.
        """
        super().__init__(scheduler_instance, task_manager, settings)
        logger.info(f"ShiftAccessTask –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. API URL: {self.settings.API_URL}. Telegram Bot API URL: {getattr(self.settings, 'BOT_API_URL', '–ù–µ –∑–∞–¥–∞–Ω')}")
    async def _get_access_settings_from_api(self, chat_id, settings: scheduler_settings):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —á–∞—Ç–∞ –∏–∑ API —Å–µ—Ä–≤–µ—Ä–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)."""
        try:
            chat_id_param = str(chat_id)
            base_api_url = str(settings.API_URL).rstrip('/')
            url = f"{base_api_url}/api/v1/groups/{chat_id_param}/settings"
            logger.info(f"({self.TASK_TYPE}) –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞ (async): {url}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=10)
                response.raise_for_status() 
                settings_data = response.json()
                logger.info(f"({self.TASK_TYPE}) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ API (async): {settings_data}")
                return settings_data
        except httpx.HTTPStatusError as e:
             # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 404 –æ—Ç–¥–µ–ª—å–Ω–æ
            if e.response.status_code == 404:
                logger.warning(f"({self.TASK_TYPE}) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (404) –≤ API. –ó–∞–¥–∞—á–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
                return None
            else:
                 logger.error(f"({self.TASK_TYPE}) ‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {chat_id}: {e}")
                 return None 
        except httpx.RequestError as e:
            logger.error(f"({self.TASK_TYPE}) ‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {chat_id}: {e}")
            return None 
        except Exception as e:
            logger.error(f"({self.TASK_TYPE}) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {chat_id}: {e}")
            return None

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ schedule
    async def schedule(self, chat_id):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        try:
            chat_id_str = str(chat_id)
            logger.info(f"=== ({self.TASK_TYPE}) –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —á–∞—Ç–∞ {chat_id_str} (async) ===")

            access_settings = await self._get_access_settings_from_api(chat_id_str, self.settings)
            if not access_settings:
                logger.error(f"({self.TASK_TYPE}) ‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API –¥–ª—è {chat_id_str}. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ (async).")
                task_id = self.generate_task_id(self.TASK_TYPE, chat_id_str)
                try: self.scheduler.remove_job(task_id)
                except Exception: pass
                return False

            registration_day = access_settings.get("registrationStartDay")
            registration_hour = access_settings.get("registrationStartHour")
            registration_minute = access_settings.get("registrationStartMinute")
            period_length = access_settings.get("periodLength", 7) # –î–µ—Ñ–æ–ª—Ç 7 –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

            if registration_day is None or registration_hour is None or registration_minute is None:
                 logger.error(f"({self.TASK_TYPE}) ‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {chat_id_str}: {access_settings}")
                 return False

            python_weekday = (int(registration_day) - 1 + 7) % 7
            now = datetime.now(ZoneInfo(self.settings.TIMEZONE))
            
            next_registration = self._calculate_next_registration_time(
                now, python_weekday, int(registration_hour), int(registration_minute), period_length, self.settings
            )
            
            if not next_registration:
                 logger.error(f"({self.TASK_TYPE}) ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {chat_id_str}")
                 return False
                 
            logger.info(f"({self.TASK_TYPE}) üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Ç–µ–ª–µ–≥—Ä–∞–º-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {next_registration}")
            
            task_id = self.generate_task_id(self.TASK_TYPE, chat_id_str)
            task_data = {'comment': f'Telegram notification for {chat_id_str}'}
            save_result = await self.task_manager.save_task(task_id, chat_id_str, self.TASK_TYPE, next_registration, task_data)
            
            if not save_result:
                 logger.error(f"({self.TASK_TYPE}) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id} —á–µ—Ä–µ–∑ TaskManager")
                 return False
                 
            logger.info(f"({self.TASK_TYPE}) ‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ TaskManager –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {next_registration} (async)")
            return True

        except Exception as e:
            logger.error(f"({self.TASK_TYPE}) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ (async): {e}")
            logger.error(traceback.format_exc())
            return False

    def _calculate_next_registration_time(self, now: datetime, target_weekday: int, hour: int, minute: int, period_length: int, settings: scheduler_settings) -> Optional[datetime]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞, –£–ß–ò–¢–´–í–ê–Ø periodLength."""
        try:
            if not settings.TIMEZONE:
                logger.error(f"({self.TASK_TYPE}) ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TIMEZONE.")
                return None
            try:
                tz = ZoneInfo(settings.TIMEZONE)
            except Exception as tz_err:
                logger.error(f"({self.TASK_TYPE}) ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TIMEZONE '{settings.TIMEZONE}': {tz_err}")
                return None

            if now.tzinfo is None:
                 logger.warning(f"({self.TASK_TYPE}) ‚ö†Ô∏è –ü–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ 'now' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å tz.")
                 now = datetime.now(tz)
            else:
                now = now.astimezone(tz)

            # 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ë–õ–ò–ñ–ê–ô–®–ï–ï –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ)
            days_ahead = (target_weekday - now.weekday() + 7) % 7
            next_potential_date = (now + timedelta(days=days_ahead)).date()
            immediate_next_dt_naive = datetime.combine(next_potential_date, time(hour=hour, minute=minute))
            immediate_next_dt_aware = immediate_next_dt_naive.replace(tzinfo=tz)


            if days_ahead == 0 and now < immediate_next_dt_aware:
                logger.info(f"({self.TASK_TYPE}) –†–∞—Å—á–µ—Ç: –ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ({immediate_next_dt_aware}) –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ —Å–µ–≥–æ–¥–Ω—è. –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –Ω–µ–≥–æ.")
                return immediate_next_dt_aware
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å, –Ω–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ –ò–õ–ò –Ω–∞—Å—Ç—É–ø–∏–ª–æ
            elif days_ahead == 0 and now >= immediate_next_dt_aware:
                 # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—á–µ—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª (—á–µ—Ä–µ–∑ period_length)
                 logger.info(f"({self.TASK_TYPE}) –†–∞—Å—á–µ—Ç: –ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ({immediate_next_dt_aware}) —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª.")
                 pass # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –Ω–µ —Å–µ–≥–æ–¥–Ω—è (days_ahead > 0)
            else:
                logger.info(f"({self.TASK_TYPE}) –†–∞—Å—á–µ—Ç: –ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ({immediate_next_dt_aware}) –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ {days_ahead} –¥–Ω–µ–π. –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –Ω–µ–≥–æ.")
                return immediate_next_dt_aware
            
            # 3. –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –°–ï–ì–û–î–ù–Ø —É–∂–µ –ø—Ä–æ—à–ª–æ.
            #    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ period_length.
            
            # 3.1 –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –ü–û–°–õ–ï–î–ù–ï–ì–û –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –¥–Ω—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (target_weekday)
            #    (—Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç–æ—á–Ω–æ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)
            last_target_date = now.date()
            last_target_dt_naive = datetime.combine(last_target_date, time(hour=hour, minute=minute))
            last_target_dt_aware = last_target_dt_naive.replace(tzinfo=tz)
            # –≠—Ç–∞ –¥–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –±–∞–∑–∞ –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ period_length

            # 3.2 –î–æ–±–∞–≤–ª—è–µ–º period_length –∫ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            base_date_for_next = last_target_dt_aware + timedelta(days=max(1, period_length) -1)
            
            # 3.3 –ù–∞—Ö–æ–¥–∏–º –°–õ–ï–î–£–Æ–©–ò–ô –¥–µ–Ω—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ü–û–°–õ–ï base_date_for_next
            days_until_next_target_day = (target_weekday - base_date_for_next.weekday() + 7) % 7
            if days_until_next_target_day == 0:
                 days_until_next_target_day = 7 
                 
            next_run_date = (base_date_for_next + timedelta(days=days_until_next_target_day)).date()
            next_run_dt_naive = datetime.combine(next_run_date, time(hour=hour, minute=minute))
            next_run_dt_aware = next_run_dt_naive.replace(tzinfo=tz)

            logger.info(f"({self.TASK_TYPE}) –†–∞—Å—á–µ—Ç —Å–ª–µ–¥. —Ü–∏–∫–ª–∞: –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø.={last_target_dt_aware}, Period={period_length}, –ë–∞–∑–∞+Period={base_date_for_next}, –°–ª–µ–¥.–∑–∞–ø.={next_run_dt_aware}")
            return next_run_dt_aware
            
        except Exception as e:
             logger.error(f"({self.TASK_TYPE}) ‚ùå –û—à–∏–±–∫–∞ –≤ _calculate_next_registration_time: {e}")
             logger.error(traceback.format_exc())
             return None

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º _do_execute –æ–±—Ä–∞—Ç–Ω–æ –≤ execute
    async def execute(self, chat_id, settings: scheduler_settings):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∑–∞–¥–∞—á–∏ - –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        if not chat_id:
            logger.error(f"({self.TASK_TYPE}) ‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω chat_id –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.")
            return

        chat_id_str = str(chat_id)
        logger.info(f"({self.TASK_TYPE}) ‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —á–∞—Ç–∞: {chat_id_str}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        access_settings = await self._get_access_settings_from_api(chat_id_str, settings)
        if not access_settings:
            logger.error(f"({self.TASK_TYPE}) ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {chat_id_str} –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π. –ó–∞–¥–∞—á–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å–ª—É—à–∞—Ç–µ–ª–µ–º, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
            return 

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
        success = await self._send_notification(chat_id_str, settings) # –£–±–∏—Ä–∞–µ–º access_settings –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

        if success:
             logger.info(f"({self.TASK_TYPE}) ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è) –¥–ª—è {chat_id_str} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        else:
             logger.warning(f"({self.TASK_TYPE}) ‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è) –¥–ª—è {chat_id_str} –Ω–µ —É–¥–∞–ª–æ—Å—å.")
             
        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è Event Listener'–æ–º –≤ TaskManager.

    # _send_notification —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç settings –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ Telegram Bot API
    async def _send_notification(self, chat_id: str, settings: scheduler_settings) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω –ª–∏ URL API —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
        if not hasattr(settings, 'BOT_API_URL') or not settings.BOT_API_URL:
            logger.error(f"({self.TASK_TYPE}) ‚ùå URL API —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ (BOT_API_URL) –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if hasattr(settings, 'HEALTHCHECK_BOT_SEND_MESSAGE_URL') and settings.HEALTHCHECK_BOT_SEND_MESSAGE_URL:
            logger.info(f"({self.TASK_TYPE}) üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π...")
            try:
                async with httpx.AsyncClient() as client:
                    health_response = await client.get(settings.HEALTHCHECK_BOT_SEND_MESSAGE_URL, timeout=5)
                    if health_response.status_code != 200:
                        logger.error(f"({self.TASK_TYPE}) ‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {health_response.status_code}. –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                        return False
                    logger.info(f"({self.TASK_TYPE}) ‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω.")
            except Exception as e:
                logger.error(f"({self.TASK_TYPE}) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTTP-–∫–ª–∏–µ–Ω—Ç–∞: {e}")
                return False
                
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏ payload –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /send_message
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ bot_api_url --- #
        base_bot_url = str(settings.BOT_API_URL).rstrip('/')
        api_endpoint = f"{base_bot_url}/send_message"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL
        message_text = "–î–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–º–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç!"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        payload = {
            "chat_id": chat_id,
            "text": message_text,
            "parse_mode": "HTML"  # –û—Å—Ç–∞–≤–ª—è–µ–º HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        logger.info(f"({self.TASK_TYPE}) –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram Bot API: {api_endpoint}, Payload: {payload}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(api_endpoint, json=payload)
                if response.status_code == 200:
                    logger.info(f"({self.TASK_TYPE}) ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram Bot API.")
                    return True
                else:
                    logger.error(f"({self.TASK_TYPE}) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram Bot API: {response.status_code}, {response.text}")
                    return False
        except Exception as e:
            logger.error(f"({self.TASK_TYPE}) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram Bot API: {e}")
            return False 