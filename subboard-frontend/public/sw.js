// Service Worker –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const CACHE_NAME = 'subboard-v1';
const DB_NAME = 'subboard-notifications';
const DB_VERSION = 1;
const STORE_NAME = 'notifications';

const urlsToCache = [
  '/',
  '/manifest.json',
  '/icon-192x192.png',
  '/icon-512x512.png',
  '/canoe.png'
];

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IndexedDB
async function openNotificationsDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });
        store.createIndex('timestamp', 'timestamp', { unique: false });
        console.log('üì¶ [SW] IndexedDB store created');
      }
    };
  });
}

async function saveNotificationToIndexedDB(notification) {
  try {
    const db = await openNotificationsDB();
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const store = transaction.objectStore(STORE_NAME);
    
    await store.add(notification);
    console.log('üíæ [SW] Notification saved to IndexedDB:', notification.id);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 100)
    const countRequest = store.count();
    countRequest.onsuccess = () => {
      if (countRequest.result > 100) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const index = store.index('timestamp');
        const cursorRequest = index.openCursor();
        let deleteCount = countRequest.result - 100;
        
        cursorRequest.onsuccess = (event) => {
          const cursor = event.target.result;
          if (cursor && deleteCount > 0) {
            store.delete(cursor.primaryKey);
            deleteCount--;
            cursor.continue();
          }
        };
      }
    };
    
  } catch (error) {
    console.error('‚ùå [SW] Error saving to IndexedDB:', error);
    throw error;
  }
}

async function loadNotificationsFromIndexedDB() {
  try {
    const db = await openNotificationsDB();
    const transaction = db.transaction([STORE_NAME], 'readonly');
    const store = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = store.getAll();
      request.onsuccess = () => {
        const notifications = request.result;
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        notifications.sort((a, b) => b.timestamp - a.timestamp);
        console.log(`üì¶ [SW] Loaded ${notifications.length} notifications from IndexedDB`);
        resolve(notifications);
      };
      request.onerror = () => reject(request.error);
    });
  } catch (error) {
    console.error('‚ùå [SW] Error loading from IndexedDB:', error);
    return [];
  }
}

async function removeNotificationFromIndexedDB(notificationId) {
  try {
    const db = await openNotificationsDB();
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const store = transaction.objectStore(STORE_NAME);
    
    await store.delete(notificationId);
    console.log(`üóëÔ∏è [SW] Notification removed from IndexedDB: ${notificationId}`);
  } catch (error) {
    console.error('‚ùå [SW] Error removing from IndexedDB:', error);
    throw error;
  }
}

async function syncNotificationsWithIndexedDB(localStorageNotifications) {
  try {
    const db = await openNotificationsDB();
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const store = transaction.objectStore(STORE_NAME);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ IndexedDB
    const indexedDBNotifications = await new Promise((resolve, reject) => {
      const request = store.getAll();
      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
    
    // –°–æ–∑–¥–∞–µ–º Set ID-—à–Ω–∏–∫–æ–≤ –∏–∑ localStorage
    const localStorageIds = new Set(localStorageNotifications.map(n => n.id));
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ IndexedDB —Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ localStorage
    let removedCount = 0;
    for (const notification of indexedDBNotifications) {
      if (!localStorageIds.has(notification.id)) {
        await store.delete(notification.id);
        removedCount++;
      }
    }
    
    console.log(`üîÑ [SW] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${removedCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ IndexedDB`);
  } catch (error) {
    console.error('‚ùå [SW] Error syncing with IndexedDB:', error);
  }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', event => {
  console.log('üöÄ [SW] Service Worker —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('üîß [SW] –ö—ç—à –æ—Ç–∫—Ä—ã—Ç');
        console.log('üì¶ [SW] –ü–æ–ø—ã—Ç–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', urlsToCache);
        return cache.addAll(urlsToCache).catch(error => {
          console.warn('‚ö†Ô∏è [SW] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å:', error);
          // –ü—ã—Ç–∞–µ–º—Å—è –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
          return Promise.allSettled(
            urlsToCache.map(url => 
              cache.add(url).catch(err => {
                console.warn(`‚ö†Ô∏è [SW] –ù–µ —É–¥–∞–ª–æ—Å—å –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å ${url}:`, err);
                return null;
              })
            )
          );
        });
      }).then(() => {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Service Worker
        console.log('‚ö° [SW] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker');
        return self.skipWaiting();
      }).catch(error => {
        console.error('‚ùå [SW] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Service Worker:', error);
      })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', event => {
  console.log('üîÑ [SW] Service Worker –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è');
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('üóëÔ∏è [SW] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('‚úÖ [SW] Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      return self.clients.claim();
    })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
self.addEventListener('message', event => {
  console.log('üì® [SW] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', event.data);
  
  if (event.data?.type === 'CLIENT_READY') {
    console.log('‚úÖ [SW] –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    event.ports[0]?.postMessage({ type: 'SW_READY' });
  }
  
  if (event.data?.type === 'LOAD_NOTIFICATIONS') {
    console.log('üì¶ [SW] –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ IndexedDB');
    loadNotificationsFromIndexedDB().then(notifications => {
      event.ports[0]?.postMessage({ 
        type: 'NOTIFICATIONS_LOADED', 
        notifications 
      });
    });
  }
  
  if (event.data?.type === 'SYNC_NOTIFICATIONS') {
    console.log('üîÑ [SW] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å IndexedDB');
    const localStorageNotifications = event.data.notifications || [];
    syncNotificationsWithIndexedDB(localStorageNotifications).then(() => {
      event.ports[0]?.postMessage({ 
        type: 'SYNC_COMPLETED'
      });
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', event => {
  console.log('üì© Service Worker: –ü–æ–ª—É—á–µ–Ω–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', event);
  
  if (event.data) {
    const data = event.data.json();
    console.log('üì© Push –¥–∞–Ω–Ω—ã–µ:', data);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    const notificationData = {
      id: `push_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      title: data.title || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      body: data.body || '',
      type: data.data?.type || 'unknown',
      priority: data.data?.priority || 'medium',
      bookingId: data.data?.booking_id,
      clientName: data.data?.client_name,
      timestamp: Date.now(),
      isRead: false,
      actions: data.actions || [],
      additionalData: data.data || {},
    };
    
    console.log('üì§ [SW] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ IndexedDB (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
    saveNotificationToIndexedDB(notificationData).then(() => {
      console.log('üíæ [SW] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IndexedDB');
    }).catch(error => {
      console.error('‚ùå [SW] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ IndexedDB:', error);
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º –≤–∫–ª–∞–¥–∫–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
    // Service Worker –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ localStorage –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    self.clients.matchAll().then(clients => {
      console.log(`üîç [SW] –ù–∞–π–¥–µ–Ω–æ ${clients.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:`, clients.map(c => c.url));
      
      clients.forEach((client, index) => {
        console.log(`üì§ [SW] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ${index + 1}:`, client.url);
        client.postMessage({
          type: 'NEW_NOTIFICATION',
          notification: notificationData
        });
      });
      
      console.log(`üì± [SW] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${clients.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∫–ª–∞–¥–æ–∫`);
      
      if (clients.length === 0) {
        console.log('üì¶ [SW] –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∫–ª–∞–¥–æ–∫, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IndexedDB –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏');
      }
    }).catch(error => {
      console.error('‚ùå [SW] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º:', error);
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    const isHighPriority = data.data?.priority === 'high' || data.data?.priority === 'urgent';
    const requiresInteraction = data.requireInteraction || isHighPriority;
    
    const options = {
      body: data.body,
      icon: data.icon || '/canoe.png',
      badge: data.badge || '/canoe.png',
      tag: data.tag || 'booking-notification',
      data: data.data || {},
      actions: data.actions || [],
      requireInteraction: requiresInteraction,
      silent: data.data?.priority === 'low',
      vibrate: getVibrationPattern(data.data?.priority),
      timestamp: Date.now(),
      renotify: true, // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Å —Ç–µ–º –∂–µ tag
      dir: 'auto',
      lang: 'ru',
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      ...(isHighPriority && {
        sticky: true, // –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–ª–∏–ø–∫–∏–º"
        persistent: true // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ—Å—Ç–∏
      })
    };
    
    console.log('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
      title: data.title,
      priority: data.data?.priority,
      requireInteraction: requiresInteraction,
      isHighPriority
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const showNotificationPromise = self.registration.showNotification(data.title, options);
    
    // –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    if (isHighPriority) {
      console.log('üö® –ö—Ä–∏—Ç–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä—ã');
      
      // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ
      const repeatNotification = new Promise(resolve => {
        setTimeout(async () => {
          try {
            const notifications = await self.registration.getNotifications({
              tag: options.tag
            });
            
            // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
            if (notifications.length === 0) {
              console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
              await self.registration.showNotification(`üîÑ ${data.title}`, {
                ...options,
                body: `–ü–û–í–¢–û–†: ${data.body}`,
                tag: `${options.tag}_repeat`
              });
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
          }
          resolve();
        }, 5000);
      });
      
      event.waitUntil(Promise.all([showNotificationPromise, repeatNotification]));
    } else {
      event.waitUntil(showNotificationPromise);
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
function getVibrationPattern(priority) {
  switch (priority) {
    case 'urgent':
      return [200, 100, 200, 100, 200]; // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
    case 'high':
      return [200, 100, 200]; // –°—Ä–µ–¥–Ω—è—è –≤–∏–±—Ä–∞—Ü–∏—è
    case 'medium':
      return [150]; // –ö–æ—Ä–æ—Ç–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
    case 'low':
    default:
      return [100]; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', event => {
  console.log('üñ±Ô∏è Service Worker: –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é', event);
  
  event.notification.close();
  
  const data = event.notification.data;
  const bookingId = data.booking_id || data.bookingId;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
  let urlToOpen = '/';
  if (bookingId) {
    urlToOpen = `/?booking=${bookingId}`;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
  if (event.action) {
    console.log('üéØ –î–µ–π—Å—Ç–≤–∏–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏:', event.action, '–¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const actionPromise = handleNotificationAction(event.action, data);
    
    switch (event.action) {
      case 'confirm':
        urlToOpen = `/?action=confirm&booking=${bookingId}`;
        break;
      case 'cancel':
        urlToOpen = `/?action=cancel&booking=${bookingId}`;
        break;
      case 'contact':
      case 'contact_urgent':
        if (data.phone) {
          urlToOpen = `tel:${data.phone}`;
        } else {
          urlToOpen = `/?action=contact&booking=${bookingId}`;
        }
        break;
      case 'arrived':
        urlToOpen = `/?action=arrived&booking=${bookingId}`;
        break;
      case 'prepare':
        urlToOpen = `/?action=prepare&booking=${bookingId}`;
        break;
      case 'view':
        urlToOpen = `/?action=view&booking=${bookingId}`;
        break;
      case 'remind':
        urlToOpen = `/?action=remind&booking=${bookingId}`;
        break;
      case 'returned':
        urlToOpen = `/?action=returned&booking=${bookingId}`;
        break;
      case 'lost':
        urlToOpen = `/?action=lost&booking=${bookingId}`;
        break;
      default:
        urlToOpen = `/?action=${event.action}&booking=${bookingId}`;
    }
    
    event.waitUntil(actionPromise);
  }
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then(clientList => {
        // –ò—â–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é –≤–∫–ª–∞–¥–∫—É
        for (const client of clientList) {
          if (client.url.includes(self.location.origin) && 'focus' in client) {
            client.focus();
            if (urlToOpen !== '/') {
              client.navigate(urlToOpen);
            }
            return;
          }
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        if (clients.openWindow) {
          return clients.openWindow(urlToOpen);
        }
      })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
async function handleNotificationAction(action, data) {
  const bookingId = data.booking_id || data.bookingId;
  
  if (!bookingId) {
    console.log('‚ùå –ù–µ—Ç ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:', action);
    return;
  }
  
  try {
    let apiEndpoint = '';
    let requestBody = {};
    
    switch (action) {
      case 'confirm':
        apiEndpoint = `/api/v1/bookings/${bookingId}`;
        requestBody = { status: 'confirmed' };
        break;
      case 'cancel':
        apiEndpoint = `/api/v1/bookings/${bookingId}`;
        requestBody = { status: 'cancelled' };
        break;
      case 'arrived':
        apiEndpoint = `/api/v1/bookings/${bookingId}`;
        requestBody = { status: 'in_use', actual_start_time: new Date().toISOString() };
        break;
      case 'returned':
        apiEndpoint = `/api/v1/bookings/${bookingId}`;
        requestBody = { status: 'completed', time_returned_by_client: new Date().toISOString() };
        break;
      default:
        console.log('üîÑ –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –≤—ã–∑–æ–≤–∞:', action);
        return;
    }
    
    if (apiEndpoint) {
      const response = await fetch(apiEndpoint, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });
      
      if (response.ok) {
        console.log('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:', action, '–¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        self.registration.showNotification('‚úÖ SUPBoard - –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', {
          body: getActionSuccessMessage(action, data.client_name),
          icon: '/canoe.png',
          tag: `action-success-${bookingId}`,
          requireInteraction: false,
          actions: []
        });
      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:', action, error);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    self.registration.showNotification('‚ùå SUPBoard - –û—à–∏–±–∫–∞', {
      body: `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`,
      icon: '/canoe.png',
      tag: `action-error-${bookingId}`,
      requireInteraction: false,
      actions: []
    });
  }
}

// –°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
function getActionSuccessMessage(action, clientName) {
  const name = clientName || '–ö–ª–∏–µ–Ω—Ç';
  
  switch (action) {
    case 'confirm':
      return `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`;
    case 'cancel':
      return `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${name} –æ—Ç–º–µ–Ω–µ–Ω–æ`;
    case 'arrived':
      return `${name} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∏—à–µ–¥—à–∏–π`;
    case 'returned':
      return `–í–æ–∑–≤—Ä–∞—Ç –æ—Ç ${name} –æ—Ñ–æ—Ä–º–ª–µ–Ω`;
    default:
      return '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ';
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('notificationclose', event => {
  console.log('‚ùå Service Worker: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', event);
  
  // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const data = event.notification.data;
  if (data.trackClose) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch('/api/analytics/notification-closed', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        notificationId: data.id,
        bookingId: data.bookingId,
        closedAt: new Date().toISOString()
      })
    }).catch(err => console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', err));
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
self.addEventListener('sync', event => {
  console.log('üîÑ Service Worker: –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', event);
  
  if (event.tag === 'background-sync') {
    event.waitUntil(
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      fetch('/api/bookings/sync')
        .then(response => response.json())
        .then(data => {
          console.log('‚úÖ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data);
        })
        .catch(err => {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', err);
        })
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
self.addEventListener('message', event => {
  console.log('üí¨ Service Worker: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({ version: CACHE_NAME });
  }
});

console.log('üöÄ Service Worker –∑–∞–≥—Ä—É–∂–µ–Ω'); 