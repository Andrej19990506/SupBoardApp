import React, { useState } from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { useDispatch, useSelector } from 'react-redux';
import { loginUser, authenticateWithVK, clearError, authenticateWithTelegram, setUser } from '../store/authSlice';
import { selectIsLoading, selectAuthError } from '../store/authSelectors';
import { LoginCredentials } from '../types';
import { authService } from '../services/authService';
import { AppDispatch } from '../../booking/store';
import VKHoverButton from './VKHoverButton';
import TelegramLoginButton, { TelegramUser } from './TelegramLoginButton';
import { saveAccount } from '../utils/savedAccountsUtils';
import AnimatedLogo from '../../../shared/components/AnimatedLogo';

interface LoginFormProps {
  onSwitchToRegister: () => void;
  onForgotPassword: () => void;
  onClose: () => void;
}

const LoginForm: React.FC<LoginFormProps> = ({ onSwitchToRegister, onForgotPassword, onClose }) => {
  const dispatch = useDispatch<AppDispatch>();
  const isLoading = useSelector(selectIsLoading);
  const error = useSelector(selectAuthError);

  const [formData, setFormData] = useState({
    phone: '', // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è SMS
    password: '', // –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å
  });

  const [loginMode, setLoginMode] = useState<'sms' | 'password'>('sms'); // –†–µ–∂–∏–º –≤—Ö–æ–¥–∞
  const [showPassword, setShowPassword] = useState(false); // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å
  const [smsStep, setSmsStep] = useState<'phone' | 'code'>('phone');
  const [smsCode, setSmsCode] = useState('');
  const [countdown, setCountdown] = useState(0);
  const [smsError, setSmsError] = useState('');
  const [rememberMe, setRememberMe] = useState(true);
  const [isCheckingPhone, setIsCheckingPhone] = useState(false);
  const [phoneCheckResult, setPhoneCheckResult] = useState<{ exists: boolean; userName?: string; userAvatar?: string } | null>(null);

  const formatPhoneNumber = (value: string) => {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const digits = value.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (digits.length === 0) return '';
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    let normalizedDigits = digits;
    if (digits.startsWith('8')) {
      normalizedDigits = '7' + digits.slice(1);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º 7 (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã)
    if (!normalizedDigits.startsWith('7') && normalizedDigits.length > 0) {
      normalizedDigits = '7' + normalizedDigits;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 11 —Ü–∏—Ñ—Ä (7 + 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞)
    normalizedDigits = normalizedDigits.slice(0, 11);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã
    if (normalizedDigits.length <= 1) return '+7';
    if (normalizedDigits.length <= 4) return `+7 (${normalizedDigits.slice(1)})`;
    if (normalizedDigits.length <= 7) return `+7 (${normalizedDigits.slice(1, 4)}) ${normalizedDigits.slice(4)}`;
    if (normalizedDigits.length <= 9) return `+7 (${normalizedDigits.slice(1, 4)}) ${normalizedDigits.slice(4, 7)}-${normalizedDigits.slice(7)}`;
    return `+7 (${normalizedDigits.slice(1, 4)}) ${normalizedDigits.slice(4, 7)}-${normalizedDigits.slice(7, 9)}-${normalizedDigits.slice(9, 11)}`;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    
    if (name === 'user-phone-number') {
      const formattedPhone = formatPhoneNumber(value);
      setFormData(prev => ({
        ...prev,
        phone: formattedPhone
      }));
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞
      setPhoneCheckResult(null);
      setSmsError('');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –ø–æ–ª–Ω—ã–π (11 —Ü–∏—Ñ—Ä) –∏ —Ä–µ–∂–∏–º SMS
      const digits = formattedPhone.replace(/\D/g, '');
      if (digits.length === 11 && digits.startsWith('7') && loginMode === 'sms') {
        checkPhoneDebounced(formattedPhone);
      }
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
      
      // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è
      if (name === 'user-auth-password') {
        setSmsError('');
        setFormData(prev => ({
          ...prev,
          password: value
        }));
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  const checkPhoneDebounced = React.useCallback(
    React.useMemo(
      () => {
        let timeoutId: NodeJS.Timeout;
        return (phone: string) => {
          clearTimeout(timeoutId);
          timeoutId = setTimeout(async () => {
            if (!phone || isLoading) return;
            
            setIsCheckingPhone(true);
            try {
              const result = await authService.checkPhoneExists(phone);
              console.log('üîç checkPhoneExists —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
              console.log('üîç checkPhoneExists –∞–≤–∞—Ç–∞—Ä:', result.user_avatar);
              console.log('üîç checkPhoneExists —Ç–∏–ø –∞–≤–∞—Ç–∞—Ä–∞:', typeof result.user_avatar);
              setPhoneCheckResult({
                exists: result.user_exists,
                userName: result.user_name,
                userAvatar: result.user_avatar
              });
            } catch (error: any) {
              // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 404 - –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
              if (error.response?.status === 404) {
                setPhoneCheckResult({ exists: false });
              } else {
                // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS
                setPhoneCheckResult(null);
              }
            } finally {
              setIsCheckingPhone(false);
            }
          }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 500–º—Å
        };
      },
      [isLoading]
    ),
    [isLoading]
  );

  const startCountdown = () => {
    setCountdown(60); // 1 –º–∏–Ω—É—Ç–∞ = 60 —Å–µ–∫—É–Ω–¥
    const timer = setInterval(() => {
      setCountdown(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSmsError('');
    
    if (loginMode === 'password') {
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å
      if (!formData.phone) {
        setSmsError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        return;
      }
      
      if (!formData.password) {
        setSmsError('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        return;
      }

      try {
        const result = await authService.loginWithPassword(formData.phone, formData.password);
        if (result.user) {
          // –û–±–Ω–æ–≤–ª—è–µ–º Redux —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–æ–∫–µ–Ω —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ authService
          dispatch(clearError());
          dispatch(setUser(result.user));
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —á–µ–∫–±–æ–∫—Å
          if (rememberMe) {
            saveAccountToLocalStorage(result.user, formData.phone);
          }
          
          onClose();
        }
      } catch (error: any) {
        setSmsError(error.response?.data?.detail || '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      }
    } else {
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ SMS (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
      if (smsStep === 'phone') {
        if (!formData.phone) {
          setSmsError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
          return;
        }

        try {
          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
          const checkResponse = await authService.checkPhoneExists(formData.phone);
          
          if (checkResponse.user_exists) {
            // –ê–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥
            const smsResponse = await authService.sendSMSCode(formData.phone);
            if (smsResponse.success) {
              setSmsStep('code');
              startCountdown();
            }
          }
        } catch (error: any) {
          // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
          setSmsError(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞');
        }
      } else if (smsStep === 'code') {
        if (!smsCode || smsCode.length !== 4) {
          setSmsError('–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥');
          return;
        }

        try {
          const result = await authService.verifySMSCode(formData.phone, smsCode);
          if (result.user) {
            // –û–±–Ω–æ–≤–ª—è–µ–º Redux —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–æ–∫–µ–Ω —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ authService
            dispatch(clearError());
            dispatch(setUser(result.user));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —á–µ–∫–±–æ–∫—Å
            if (rememberMe) {
              saveAccountToLocalStorage(result.user, formData.phone);
            }
            
            onClose();
          }
        } catch (error: any) {
          setSmsError(error.response?.data?.detail || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
        }
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
  const saveAccountToLocalStorage = (user: any, phone: string) => {
    try {
      console.log('saveAccountToLocalStorage - user –¥–∞–Ω–Ω—ã–µ:', user);
      console.log('saveAccountToLocalStorage - user.avatar:', user.avatar);
      
      // üõ°Ô∏è –ù–ï –°–û–•–†–ê–ù–Ø–ï–ú –¢–û–ö–ï–ù–´ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ XSS
      // Device Trust –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ HttpOnly cookies
      const savedAccount = {
        id: user.id || Date.now().toString(),
        name: user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        phone: phone,
        avatar: user.avatar || undefined,
        lastLogin: new Date().toISOString()
        // –¢–æ–∫–µ–Ω—ã –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      };

      console.log('saveAccountToLocalStorage - —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç (–±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤):', savedAccount);
      saveAccount(savedAccount);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
    }
  };

  const handleVKAuth = () => {
    // VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    try {
      const vkAuthUrl = authService.getVKAuthUrl();
      window.location.href = vkAuthUrl;
    } catch (error) {
      console.error('VK auth error:', error);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      alert('VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
  };

  const handleTelegramAuth = () => {
    // –°–æ–∑–¥–∞–µ–º Telegram Login Widget –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    const script = document.createElement('script');
    script.src = 'https://telegram.org/js/telegram-widget.js?22';
    script.async = true;
    script.setAttribute('data-telegram-login', 'SubBoardAuthBot');
    script.setAttribute('data-size', 'large');
    script.setAttribute('data-onauth', 'onTelegramAuth(user)');
    script.setAttribute('data-request-access', 'write');

    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è callback
    (window as any).onTelegramAuth = async (user: TelegramUser) => {
      console.log('Telegram auth success:', user);
      try {
        const result = await dispatch(authenticateWithTelegram(user));
        if (authenticateWithTelegram.fulfilled.match(result)) {
          onClose();
        }
      } catch (error) {
        console.error('Telegram auth error:', error);
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.head.appendChild(script);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    console.log('Telegram Login Widget –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
  };

  const handleGoogleLogin = () => {
    const googleAuthUrl = authService.getGoogleAuthUrl();
    window.location.href = googleAuthUrl;
  };

  return (
    <FormContainer
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      {/* –õ–æ–≥–æ—Ç–∏–ø */}
      <LogoContainer>
        <AnimatedLogo size="medium" />
        
        <LogoText
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ 
            duration: 0.5,
            delay: 0.3,
            ease: "easeOut"
          }}
        >
          <MainTitle>SUPBoard</MainTitle>
          <Subtitle>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫–∞—Ç–æ–º –¥–æ—Å–æ–∫</Subtitle>
        </LogoText>
      </LogoContainer>

      <FormHeader>
        <FormTitle>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</FormTitle>
        <FormSubtitle>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</FormSubtitle>
      </FormHeader>

      {(error || smsError) && (
        <ErrorMessage
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.2 }}
        >
          ‚ö†Ô∏è {error || smsError}
        </ErrorMessage>
      )}

      <Form onSubmit={handleSubmit}>
        {/* –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è-–ª–æ–≤—É—à–∫–∏ –¥–ª—è –æ–±–º–∞–Ω–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è */}
        <input type="text" name="username" style={{ display: 'none' }} autoComplete="username" tabIndex={-1} />
        <input type="password" name="fake-password" style={{ display: 'none' }} autoComplete="current-password" tabIndex={-1} />
        
        {/* –ü–æ–ª–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–æ) */}
        <InputGroup>
          <InputLabel>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</InputLabel>
                      <StyledInput
              type="tel"
              name="user-phone-number"
              value={formData.phone}
              onChange={handleInputChange}
              placeholder="+7 (999) 999-99-99"
              required
              disabled={isLoading}
              autoComplete="new-password"
              data-form-type="other"
              readOnly
              onFocus={(e) => {
                e.target.removeAttribute('readonly');
              }}
            />
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ –¥–ª—è SMS —Ä–µ–∂–∏–º–∞ */}
          {loginMode === 'sms' && formData.phone && formData.phone.replace(/\D/g, '').length === 11 && (
            <PhoneStatusContainer>
              {isCheckingPhone ? (
                <PhoneStatusChecking>
                  <Spinner style={{ width: '16px', height: '16px' }} />
                  –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä...
                </PhoneStatusChecking>
              ) : phoneCheckResult?.exists ? (
                <PhoneStatusSuccess>
                  <UserFoundCard
                    initial={{ opacity: 0, scale: 0.9, y: 10 }}
                    animate={{ opacity: 1, scale: 1, y: 0 }}
                    transition={{ 
                      type: "spring", 
                      stiffness: 200, 
                      damping: 20,
                      duration: 0.4 
                    }}
                  >
                    <UserAvatar>
                      {phoneCheckResult.userAvatar ? (
                        <AvatarImage 
                          src={`${import.meta.env.VITE_APP_API_URL || 'http://localhost:8000'}${phoneCheckResult.userAvatar}`}
                          alt={phoneCheckResult.userName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.style.display = 'none';
                            const placeholder = target.nextElementSibling as HTMLElement;
                            if (placeholder) {
                              placeholder.style.display = 'flex';
                            }
                          }}
                        />
                      ) : null}
                      <AvatarPlaceholder style={{ display: phoneCheckResult.userAvatar ? 'none' : 'flex' }}>
                        {(phoneCheckResult.userName || '–£').charAt(0).toUpperCase()}
                      </AvatarPlaceholder>
                    </UserAvatar>
                    <UserInfo>
                      <UserFoundText>–ù–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç</UserFoundText>
                      <UserName>{phoneCheckResult.userName}</UserName>
                    </UserInfo>
                    <CheckIcon>‚úì</CheckIcon>
                  </UserFoundCard>
                </PhoneStatusSuccess>
              ) : phoneCheckResult?.exists === false ? (
                <PhoneStatusError>
                  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </PhoneStatusError>
              ) : null}
            </PhoneStatusContainer>
          )}
        </InputGroup>

        {/* –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ø–∞—Ä–æ–ª—è) */}
        {loginMode === 'password' && (
          <InputGroup>
            <InputLabel>–ü–∞—Ä–æ–ª—å</InputLabel>
            <PasswordContainer>
              <StyledInput
                type={showPassword ? 'text' : 'password'}
                name="user-auth-password"
                value={formData.password}
                onChange={handleInputChange}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                required
                disabled={isLoading}
                autoComplete="new-password"
                data-form-type="other"
                readOnly
                onFocus={(e) => {
                  e.target.removeAttribute('readonly');
                }}
              />
              <PasswordToggle
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                disabled={isLoading}
              >
                                 {showPassword ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}
              </PasswordToggle>
            </PasswordContainer>
          </InputGroup>
        )}

        {/* SMS –∫–æ–¥ (—Ç–æ–ª—å–∫–æ –≤ SMS —Ä–µ–∂–∏–º–µ –∏ –Ω–∞ –≤—Ç–æ—Ä–æ–º —à–∞–≥–µ) */}
        {loginMode === 'sms' && smsStep === 'code' && (
          <InputGroup>
            <InputLabel>
              SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {formData.phone}
              <BackButton 
                type="button" 
                onClick={() => {
                  setSmsStep('phone');
                  setSmsCode('');
                  setCountdown(0);
                  setSmsError('');
                }}
              >
                –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
              </BackButton>
            </InputLabel>
            <StyledInput
              type="text"
              name="smsCode"
              value={smsCode}
              onChange={(e) => {
                const value = e.target.value.replace(/\D/g, '').slice(0, 4);
                setSmsCode(value);
              }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"
              maxLength={4}
              required
              disabled={isLoading}
              autoFocus
            />
            {countdown > 0 ? (
              <CountdownText>
                –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {Math.floor(countdown / 60)}:{(countdown % 60).toString().padStart(2, '0')}
              </CountdownText>
            ) : (
              <ResendButton
                type="button"
                onClick={async () => {
                  try {
                    setSmsError('');
                    const response = await authService.sendSMSCode(formData.phone);
                    if (response.success) {
                      setSmsCode('');
                      startCountdown();
                    }
                  } catch (error: any) {
                    setSmsError(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS');
                  }
                }}
              >
                üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥
              </ResendButton>
            )}
          </InputGroup>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å" */}
        {loginMode === 'sms' && smsStep === 'phone' && (
          <PasswordModeButton
            type="button"
            onClick={() => {
              setLoginMode('password');
              setSmsError('');
              setPhoneCheckResult(null);
            }}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å
          </PasswordModeButton>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ SMS" */}
        {loginMode === 'password' && (
          <BackToSMSButton
            type="button"
            onClick={() => {
              setLoginMode('sms');
              setSmsError('');
              setFormData(prev => ({ ...prev, password: '' }));
            }}
          >
            ‚Üê –ù–∞–∑–∞–¥ –∫ SMS –∫–æ–¥—É
          </BackToSMSButton>
        )}

        {/* –ß–µ–∫–±–æ–∫—Å "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ö–æ–¥" */}
        <RememberMeContainer>
          <RememberMeCheckbox>
            <CheckboxInput
              type="checkbox"
              id="rememberMe"
              checked={rememberMe}
              onChange={(e) => setRememberMe(e.target.checked)}
            />
            <CheckboxCustom $checked={rememberMe}>
              {rememberMe && (
                <CheckboxIcon>‚úì</CheckboxIcon>
              )}
            </CheckboxCustom>
            <CheckboxLabel htmlFor="rememberMe">
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ö–æ–¥
            </CheckboxLabel>
          </RememberMeCheckbox>
        </RememberMeContainer>

        <SubmitButton
          type="submit"
          disabled={
            isLoading || 
            isCheckingPhone ||
            (loginMode === 'password' && (!formData.phone || !formData.password)) ||
            (loginMode === 'sms' && smsStep === 'phone' && (!formData.phone || !phoneCheckResult?.exists)) || 
            (loginMode === 'sms' && smsStep === 'code' && smsCode.length !== 4)
          }
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          {isLoading ? (
            <>
              <Spinner />
              {loginMode === 'password' ? '–í—Ö–æ–¥...' : (smsStep === 'phone' ? '–û—Ç–ø—Ä–∞–≤–∫–∞ SMS...' : '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...')}
            </>
          ) : isCheckingPhone ? (
            <>
              <Spinner />
              –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞...
            </>
          ) : (
            loginMode === 'password' ? '–í–æ–π—Ç–∏' : (smsStep === 'phone' ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –∫–æ–¥' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥')
          )}
        </SubmitButton>
      </Form>

      <SocialSection>
        <SocialDivider>
          <SocialDividerLine />
          <SocialTitle>–∏–ª–∏ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑</SocialTitle>
          <SocialDividerLine />
        </SocialDivider>
        <SocialButtons>
          <SocialIconButton
            onClick={() => {
              // VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
              handleVKAuth();
            }}
            whileHover={{ 
              scale: 1.05,
              boxShadow: "0 8px 32px rgba(25, 118, 210, 0.4)"
            }}
            whileTap={{ scale: 0.98 }}
            $bgColor="transparent"
          >
            <img src="/icons8-vk-circled.svg" alt="VK" width="40" height="40" />
          </SocialIconButton>

          <SocialIconButton
            onClick={() => {
              // –°–æ–∑–¥–∞–µ–º Telegram Login Widget –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
              handleTelegramAuth();
            }}
            whileHover={{ 
              scale: 1.05,
              boxShadow: "0 8px 32px rgba(41, 182, 246, 0.4)"
            }}
            whileTap={{ scale: 0.98 }}
            $bgColor="transparent"
          >
            <img src="/icons8-telegram-app.svg" alt="Telegram" width="40" height="40" />
          </SocialIconButton>

          <SocialIconButton
            onClick={handleGoogleLogin}
            whileHover={{ 
              scale: 1.05,
              boxShadow: "0 8px 32px rgba(66, 133, 244, 0.3)"
            }}
            whileTap={{ scale: 0.98 }}
            $bgColor="transparent"
          >
            <img src="/icons8-google.svg" alt="Google" width="40" height="40" />
          </SocialIconButton>
        </SocialButtons>
      </SocialSection>

      <FormFooter>
        <FooterText>
          –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
          <FooterLink onClick={onSwitchToRegister}>
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
          </FooterLink>
        </FooterText>
        <FooterDivider>‚Ä¢</FooterDivider>
        <FooterText>
          <FooterLink onClick={onForgotPassword}>
            –ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å
          </FooterLink>
        </FooterText>
      </FormFooter>
    </FormContainer>
  );
};

// –°—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ —Å—Ç–µ–∫–ª–æ–º–æ—Ä—Ñ–∏–∑–º
const FormContainer = styled(motion.div)`
  background: linear-gradient(135deg, 
    rgba(15, 15, 20, 0.98) 0%, 
    rgba(25, 25, 35, 0.95) 30%,
    rgba(20, 20, 30, 0.97) 70%,
    rgba(10, 10, 15, 0.98) 100%
  );
  border: 1px solid rgba(255, 255, 255, 0.12);
  border-radius: 24px;
  backdrop-filter: blur(25px);
  box-shadow: 
    0 25px 80px rgba(0, 0, 0, 0.5),
    0 10px 30px rgba(0, 0, 0, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.15),
    inset 0 -1px 0 rgba(255, 255, 255, 0.05);
  padding: 36px;
  width: 100%;
  max-width: 420px;
  position: relative;
  overflow: hidden;
  
  /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
  @media (max-width: 768px) {
    padding: 24px 20px;
    margin: 0;
    max-width: 100vw;
    width: 100vw;
    height: 100vh;
    border-radius: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    border: none;
  }
  
  @media (max-width: 480px) {
    padding: 12px 8px;
    margin: 0;
    max-width: 100vw;
    width: 100vw;
    height: 100vh;
    border-radius: 0;
    border: none;
  }
  
  @media (max-width: 360px) {
    padding: 12px 10px;
  }

  /* –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–Ω–∫–∏–π —Å–≤–µ—Ç—è—â–∏–π—Å—è —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –∫—Ä–∞—è–º */
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 24px;
    padding: 1px;
    background: linear-gradient(135deg, 
      rgba(0, 122, 255, 0.3) 0%, 
      rgba(255, 255, 255, 0.1) 25%,
      rgba(0, 122, 255, 0.2) 50%,
      rgba(255, 255, 255, 0.05) 75%,
      rgba(0, 122, 255, 0.3) 100%
    );
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    mask-composite: subtract;
    z-index: -1;
    opacity: 0.6;
    animation: borderGlow 4s ease-in-out infinite;
    
    @media (max-width: 768px) {
      border-radius: 0;
    }
    
    @media (max-width: 480px) {
      border-radius: 0;
    }
  }

  @keyframes borderGlow {
    0%, 100% { opacity: 0.4; }
    50% { opacity: 0.8; }
  }
`;

const FormHeader = styled.div`
  text-align: center;
  margin-bottom: 28px;
  
  @media (max-width: 768px) {
    margin-bottom: 24px;
  }
  
  @media (max-width: 480px) {
    margin-bottom: 12px;
  }
  
  @media (max-width: 360px) {
    margin-bottom: 12px;
  }
`;

const FormTitle = styled.h2`
  color: #fff;
  font-size: 26px;
  font-weight: 700;
  margin: 0 0 10px 0;
  text-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
  letter-spacing: -0.3px;
  background: linear-gradient(135deg, #ffffff 0%, #f0f0f0 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  
  @media (max-width: 768px) {
    font-size: 24px;
    margin: 0 0 8px 0;
  }
  
  @media (max-width: 480px) {
    font-size: 18px;
    margin: 0 0 4px 0;
  }
  
  @media (max-width: 360px) {
    font-size: 18px;
    margin: 0 0 4px 0;
  }
`;

const FormSubtitle = styled.p`
  color: rgba(255, 255, 255, 0.75);
  font-size: 15px;
  margin: 0;
  font-weight: 400;
  line-height: 1.4;
  
  @media (max-width: 768px) {
    font-size: 14px;
  }
  
  @media (max-width: 480px) {
    font-size: 13px;
    line-height: 1.3;
  }
`;

const ErrorMessage = styled(motion.div)`
  background: linear-gradient(135deg, 
    rgba(255, 59, 48, 0.15) 0%, 
    rgba(255, 59, 48, 0.08) 100%
  );
  border: 1px solid rgba(255, 59, 48, 0.25);
  border-radius: 16px;
  padding: 14px 18px;
  margin-bottom: 24px;
  color: #ff6b6b;
  font-size: 14px;
  text-align: center;
  backdrop-filter: blur(10px);
  box-shadow: 0 4px 20px rgba(255, 59, 48, 0.1);
  
  @media (max-width: 768px) {
    padding: 12px 16px;
    margin-bottom: 20px;
    font-size: 13px;
    border-radius: 14px;
  }
  
  @media (max-width: 480px) {
    padding: 10px 14px;
    margin-bottom: 16px;
    font-size: 12px;
    border-radius: 12px;
  }
`;

const Form = styled.form`
  display: flex;
  flex-direction: column;
  gap: 24px;
  
  @media (max-width: 768px) {
    gap: 20px;
  }
  
  @media (max-width: 480px) {
    gap: 12px;
  }
  
  @media (max-width: 360px) {
    gap: 10px;
  }
`;

const InputGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 10px;
  
  @media (max-width: 480px) {
    gap: 6px;
  }
`;

const InputLabel = styled.label`
  color: rgba(255, 255, 255, 0.95);
  font-size: 15px;
  font-weight: 600;
  margin-bottom: 4px;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  letter-spacing: 0.3px;
  
  @media (max-width: 768px) {
    font-size: 14px;
    margin-bottom: 3px;
  }
  
  @media (max-width: 480px) {
    font-size: 12px;
    margin-bottom: 1px;
  }
`;

const PasswordInputWrapper = styled.div`
  position: relative;
  width: 100%;
`;

const StyledInput = styled.input`
  background: linear-gradient(135deg, 
    rgba(255, 255, 255, 0.12) 0%, 
    rgba(255, 255, 255, 0.06) 50%,
    rgba(255, 255, 255, 0.08) 100%
  );
  border: 1px solid rgba(255, 255, 255, 0.25);
  border-radius: 18px;
  padding: 18px 22px;
  color: #fff;
  font-size: 16px;
  font-weight: 500;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(15px);
  box-shadow: 
    0 6px 25px rgba(0, 0, 0, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.15),
    inset 0 -1px 0 rgba(0, 0, 0, 0.1);
  width: 100%;
  box-sizing: border-box;
  
  @media (max-width: 768px) {
    padding: 16px 20px;
    font-size: 16px;
    border-radius: 16px;
  }
  
  @media (max-width: 480px) {
    padding: 10px 14px;
    font-size: 16px; /* –û—Å—Ç–∞–≤–ª—è–µ–º 16px –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑—É–º–∞ –Ω–∞ iOS */
    border-radius: 10px;
  }
  
  @media (max-width: 360px) {
    padding: 10px 14px;
    border-radius: 10px;
  }

  &::placeholder {
    color: rgba(255, 255, 255, 0.55);
    font-weight: 400;
  }

  &:focus {
    outline: none;
    border-color: rgba(0, 122, 255, 0.7);
    box-shadow: 
      0 0 0 4px rgba(0, 122, 255, 0.2),
      0 12px 40px rgba(0, 122, 255, 0.25),
      inset 0 1px 0 rgba(255, 255, 255, 0.25);
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.18) 0%, 
      rgba(255, 255, 255, 0.10) 50%,
      rgba(255, 255, 255, 0.15) 100%
    );
    transform: translateY(-2px);
    
    @media (max-width: 480px) {
      transform: translateY(-1px);
      box-shadow: 
        0 0 0 3px rgba(0, 122, 255, 0.2),
        0 8px 30px rgba(0, 122, 255, 0.2),
        inset 0 1px 0 rgba(255, 255, 255, 0.25);
    }
  }

  &:hover:not(:focus):not(:disabled) {
    border-color: rgba(255, 255, 255, 0.35);
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.15) 0%, 
      rgba(255, 255, 255, 0.08) 50%,
      rgba(255, 255, 255, 0.12) 100%
    );
    transform: translateY(-1px);
    box-shadow: 
      0 8px 30px rgba(0, 0, 0, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
      
    @media (max-width: 480px) {
      transform: none; /* –£–±–∏—Ä–∞–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
    }
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
`;

const PasswordInput = styled(StyledInput)`
  padding-right: 56px;
`;

const PasswordToggle = styled.button`
  position: absolute;
  right: 16px;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(255, 255, 255, 0.08);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 6px;
  color: rgba(255, 255, 255, 0.7);
  cursor: pointer;
  padding: 4px 8px;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 11px;
  font-weight: 500;
  backdrop-filter: blur(10px);
  white-space: nowrap;

  &:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.25);
    color: rgba(255, 255, 255, 0.9);
    transform: translateY(-50%) scale(1.02);
  }

  &:active:not(:disabled) {
    transform: translateY(-50%) scale(0.98);
  }

  &:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }
`;

const SubmitButton = styled(motion.button)`
  background: linear-gradient(135deg, 
    rgba(0, 122, 255, 1) 0%, 
    rgba(0, 102, 255, 0.9) 30%,
    rgba(0, 122, 255, 0.95) 70%,
    rgba(0, 92, 230, 1) 100%
  );
  border: 1px solid rgba(0, 122, 255, 0.6);
  border-radius: 18px;
  padding: 18px 28px;
  color: #fff;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin-top: 12px;
  width: 100%;
  box-sizing: border-box;
  backdrop-filter: blur(15px);
  box-shadow: 
    0 8px 32px rgba(0, 122, 255, 0.3),
    0 4px 16px rgba(0, 0, 0, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
  position: relative;
  overflow: hidden;
  
  @media (max-width: 768px) {
    padding: 16px 24px;
    font-size: 15px;
    border-radius: 16px;
    margin-top: 10px;
  }
  
  @media (max-width: 480px) {
    padding: 10px 16px;
    font-size: 13px;
    border-radius: 10px;
    margin-top: 6px;
    min-height: 40px; /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è */
  }
  
  @media (max-width: 360px) {
    padding: 10px 16px;
    font-size: 13px;
    border-radius: 10px;
    margin-top: 6px;
    min-height: 40px;
  }

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
      transparent, 
      rgba(255, 255, 255, 0.3), 
      transparent
    );
    transition: left 0.6s;
  }

  &:hover:not(:disabled) {
    background: linear-gradient(135deg, 
      rgba(0, 122, 255, 1) 0%, 
      rgba(0, 112, 255, 1) 30%,
      rgba(0, 132, 255, 1) 70%,
      rgba(0, 102, 240, 1) 100%
    );
    border-color: rgba(0, 122, 255, 0.8);
    box-shadow: 
      0 12px 48px rgba(0, 122, 255, 0.4),
      0 6px 24px rgba(0, 0, 0, 0.25),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
    transform: translateY(-2px);

    &::before {
      left: 100%;
    }
    
    @media (max-width: 480px) {
      transform: translateY(-1px);
      box-shadow: 
        0 8px 32px rgba(0, 122, 255, 0.3),
        0 4px 16px rgba(0, 0, 0, 0.2),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
    }
  }

  &:active:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 
      0 8px 24px rgba(0, 122, 255, 0.35),
      0 4px 12px rgba(0, 0, 0, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
      
    @media (max-width: 480px) {
      transform: none;
    }
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.1) 0%, 
      rgba(255, 255, 255, 0.05) 100%
    );
    border-color: rgba(255, 255, 255, 0.2);
    color: rgba(255, 255, 255, 0.5);
    box-shadow: none;
  }
`;

const Spinner = styled.div`
  width: 16px;
  height: 16px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top: 2px solid #fff;
  border-radius: 50%;
  animation: spin 1s linear infinite;

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
`;

const SocialSection = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 24px 0 20px 0;
  
  @media (max-width: 768px) {
    margin: 20px 0 18px 0;
  }
  
  @media (max-width: 480px) {
    margin: 16px 0 16px 0;
  }
`;

const SocialDivider = styled.div`
  display: flex;
  align-items: center;
  gap: 16px;
  margin-bottom: 20px;
  width: 100%;
  
  @media (max-width: 768px) {
    gap: 14px;
    margin-bottom: 18px;
  }
  
  @media (max-width: 480px) {
    gap: 12px;
    margin-bottom: 16px;
  }
`;

const SocialDividerLine = styled.div`
  flex: 1;
  height: 1px;
  background: linear-gradient(90deg, 
    transparent 0%, 
    rgba(255, 255, 255, 0.2) 50%, 
    transparent 100%
  );
`;

const SocialTitle = styled.div`
  color: rgba(255, 255, 255, 0.65);
  font-size: 13px;
  font-weight: 500;
  text-align: center;
  white-space: nowrap;
  text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  
  @media (max-width: 768px) {
    font-size: 12px;
  }
  
  @media (max-width: 480px) {
    font-size: 11px;
  }
`;

const SocialButtons = styled.div`
  display: flex;
  justify-content: center;
  gap: 20px;
  
  @media (max-width: 768px) {
    gap: 18px;
  }
  
  @media (max-width: 480px) {
    gap: 12px;
  }
`;

const SocialIconButton = styled(motion.button)<{ $bgColor: string; $textColor?: string }>`
  width: 60px;
  height: 60px;
  border-radius: 50%;
  border: 2px solid rgba(255, 255, 255, 0.1);
  background: ${props => props.$bgColor === 'transparent' 
    ? 'linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%)'
    : props.$bgColor
  };
  backdrop-filter: blur(20px);
  color: ${props => props.$textColor || '#ffffff'};
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.15),
    0 4px 16px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
  position: relative;
  overflow: hidden;
  
  @media (max-width: 768px) {
    width: 56px;
    height: 56px;
  }
  
  @media (max-width: 480px) {
    width: 46px;
    height: 46px;
  }

  img {
    z-index: 2;
    flex-shrink: 0;
    border-radius: 50%;
    
    @media (max-width: 768px) {
      width: 36px !important;
      height: 36px !important;
    }
    
    @media (max-width: 480px) {
      width: 28px !important;
      height: 28px !important;
    }
  }

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at center, 
      rgba(255, 255, 255, 0.15) 0%, 
      rgba(255, 255, 255, 0.05) 50%,
      transparent 100%
    );
    opacity: 0;
    transition: opacity 0.4s ease;
    z-index: 1;
    border-radius: 50%;
  }

  &:hover:not(:disabled) {
    transform: translateY(-3px) scale(1.02);
    border-color: rgba(255, 255, 255, 0.25);
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.15) 0%, 
      rgba(255, 255, 255, 0.08) 100%
    );
    
    &::before {
      opacity: 1;
    }
    
    @media (max-width: 480px) {
      transform: translateY(-2px) scale(1.01);
    }
  }

  &:active:not(:disabled) {
    transform: translateY(-1px) scale(0.99);
    transition: all 0.1s ease;
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

const FormFooter = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  gap: 4px;
  text-align: center;
  margin-top: 24px;
  
  @media (max-width: 768px) {
    margin-top: 20px;
  }
  
  @media (max-width: 480px) {
    margin-top: 12px;
    flex-direction: column;
    gap: 6px;
  }
`;

const FooterText = styled.p`
  color: #86868B;
  font-size: 14px;
  margin: 0;
  
  @media (max-width: 768px) {
    font-size: 13px;
  }
  
  @media (max-width: 480px) {
    font-size: 12px;
  }
`;

const FooterLink = styled.button`
  background: none;
  border: none;
  color: #007AFF;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  text-decoration: underline;
  transition: color 0.2s ease;
  
  @media (max-width: 768px) {
    font-size: 13px;
  }
  
  @media (max-width: 480px) {
    font-size: 12px;
  }

  &:hover {
    color: #0056CC;
  }
`;

const FooterDivider = styled.span`
  color: #86868B;
  font-size: 14px;
  margin: 0 12px;
  
  @media (max-width: 768px) {
    font-size: 13px;
    margin: 0 10px;
  }
  
  @media (max-width: 480px) {
    font-size: 12px;
    margin: 0 8px;
  }
`;

const BackButton = styled.button`
  background: none;
  border: none;
  color: #007AFF;
  font-size: 12px;
  cursor: pointer;
  text-decoration: underline;
  margin-left: 12px;
  transition: color 0.2s ease;
  
  @media (max-width: 768px) {
    font-size: 11px;
    margin-left: 10px;
  }
  
  @media (max-width: 480px) {
    font-size: 10px;
    margin-left: 8px;
  }

  &:hover {
    color: #0051D0;
  }
`;

const CountdownText = styled.div`
  color: rgba(255, 255, 255, 0.6);
  font-size: 12px;
  margin-top: 8px;
  text-align: center;
  
  @media (max-width: 480px) {
    font-size: 11px;
    margin-top: 6px;
  }
`;

const ResendButton = styled.button`
  background: linear-gradient(135deg, rgba(0, 122, 255, 0.2) 0%, rgba(0, 122, 255, 0.1) 100%);
  border: 1px solid rgba(0, 122, 255, 0.3);
  border-radius: 8px;
  padding: 8px 16px;
  color: #007AFF;
  font-size: 12px;
  cursor: pointer;
  margin-top: 8px;
  transition: all 0.2s ease;
  width: 100%;
  
  @media (max-width: 768px) {
    padding: 7px 14px;
    font-size: 11px;
    border-radius: 7px;
    margin-top: 7px;
  }
  
  @media (max-width: 480px) {
    padding: 6px 12px;
    font-size: 11px;
    border-radius: 6px;
    margin-top: 6px;
    min-height: 36px;
  }

  &:hover {
    background: linear-gradient(135deg, rgba(0, 122, 255, 0.3) 0%, rgba(0, 122, 255, 0.2) 100%);
    border-color: rgba(0, 122, 255, 0.5);
  }
`;

// –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
const LogoContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 28px;
  padding: 20px 0;
  
  @media (max-width: 768px) {
    margin-bottom: 24px;
    padding: 16px 0;
  }
  
  @media (max-width: 480px) {
    margin-bottom: 20px;
    padding: 12px 0;
  }
`;

const LogoText = styled(motion.div)`
  text-align: center;
`;

const MainTitle = styled.h1`
  background: linear-gradient(135deg, 
    #ffffff 0%, 
    #007AFF 25%,
    #00D4FF 50%,
    #007AFF 75%,
    #ffffff 100%
  );
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-size: 26px;
  font-weight: 800;
  margin: 0 0 6px 0;
  letter-spacing: -0.8px;
  text-align: center;
  
  @media (max-width: 768px) {
    font-size: 24px;
    margin: 0 0 5px 0;
    letter-spacing: -0.6px;
  }
  
  @media (max-width: 480px) {
    font-size: 22px;
    margin: 0 0 4px 0;
    letter-spacing: -0.4px;
  }
  
  /* Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ */
  @supports not (-webkit-background-clip: text) {
    color: #ffffff;
  }

  /* –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –≥–ª—É–±–∏–Ω—ã */
  text-shadow: 0 4px 16px rgba(0, 122, 255, 0.4);
`;

const Subtitle = styled.p`
  color: rgba(255, 255, 255, 0.8);
  font-size: 13px;
  margin: 0;
  font-weight: 500;
  text-align: center;
  line-height: 1.4;
  opacity: 0.95;
  
  @media (max-width: 768px) {
    font-size: 12px;
    line-height: 1.3;
  }
  
  @media (max-width: 480px) {
    font-size: 11px;
    line-height: 1.2;
  }
  
  /* –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫—É—é —Ç–µ–Ω—å */
  text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
`;

// –°—Ç–∏–ª–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ö–æ–¥"
const RememberMeContainer = styled.div`
  margin: 16px 0 8px 0;
  
  @media (max-width: 768px) {
    margin: 14px 0 6px 0;
  }
  
  @media (max-width: 480px) {
    margin: 8px 0 2px 0;
  }
`;

const RememberMeCheckbox = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
  
  @media (max-width: 768px) {
    gap: 10px;
  }
  
  @media (max-width: 480px) {
    gap: 6px;
  }
`;

const CheckboxInput = styled.input`
  position: absolute;
  opacity: 0;
  cursor: pointer;
  width: 0;
  height: 0;
`;

const CheckboxCustom = styled.div<{ $checked: boolean }>`
  width: 20px;
  height: 20px;
  border-radius: 6px;
  border: 2px solid ${props => props.$checked ? '#007AFF' : 'rgba(255, 255, 255, 0.3)'};
  background: ${props => props.$checked 
    ? 'linear-gradient(135deg, #007AFF 0%, #0056CC 100%)' 
    : 'rgba(255, 255, 255, 0.05)'
  };
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  cursor: pointer;
  backdrop-filter: blur(10px);
  box-shadow: ${props => props.$checked 
    ? '0 4px 16px rgba(0, 122, 255, 0.3)' 
    : '0 2px 8px rgba(0, 0, 0, 0.1)'
  };
  
  @media (max-width: 768px) {
    width: 18px;
    height: 18px;
    border-radius: 5px;
  }
  
  @media (max-width: 480px) {
    width: 14px;
    height: 14px;
    border-radius: 3px;
  }

  &:hover {
    border-color: ${props => props.$checked ? '#0056CC' : 'rgba(255, 255, 255, 0.5)'};
    background: ${props => props.$checked 
      ? 'linear-gradient(135deg, #0056CC 0%, #003D99 100%)' 
      : 'rgba(255, 255, 255, 0.08)'
    };
    transform: scale(1.05);
    
    @media (max-width: 480px) {
      transform: none;
    }
  }
`;

const CheckboxIcon = styled.div`
  color: white;
  font-size: 12px;
  font-weight: 700;
  line-height: 1;
  
  @media (max-width: 768px) {
    font-size: 11px;
  }
  
  @media (max-width: 480px) {
    font-size: 9px;
  }
`;

const CheckboxLabel = styled.label`
  color: rgba(255, 255, 255, 0.9);
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  user-select: none;
  transition: color 0.2s ease;
  
  @media (max-width: 768px) {
    font-size: 13px;
  }
  
  @media (max-width: 480px) {
    font-size: 11px;
  }

  &:hover {
    color: rgba(255, 255, 255, 1);
  }
`;

// –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞
const PhoneStatusContainer = styled.div`
  margin-top: 8px;
  padding: 8px 12px;
  border-radius: 8px;
  font-size: 13px;
  font-weight: 500;
  line-height: 1.3;
  
  @media (max-width: 768px) {
    margin-top: 6px;
    padding: 6px 10px;
    font-size: 12px;
  }
  
  @media (max-width: 480px) {
    margin-top: 4px;
    padding: 4px 8px;
    font-size: 11px;
  }
`;

const PhoneStatusChecking = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  color: rgba(255, 255, 255, 0.7);
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: inherit;
  border-radius: inherit;
  
  @media (max-width: 768px) {
    gap: 6px;
  }
  
  @media (max-width: 480px) {
    gap: 4px;
  }
`;

const PhoneStatusSuccess = styled.div`
  background: linear-gradient(135deg, 
    rgba(0, 122, 255, 0.15) 0%, 
    rgba(0, 122, 255, 0.08) 100%
  );
  border: 1px solid rgba(0, 122, 255, 0.3);
  padding: 0;
  border-radius: 16px;
  backdrop-filter: blur(20px);
  box-shadow: 
    0 8px 32px rgba(0, 122, 255, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
  
  @media (max-width: 768px) {
    border-radius: 14px;
  }
  
  @media (max-width: 480px) {
    border-radius: 12px;
  }
`;

const UserFoundCard = styled(motion.div)`
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px 16px;
  
  @media (max-width: 768px) {
    gap: 10px;
    padding: 10px 14px;
  }
  
  @media (max-width: 480px) {
    gap: 8px;
    padding: 8px 12px;
  }
`;

const UserAvatar = styled.div`
  position: relative;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  overflow: hidden;
  flex-shrink: 0;
  
  @media (max-width: 768px) {
    width: 36px;
    height: 36px;
  }
  
  @media (max-width: 480px) {
    width: 32px;
    height: 32px;
  }
`;

const AvatarImage = styled.img`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
`;

const AvatarPlaceholder = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(135deg, #007AFF 0%, #0056CC 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  font-size: 16px;
  border-radius: 50%;
  
  @media (max-width: 768px) {
    font-size: 14px;
  }
  
  @media (max-width: 480px) {
    font-size: 12px;
  }
`;

const UserInfo = styled.div`
  flex: 1;
  min-width: 0;
`;

const UserFoundText = styled.div`
  color: rgba(255, 255, 255, 0.7);
  font-size: 12px;
  font-weight: 500;
  margin-bottom: 2px;
  
  @media (max-width: 768px) {
    font-size: 11px;
  }
  
  @media (max-width: 480px) {
    font-size: 10px;
  }
`;

const UserName = styled.div`
  color: #007AFF;
  font-size: 14px;
  font-weight: 600;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  
  @media (max-width: 768px) {
    font-size: 13px;
  }
  
  @media (max-width: 480px) {
    font-size: 12px;
  }
`;

const CheckIcon = styled.div`
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: linear-gradient(135deg, #007AFF 0%, #0056CC 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 14px;
  font-weight: 700;
  flex-shrink: 0;
  box-shadow: 0 4px 16px rgba(0, 122, 255, 0.3);
  
  @media (max-width: 768px) {
    width: 22px;
    height: 22px;
    font-size: 13px;
  }
  
  @media (max-width: 480px) {
    width: 20px;
    height: 20px;
    font-size: 12px;
  }
`;

const PhoneStatusError = styled.div`
  color: #f44336;
  background: rgba(244, 67, 54, 0.1);
  border: 1px solid rgba(244, 67, 54, 0.3);
  padding: inherit;
  border-radius: inherit;
  
  /* –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ */
  box-shadow: 0 2px 8px rgba(244, 67, 54, 0.2);
`;

const PasswordContainer = styled.div`
  position: relative;
  display: flex;
  align-items: center;
`;

const PasswordModeButton = styled(motion.button)`
  width: 100%;
  padding: 8px 16px;
  background: transparent;
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 8px;
  color: rgba(255, 255, 255, 0.7);
  font-size: 13px;
  font-weight: 400;
  cursor: pointer;
  transition: all 0.3s ease;
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  
  &:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.3);
    color: rgba(255, 255, 255, 0.9);
    transform: translateY(-0.5px);
  }
  
  &:active:not(:disabled) {
    transform: translateY(0);
  }
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  @media (max-width: 768px) {
    padding: 7px 14px;
    font-size: 12px;
    margin-bottom: 10px;
  }
  
  @media (max-width: 480px) {
    padding: 6px 12px;
    font-size: 11px;
    margin-bottom: 8px;
  }
`;

const BackToSMSButton = styled.button`
  width: 100%;
  background: transparent;
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 8px;
  color: rgba(255, 255, 255, 0.6);
  font-size: 13px;
  font-weight: 400;
  cursor: pointer;
  padding: 10px 16px;
  margin-bottom: 16px;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  
  &:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.25);
    color: rgba(255, 255, 255, 0.8);
    transform: translateY(-0.5px);
  }
  
  &:active:not(:disabled) {
    transform: translateY(0);
  }
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  @media (max-width: 768px) {
    font-size: 12px;
    padding: 8px 14px;
    margin-bottom: 14px;
    gap: 4px;
  }
  
  @media (max-width: 480px) {
    font-size: 11px;
    padding: 6px 12px;
    margin-bottom: 12px;
    gap: 3px;
  }
`;

export default LoginForm; 