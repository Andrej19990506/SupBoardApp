import React, { useState, useRef } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '../hooks/useAuth';
import { useProfileDropdown } from '../contexts/ProfileDropdownContext';
import { authService } from '../services/authService';
import { useDispatch } from 'react-redux';
import { setUser } from '../store/authSlice';
import ActiveSessionsModal from './ActiveSessionsModal';

const ProfileDropdownGlobal: React.FC = () => {
  const { user, logout } = useAuth();
  const { isOpen, position, closeDropdown } = useProfileDropdown();
  const [showPhotoTooltip, setShowPhotoTooltip] = useState(false);
  const [showActiveSessionsModal, setShowActiveSessionsModal] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const dispatch = useDispatch();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL –∞–≤–∞—Ç–∞—Ä–∞
  const getFullAvatarUrl = (avatarUrl: string | null): string | null => {
    if (!avatarUrl) return null;
    
    // –ï—Å–ª–∏ URL —É–∂–µ –ø–æ–ª–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (avatarUrl.startsWith('http://') || avatarUrl.startsWith('https://')) {
      return avatarUrl;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL API
    const apiBaseUrl = import.meta.env.VITE_APP_API_URL || 'http://localhost:8000';
    return `${apiBaseUrl}${avatarUrl}`;
  };

  const handleLogout = async () => {
    try {
      await logout();
      closeDropdown();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    }
  };

  const handlePhotoClick = () => {
    console.log('üë§ –ö–ª–∏–∫ –ø–æ –∞–≤–∞—Ç–∞—Ä—É, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É–ª—Ç–∏–ø–∞:', showPhotoTooltip);
    setShowPhotoTooltip(!showPhotoTooltip);
  };

  const handleAddPhoto = () => {
    console.log('üñºÔ∏è –ö–ª–∏–∫ –ø–æ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"');
    console.log('fileInputRef.current:', fileInputRef.current);
    fileInputRef.current?.click();
    setShowPhotoTooltip(false);
  };

  const handleRemovePhoto = async () => {
    if (!user?.id) return;
    
    try {
      const response = await authService.deleteAvatar(Number(user.id));
      console.log('–ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω:', response);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redux
      const updatedUser = { ...user, avatar: undefined };
      dispatch(setUser(updatedUser));
      authService.setStoredUser(updatedUser);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', error);
    }
    
    setShowPhotoTooltip(false);
  };

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    console.log('üìÅ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ input');
    const file = event.target.files?.[0];
    console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:', file);
    console.log('User ID:', user?.id);
    
    if (!file || !user?.id) {
      console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      const response = await authService.uploadAvatar(Number(user.id), file);
      console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω:', response);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redux  
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä
      const apiBaseUrl = import.meta.env.VITE_APP_API_URL || 'http://localhost:8000';
      const fullAvatarUrl = response.avatar_url.startsWith('http') 
        ? response.avatar_url 
        : `${apiBaseUrl}${response.avatar_url}`;
      
      console.log('üñºÔ∏è –ü–æ–ª–Ω—ã–π URL –∞–≤–∞—Ç–∞—Ä–∞:', fullAvatarUrl);
      
      const updatedUser = { ...user, avatar: fullAvatarUrl };
      dispatch(setUser(updatedUser));
      authService.setStoredUser(updatedUser);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
    }
  };

  if (!user || !position) return null;

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ */}
          <Overlay
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => {
              closeDropdown();
              setShowPhotoTooltip(false);
            }}
          />
          
          {/* Dropdown –º–µ–Ω—é */}
          <DropdownMenu
            initial={{ opacity: 0, y: -10, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -10, scale: 0.95 }}
            transition={{ duration: 0.2 }}
            style={{
              top: position.top,
              right: position.right,
            }}
          >
            <DropdownHeader>
              <UserAvatar
                onClick={handlePhotoClick}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                {user.avatar ? (
                  <AvatarImage src={getFullAvatarUrl(user.avatar) || ''} alt={user.name} />
                ) : (
                  <AvatarPlaceholder>
                    {user.name?.charAt(0)?.toUpperCase() || 'üë§'}
                  </AvatarPlaceholder>
                )}
                <AvatarOverlay>
                  <CameraIcon>üì∑</CameraIcon>
                </AvatarOverlay>
                
                {/* –¢—É–ª—Ç–∏–ø –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ */}
                <AnimatePresence>
                  {showPhotoTooltip && (console.log('üîç –†–µ–Ω–¥–µ—Ä–∏–º —Ç—É–ª—Ç–∏–ø, showPhotoTooltip:', showPhotoTooltip), (
                    <PhotoTooltip
                      initial={{ opacity: 0, scale: 0.8, y: 10 }}
                      animate={{ opacity: 1, scale: 1, y: 0 }}
                      exit={{ opacity: 0, scale: 0.8, y: 10 }}
                      transition={{ duration: 0.2 }}
                      onAnimationComplete={() => console.log('üì∏ –¢—É–ª—Ç–∏–ø –ø–æ—è–≤–∏–ª—Å—è')}
                    >
                      <TooltipItem onClick={(e) => {
                        console.log('üìÅ –ö–ª–∏–∫ –ø–æ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ" –≤ —Ç—É–ª—Ç–∏–ø–µ');
                        e.stopPropagation();
                        handleAddPhoto();
                      }}>
                        <TooltipIcon>üìÅ</TooltipIcon>
                        <TooltipText>–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</TooltipText>
                      </TooltipItem>
                      {user.avatar && (
                        <TooltipItem onClick={handleRemovePhoto}>
                          <TooltipIcon>üóëÔ∏è</TooltipIcon>
                          <TooltipText>–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ</TooltipText>
                        </TooltipItem>
                      )}
                    </PhotoTooltip>
                  ))}
                </AnimatePresence>
              </UserAvatar>
              
              <UserDetails>
                <UserDetailName>{user.name}</UserDetailName>
                <UserDetailEmail>{user.email}</UserDetailEmail>
              </UserDetails>
              
              {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleFileChange}
                style={{ display: 'none' }}
              />
            </DropdownHeader>

            <DropdownDivider />

            <DropdownItem
              onClick={() => {
                setShowActiveSessionsModal(true);
                closeDropdown();
              }}
              whileHover={{ backgroundColor: 'rgba(255, 255, 255, 0.1)' }}
              whileTap={{ scale: 0.98 }}
            >
              <ItemIcon>üîê</ItemIcon>
              <ItemText>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–∞–Ω—Å—ã</ItemText>
            </DropdownItem>

            <DropdownItem
              whileHover={{ backgroundColor: 'rgba(255, 255, 255, 0.1)' }}
              whileTap={{ scale: 0.98 }}
            >
              <ItemIcon>‚öôÔ∏è</ItemIcon>
              <ItemText>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</ItemText>
            </DropdownItem>

            <DropdownItem
              whileHover={{ backgroundColor: 'rgba(255, 255, 255, 0.1)' }}
              whileTap={{ scale: 0.98 }}
            >
              <ItemIcon>üìä</ItemIcon>
              <ItemText>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</ItemText>
            </DropdownItem>

            <DropdownDivider />

            <DropdownItem
              onClick={handleLogout}
              whileHover={{ backgroundColor: 'rgba(255, 77, 79, 0.1)' }}
              whileTap={{ scale: 0.98 }}
            >
              <ItemIcon>üö™</ItemIcon>
              <ItemText style={{ color: '#FF4D4F' }}>–í—ã–π—Ç–∏</ItemText>
            </DropdownItem>
          </DropdownMenu>
        </>
      )}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ */}
      <ActiveSessionsModal
        isOpen={showActiveSessionsModal}
        onClose={() => setShowActiveSessionsModal(false)}
      />
    </AnimatePresence>
  );
};

// –°—Ç–∏–ª–∏
const Overlay = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 9998;
  background: transparent;
`;

const DropdownMenu = styled(motion.div)`
  position: fixed;
  min-width: 280px;
  background: rgba(28, 28, 30, 0.95);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 16px;
  backdrop-filter: blur(20px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  z-index: 9999;
  overflow: hidden;

  @media (max-width: 768px) {
    min-width: 260px;
  }
`;

const DropdownHeader = styled.div`
  padding: 16px 20px;
  background: rgba(255, 255, 255, 0.05);
  display: flex;
  align-items: center;
  gap: 12px;
  position: relative;
`;

const UserAvatar = styled(motion.div)`
  position: relative;
  width: 48px;
  height: 48px;
  border-radius: 50%;
  cursor: pointer;
  /* overflow: hidden; // –£–±–∏—Ä–∞–µ–º —á—Ç–æ–±—ã —Ç—É–ª—Ç–∏–ø –±—ã–ª –≤–∏–¥–µ–Ω */
  border: 2px solid rgba(255, 255, 255, 0.2);
  transition: border-color 0.2s ease;
  
  &:hover {
    border-color: rgba(0, 122, 255, 0.6);
  }
`;

const AvatarImage = styled.img`
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
  overflow: hidden;
`;

const AvatarPlaceholder = styled.div`
  width: 100%;
  height: 100%;
  background: linear-gradient(135deg, #007AFF, #0056CC);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  font-weight: 600;
  color: white;
  border-radius: 50%;
  overflow: hidden;
`;

const AvatarOverlay = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.2s ease;
  border-radius: 50%;
  
  ${UserAvatar}:hover & {
    opacity: 1;
  }
`;

const CameraIcon = styled.span`
  font-size: 16px;
`;

const PhotoTooltip = styled(motion.div)`
  position: absolute;
  top: 100%;
  left: 0;
  background: rgba(40, 40, 42, 0.95);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 8px;
  backdrop-filter: blur(20px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
  z-index: 10000;
  overflow: hidden;
  margin-top: 8px;
  min-width: 140px;
`;

const TooltipItem = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  cursor: pointer;
  transition: background-color 0.2s ease;
  
  &:hover {
    background: rgba(255, 255, 255, 0.1);
  }
`;

const TooltipIcon = styled.span`
  font-size: 14px;
  width: 16px;
  display: flex;
  justify-content: center;
`;

const TooltipText = styled.span`
  font-size: 13px;
  color: #fff;
  font-weight: 500;
`;

const UserDetails = styled.div`
  display: flex;
  flex-direction: column;
  gap: 4px;
  flex: 1;
`;

const UserDetailName = styled.div`
  font-size: 16px;
  font-weight: 600;
  color: #fff;
`;

const UserDetailEmail = styled.div`
  font-size: 14px;
  color: #86868B;
`;

const DropdownDivider = styled.div`
  height: 1px;
  background: rgba(255, 255, 255, 0.1);
  margin: 8px 0;
`;

const DropdownItem = styled(motion.div)`
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px 20px;
  cursor: pointer;
  transition: background-color 0.2s ease;
`;

const ItemIcon = styled.span`
  font-size: 16px;
  width: 20px;
  display: flex;
  justify-content: center;
`;

const ItemText = styled.span`
  font-size: 14px;
  font-weight: 500;
  color: #fff;
`;

export default ProfileDropdownGlobal; 