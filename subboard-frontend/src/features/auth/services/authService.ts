import api from '../../../shared/services/api';
import { 
  LoginCredentials, 
  RegisterCredentials, 
  AuthResponse, 
  VKAuthData, 
  TelegramAuthData,
  GoogleAuthData,
  User
} from '../types';

class AuthService {
  private readonly TOKEN_KEY = 'auth_token';
  private readonly USER_KEY = 'user_data';

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  private getApiUrl(): string {
    if (typeof window !== 'undefined' && (window as any).APP_CONFIG?.API_URL) {
      return (window as any).APP_CONFIG.API_URL;
    }
    return '/api'; // fallback
  }

  // –¢–æ–∫–µ–Ω—ã
  getToken(): string | null {
    return localStorage.getItem(this.TOKEN_KEY);
  }

  // Refresh token —Ç–µ–ø–µ—Ä—å –≤ HttpOnly cookie, –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è JS
  getRefreshToken(): string | null {
    // –ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ refresh token —Ç–µ–ø–µ—Ä—å –≤ secure cookie
    console.warn('‚ö†Ô∏è Refresh token —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ secure HttpOnly cookie');
    return null;
  }

  setTokens(token: string, refreshToken?: string): void {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ access token –≤ localStorage
    localStorage.setItem(this.TOKEN_KEY, token);
    
    // Refresh token –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º –≤ HttpOnly cookie
    // –ü–æ—ç—Ç–æ–º—É –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ localStorage –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (refreshToken) {
      console.info('‚úÖ Refresh token —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º –≤ secure cookie');
    }
  }

  removeTokens(): void {
    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ access token –∏ user data –∏–∑ localStorage
    localStorage.removeItem(this.TOKEN_KEY);
          localStorage.removeItem(this.USER_KEY);
      
      // HttpOnly cookie –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è Device Trust (soft logout)
      console.info('üîí Access token removed from localStorage, HttpOnly cookie preserved for Device Trust');
  }

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  getStoredUser(): User | null {
    const userData = localStorage.getItem(this.USER_KEY);
    return userData ? JSON.parse(userData) : null;
  }

  setStoredUser(user: User): void {
    localStorage.setItem(this.USER_KEY, JSON.stringify(user));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  isAuthenticated(): boolean {
    return !!this.getToken();
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  async register(credentials: RegisterCredentials & { email: string }): Promise<any> {
    try {
        const response = await api.post('/v1/auth/register', {
        phone: credentials.phone,
        password: credentials.password,
        name: credentials.name,
        email: credentials.email
      });
      
      const data = response.data;
      
      // üéâ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (data.access_token) {
        this.setTokens(data.access_token, undefined); // refresh token –∏–∑ API –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç
      }
      if (data.user) {
        this.setStoredUser(data.user);
      }
      
      return data;
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  // –í—Ö–æ–¥
  async login(credentials: LoginCredentials): Promise<AuthResponse> {
    const response = await api.post('/v1/auth/login', credentials);
    const authData = response.data;
    
    this.setTokens(authData.token, authData.refreshToken);
    this.setStoredUser(authData.user);
    
    return authData;
  }

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥)
  async loginWithPassword(phone: string, password: string): Promise<AuthResponse> {
    const response = await api.post('/v1/auth/login', {
      phone: phone,
      password: password
    });
    const authData = response.data;
    
    this.setTokens(authData.token, authData.refreshToken);
    this.setStoredUser(authData.user);
    
    return authData;
  }

  // –í—ã—Ö–æ–¥
  async logout(): Promise<void> {
    try {
      // üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ú–Ø–ì–ö–ò–ô LOGOUT –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Device Trust
      const response = await fetch(`${this.getApiUrl()}/v1/auth/soft-logout`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HttpOnly cookie
      });
      
      if (!response.ok) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ soft-logout –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      } else {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –º—è–≥–∫–∏–π logout –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
    } finally {
      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      this.removeTokens();
      console.log('üîí –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã, HttpOnly cookie —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è Device Trust');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ secure cookie
  async refreshToken(): Promise<string> {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ secure cookie...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –≤–º–µ—Å—Ç–æ api –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ credentials
    const response = await fetch(`${this.getApiUrl()}/v1/auth/refresh`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include', // –í–∞–∂–Ω–æ! –í–∫–ª—é—á–∞–µ–º cookies –≤ –∑–∞–ø—Ä–æ—Å
      body: JSON.stringify({}), // –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ, refresh token –≤ cookie
    });

    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', response.status);
      
      // –ï—Å–ª–∏ refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
      if (response.status === 401) {
        console.warn('üö™ Refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        this.removeTokens();
        // –í—ã–∑—ã–≤–∞–µ–º logout –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        await this.logout();
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
    }

    const data = await response.json();
    
    if (data.token) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ secure cookie');
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ access token, refresh token —É–∂–µ –≤ secure cookie
      this.setTokens(data.token);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (data.user) {
        this.setStoredUser(data.user);
      }
      
      return data.token;
    }

    throw new Error('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getCurrentUser(): Promise<User> {
    const response = await api.get('/v1/auth/me');
    const user = response.data;
    this.setStoredUser(user);
    return user;
  }

  // OAuth –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
  getVKAuthUrl(): string {
    const clientId = (window as any).APP_CONFIG?.VK_CLIENT_ID || import.meta.env.VITE_VK_CLIENT_ID;
    
    if (!clientId) {
      throw new Error('VK Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    const redirectUri = `${window.location.origin}/auth/vk/callback`;
    const state = Math.random().toString(36).substring(2, 15);
    
    localStorage.setItem('vk_auth_state', state);
    
    const params = new URLSearchParams({
      client_id: clientId,
      redirect_uri: redirectUri,
      response_type: 'code',
      scope: 'email',
      state,
      v: '5.131'
    });

    return `https://oauth.vk.com/authorize?${params.toString()}`;
  }

  async authenticateWithVK(authData: VKAuthData): Promise<AuthResponse> {
    const response = await api.post('/v1/auth/vk', authData);
    const authResponse = response.data;
    
    this.setTokens(authResponse.token, authResponse.refreshToken);
    this.setStoredUser(authResponse.user);
    
    return authResponse;
  }

  // OAuth Telegram
  async authenticateWithTelegram(authData: TelegramAuthData): Promise<AuthResponse> {
    const response = await api.post('/v1/auth/telegram', authData);
    const authResponse = response.data;
    
    this.setTokens(authResponse.token, authResponse.refreshToken);
    this.setStoredUser(authResponse.user);
    
    return authResponse;
  }

  // OAuth Google
  getGoogleAuthUrl(): string {
    const clientId = '304108310275-v2l8pmj06os1f5nt8r18bajthdb2p38n.apps.googleusercontent.com';
    const redirectUri = `${window.location.origin}/auth/google/callback`;
    const state = Math.random().toString(36).substring(2, 15);
    
    localStorage.setItem('google_auth_state', state);
    
    const params = new URLSearchParams({
      client_id: clientId,
      redirect_uri: redirectUri,
      response_type: 'code',
      scope: 'openid email profile',
      state,
      access_type: 'offline',
      prompt: 'consent'
    });

    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;
  }

  async authenticateWithGoogle(authData: GoogleAuthData): Promise<AuthResponse> {
    // –î–æ–±–∞–≤–ª—è–µ–º redirect_uri –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
    const dataWithRedirectUri = {
      ...authData,
      redirect_uri: `${window.location.origin}/auth/google/callback`
    };
    
    const response = await api.post('/v1/auth/google', dataWithRedirectUri);
    const authResponse = response.data;
    
    this.setTokens(authResponse.token, authResponse.refreshToken);
    this.setStoredUser(authResponse.user);
    
    return authResponse;
  }

  // SMS –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  async checkPhoneExists(phone: string): Promise<{ success: boolean; message: string; user_exists: boolean; user_name?: string; user_avatar?: string }> {
    const response = await api.post('/v1/auth/check-phone', { phone });
    return response.data;
  }

  async sendSMSCode(phone: string): Promise<{ success: boolean; message: string; expires_in: number }> {
    const response = await api.post('/v1/auth/send-sms-code', { phone });
    return response.data;
  }

  async sendRegistrationSMSCode(phone: string): Promise<{ success: boolean; message: string; expires_in: number }> {
    const response = await api.post('/v1/auth/send-registration-sms-code', { phone });
    return response.data;
  }

  async verifySMSCode(phone: string, code: string): Promise<AuthResponse> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ credentials
    const response = await fetch(`${this.getApiUrl()}/v1/auth/verify-sms-code`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è secure cookie
      body: JSON.stringify({ phone, code }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ detail: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏' }));
      throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMS –∫–æ–¥–∞');
    }

    const authResponse = await response.json();
    
    console.log('üîç verifySMSCode - –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', authResponse);
    console.log('üîç verifySMSCode - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authResponse.user);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (authResponse.token) {
      // –≠—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ access token
      // Refresh token –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ secure cookie
      this.setTokens(authResponse.token, authResponse.refreshToken);
      this.setStoredUser(authResponse.user);
      console.log('üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω, refresh token –≤ secure cookie');
    }
    
    return authResponse;
  }

  async verifyRegistrationSMSCode(phone: string, code: string): Promise<{ success: boolean; message: string; phone: string; registration_token?: string }> {
    const response = await api.post('/v1/auth/verify-sms-code', { phone, code });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (response.data.registration_token) {
      localStorage.setItem('registration_token', response.data.registration_token);
      console.log('‚úÖ –¢–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
    }
    
    return response.data;
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞
  async forgotPassword(phone: string): Promise<{ success: boolean; message: string; expires_in: number }> {
    const response = await api.post('/v1/auth/forgot-password', { phone });
    return response.data;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  async verifyResetCode(phone: string, code: string): Promise<{ success: boolean; message: string; reset_token?: string }> {
    const response = await api.post('/v1/auth/verify-reset-code', { phone, code });
    return response.data;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
  async resetPassword(phone: string, resetToken: string, newPassword: string): Promise<{ success: boolean; message: string }> {
    const response = await api.post('/v1/auth/reset-password', { 
      phone, 
      reset_token: resetToken, 
      new_password: newPassword 
    });
    return response.data;
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ email + –Ω–æ–º–µ—Ä –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async emailFallbackRecovery(email: string, phone: string): Promise<{ success: boolean; message: string; method?: string }> {
    const response = await api.post('/v1/auth/email-fallback', { email, phone });
    return response.data;
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞–º–∏
  async uploadAvatar(clientId: number, file: File): Promise<{ message: string; avatar_url: string; client: any }> {
    console.log('üì§ uploadAvatar –≤—ã–∑–≤–∞–Ω —Å:', { clientId, fileName: file.name, fileSize: file.size, fileType: file.type });
    
    const formData = new FormData();
    formData.append('file', file);
    
    console.log('üì§ FormData —Å–æ–∑–¥–∞–Ω:', formData);
    console.log('üì§ –§–∞–π–ª –≤ FormData:', formData.get('file'));
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios –±–µ–∑ –±–∞–∑–æ–≤–æ–≥–æ Content-Type
    const response = await api.post(`/v1/clients/${clientId}/avatar`, formData, {
      headers: {
        'Content-Type': undefined, // –ü–æ–∑–≤–æ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å boundary
      },
      transformRequest: [(data) => data], // –ù–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º FormData
    });
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
    return response.data;
  }

  async deleteAvatar(clientId: number): Promise<{ message: string; client: any }> {
    console.log('üóëÔ∏è deleteAvatar –≤—ã–∑–≤–∞–Ω —Å clientId:', clientId);
    const response = await api.delete(`/v1/clients/${clientId}/avatar`);
    console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω, –æ—Ç–≤–µ—Ç:', response.data);
    return response.data;
  }

  // üõ°Ô∏è DEVICE TRUST - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  async checkDeviceTrust(phone: string): Promise<{
    trusted: boolean;
    reason: string;
    message: string;
    session_id?: number;
    device_info?: any;
  }> {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –¥–ª—è:', phone);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ HttpOnly cookie
      const response = await fetch(`${this.getApiUrl()}/v1/auth/check-device-trust`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include', // –í–∞–∂–Ω–æ! –í–∫–ª—é—á–∞–µ–º cookies –≤ –∑–∞–ø—Ä–æ—Å
        body: JSON.stringify({ phone }),
      });

      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Device Trust:', response.status);
        return {
          trusted: false,
          reason: 'api_error',
          message: `–û—à–∏–±–∫–∞ API: ${response.status}`
        };
      }

      const result = await response.json();
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Device Trust:', result);
      
      return result;
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Device Trust:', error);
      return {
        trusted: false,
        reason: 'network_error',
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'
      };
    }
  }

  // üöÄ AUTO LOGIN - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  async autoLogin(phone: string): Promise<AuthResponse> {
    try {
      console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', phone);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ HttpOnly cookie
      const response = await fetch(`${this.getApiUrl()}/v1/auth/auto-login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include', // –í–∞–∂–Ω–æ! –í–∫–ª—é—á–∞–µ–º cookies –≤ –∑–∞–ø—Ä–æ—Å
        body: JSON.stringify({ phone }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞:', response.status, errorData);
        throw new Error(errorData.detail || `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞: ${response.status}`);
      }

      const authData = await response.json();
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥:', authData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.setTokens(authData.token, authData.refreshToken);
      this.setStoredUser(authData.user);
      
      return authData;
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—Ö–æ–¥–µ:', error);
      throw error;
    }
  }
}

export const authService = new AuthService();

export const registerUser = async (userData: RegisterCredentials & { email: string }) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ localStorage
    const registrationToken = localStorage.getItem('registration_token');
    
    if (!registrationToken) {
      throw new Error('–¢–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ.');
    }
    
    const apiUrl = process.env.NODE_ENV === 'production' 
      ? 'https://supboardapp.ru/api' 
      : 'http://localhost/api';
    
    const response = await fetch(`${apiUrl}/v1/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ HttpOnly cookie
      body: JSON.stringify({
        phone: userData.phone,
        password: userData.password,
        name: userData.name,
        email: userData.email,
        registration_token: registrationToken
      }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ detail: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏' }));
      throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }

    const authData = await response.json();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', authData);
    
    // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    localStorage.removeItem('registration_token');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authService = new AuthService();
    authService.setTokens(authData.access_token, authData.refreshToken);
    authService.setStoredUser(authData.user);
    
    return authData;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}; 