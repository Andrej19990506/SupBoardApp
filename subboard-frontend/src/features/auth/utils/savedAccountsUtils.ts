export interface SavedAccount {
  id: string;
  name: string;
  phone: string;
  avatar?: string;
  lastLogin: string;
  token?: string;
  refreshToken?: string;
}

export const getSavedAccounts = (): SavedAccount[] => {
  try {
    const saved = localStorage.getItem('subboard_saved_accounts');
    if (!saved) return [];
    
    const accounts = JSON.parse(saved);
    
    // üõ°Ô∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –¢–û–ö–ï–ù–û–í –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    const cleanedAccounts = accounts.map((account: SavedAccount) => {
      const { token, refreshToken, ...cleanAccount } = account;
      if (token || refreshToken) {
        console.log(`üßπ –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: ${account.name}`);
      }
      return cleanAccount;
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
    if (cleanedAccounts.some((acc: any, index: number) => 
      accounts[index].token || accounts[index].refreshToken)) {
      localStorage.setItem('subboard_saved_accounts', JSON.stringify(cleanedAccounts));
      console.log('üõ°Ô∏è –¢–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    }
    
    return cleanedAccounts;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
    return [];
  }
};

export const saveAccount = (account: SavedAccount): void => {
  try {
    const existingAccounts = getSavedAccounts();
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const filteredAccounts = existingAccounts.filter(acc => acc.phone !== account.phone);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    const updatedAccounts = [account, ...filteredAccounts].slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    
    localStorage.setItem('subboard_saved_accounts', JSON.stringify(updatedAccounts));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
  }
};

export const removeAccount = (accountId: string): void => {
  try {
    const existingAccounts = getSavedAccounts();
    const updatedAccounts = existingAccounts.filter(acc => acc.id !== accountId);
    
    localStorage.setItem('subboard_saved_accounts', JSON.stringify(updatedAccounts));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
  }
};

export const clearAllSavedAccounts = (): void => {
  try {
    localStorage.removeItem('subboard_saved_accounts');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
  }
};

export const hasSavedAccounts = (): boolean => {
  return getSavedAccounts().length > 0;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
export const createTestAccounts = (): void => {
  const testAccounts: SavedAccount[] = [
    {
      id: '1',
      name: '–ê–Ω–¥—Ä–µ–π –ú–∞–ª–∞—Ö–æ–≤',
      phone: '+79135849601',
      avatar: undefined,
      lastLogin: new Date().toISOString(),
      token: undefined, // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤
      refreshToken: undefined
    },
    {
      id: '2', 
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      phone: '+79123456789',
      avatar: undefined,
      lastLogin: new Date(Date.now() - 86400000).toISOString(), // –í—á–µ—Ä–∞
      token: undefined,
      refreshToken: undefined
    }
  ];
  
  localStorage.setItem('subboard_saved_accounts', JSON.stringify(testAccounts));
  console.log('–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:', testAccounts);
}; 