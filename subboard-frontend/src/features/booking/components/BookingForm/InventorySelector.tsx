import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { inventoryApi, type InventoryType } from '@/features/booking/services/inventoryApi';
import PresetManager, { InventoryPreset } from './PresetManager';
import { useAppSelector } from '@features/booking/store/hooks';
import type { RootState } from '@features/booking/store';
import { getDetailedAvailabilityInfo } from '@features/booking/utils/bookingUtils';
import { parseISO, isValid as isValidDate } from 'date-fns';
import type { Booking } from '@/types/booking';
import { useInventoryTotal } from './hooks/useInventoryTotal';
import DesktopInventoryModal from '../InventoryModal/DesktopInventoryModal';

// –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
interface NewInventorySelectorProps {
    selectedItems: Record<number, number>; // typeId -> quantity
    onChange: (selectedItems: Record<number, number>) => void;
    error?: string | null;
    plannedDate?: string;
    plannedTime?: string;
    durationInHours?: number;
    bookingId?: string; // –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    onClose?: () => void; // –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
}

// Legacy –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º
interface LegacyInventorySelectorProps {
    counts: {
        boardCount: number;
        boardWithSeatCount: number;
        raftCount: number;
    };
    available: {
        board: number;
        board_with_seat: number;
        raft: number;
    };
    onChange: (counts: { boardCount: number; boardWithSeatCount: number; raftCount: number }) => void;
    error?: string | null;
    extraSeatButton?: boolean;
}

// –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø
type InventorySelectorProps = NewInventorySelectorProps | LegacyInventorySelectorProps;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –ø—Ä–æ–ø—Å–æ–≤
const isLegacyProps = (props: InventorySelectorProps): props is LegacyInventorySelectorProps => {
    return 'counts' in props && 'available' in props;
};

// Legacy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º
const LegacyInventorySelectorAdapter: React.FC<LegacyInventorySelectorProps> = ({ 
    counts, 
    available, 
    onChange, 
    error 
}) => {
    const [isMobile, setIsMobile] = useState(false);

    useEffect(() => {
        const checkIsMobile = () => {
            setIsMobile(window.innerWidth <= 768);
        };
        checkIsMobile();
        window.addEventListener('resize', checkIsMobile);
        return () => window.removeEventListener('resize', checkIsMobile);
    }, []);

    const handleChange = (type: 'boardCount' | 'boardWithSeatCount' | 'raftCount', delta: number) => {
        const newCounts = { ...counts };
        const currentCount = newCounts[type] || 0;
        const newCount = Math.max(0, currentCount + delta);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        let maxAvailable = 0;
        if (type === 'boardCount') {
            maxAvailable = available.board;
        } else if (type === 'boardWithSeatCount') {
            maxAvailable = available.board_with_seat;
        } else if (type === 'raftCount') {
            maxAvailable = available.raft;
        }
        
        if (newCount <= maxAvailable) {
            newCounts[type] = newCount;
            onChange(newCounts);
        }
    };

    const CounterComponent = ({ 
        count, 
        onDecrease, 
        onIncrease, 
        canDecrease, 
        canIncrease 
    }: {
        count: number;
        onDecrease: () => void;
        onIncrease: () => void;
        canDecrease: boolean;
        canIncrease: boolean;
    }) => (
        <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: isMobile ? 8 : 12,
            backgroundColor: '#1C1C1E',
            borderRadius: isMobile ? 6 : 8,
            padding: isMobile ? '4px 6px' : '6px 8px'
        }}>
            <motion.button 
                type="button" 
                onClick={onDecrease}
                disabled={!canDecrease}
                whileHover={canDecrease ? { 
                    scale: 1.1, 
                    backgroundColor: '#0056CC',
                    boxShadow: '0 0 15px rgba(0, 122, 255, 0.4)'
                } : {}}
                whileTap={canDecrease ? { 
                    scale: 0.95,
                    backgroundColor: '#004499'
                } : {}}
                style={{
                    width: isMobile ? 32 : 28,
                    height: isMobile ? 32 : 28,
                    borderRadius: 6,
                    border: 'none',
                    backgroundColor: !canDecrease ? '#3C3C3E' : '#007AFF',
                    color: '#fff',
                    fontSize: isMobile ? 18 : 16,
                    fontWeight: 600,
                    cursor: !canDecrease ? 'not-allowed' : 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                }}
            >
                ‚àí
            </motion.button>
            
            <div style={{
                minWidth: isMobile ? 16 : 20,
                textAlign: 'center',
                color: '#fff',
                fontSize: isMobile ? 16 : 18,
                fontWeight: 600,
            }}>
                {count}
            </div>
            
            <motion.button 
                type="button" 
                onClick={onIncrease}
                disabled={!canIncrease}
                whileHover={canIncrease ? { 
                    scale: 1.1, 
                    backgroundColor: '#0056CC',
                    boxShadow: '0 0 15px rgba(0, 122, 255, 0.4)'
                } : {}}
                whileTap={canIncrease ? { 
                    scale: 0.95,
                    backgroundColor: '#004499'
                } : {}}
                style={{
                    width: isMobile ? 32 : 28,
                    height: isMobile ? 32 : 28,
                    borderRadius: 6,
                    border: 'none',
                    backgroundColor: !canIncrease ? '#3C3C3E' : '#007AFF',
                    color: '#fff',
                    fontSize: isMobile ? 18 : 16,
                    fontWeight: 600,
                    cursor: !canIncrease ? 'not-allowed' : 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                }}
            >
                +
            </motion.button>
        </div>
    );

    return (
        <div style={{ 
            background: '#23232a', 
            borderRadius: isMobile ? 12 : 16, 
            padding: isMobile ? 16 : 20, 
            margin: '8px 0' 
        }}>
            <div style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                marginBottom: 16,
                paddingBottom: 12,
                borderBottom: '1px solid #3C3C3E'
            }}>
                <h3 style={{
                    margin: 0,
                    color: '#fff',
                    fontSize: isMobile ? 14 : 16,
                    fontWeight: 600
                }}>
                    üõª –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                </h3>
            </div>

            <div style={{ 
                display: 'flex', 
                gap: isMobile ? 12 : 16, 
                alignItems: 'flex-start', 
                justifyContent: isMobile ? 'stretch' : 'flex-start',
                flexWrap: 'wrap',
                flexDirection: isMobile ? 'column' : 'row'
            }}>
                {/* –°–∞–ø–±–æ—Ä–¥—ã */}
                <div style={{
                    display: 'flex',
                    flexDirection: isMobile ? 'row' : 'column',
                    alignItems: 'center',
                    backgroundColor: '#2C2C2E',
                    borderRadius: isMobile ? 8 : 12,
                    padding: isMobile ? 16 : 16,
                    minWidth: isMobile ? 'auto' : 120,
                    flex: isMobile ? 'none' : '0 0 auto',
                    width: isMobile ? '100%' : 'auto',
                    position: 'relative',
                    border: counts.boardCount > 0 ? '2px solid #007AFF' : '2px solid transparent',
                    justifyContent: isMobile ? 'space-between' : 'center'
                }}>
                    <div style={{
                        position: 'absolute',
                        top: isMobile ? 6 : 8,
                        right: isMobile ? 6 : 8,
                        backgroundColor: available.board === 0 ? '#FF4D4F' : '#007AFF',
                        color: '#fff',
                        borderRadius: isMobile ? 6 : 8,
                        padding: isMobile ? '1px 4px' : '2px 6px',
                        fontSize: isMobile ? 10 : 11,
                        fontWeight: 600
                    }}>
                        {available.board}
                    </div>

                    <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: isMobile ? 12 : 0,
                        flexDirection: isMobile ? 'row' : 'column'
                    }}>
                        <div style={{
                            fontSize: isMobile ? 32 : 40,
                            marginBottom: isMobile ? 0 : 8,
                        }}>
                            üèÑ‚Äç‚ôÇÔ∏è
                        </div>
                        <div style={{
                            color: '#fff',
                            fontSize: isMobile ? 14 : 14,
                            fontWeight: 500,
                            marginBottom: isMobile ? 0 : 12,
                            textAlign: isMobile ? 'left' : 'center'
                        }}>
                            –°–∞–ø–±–æ—Ä–¥—ã
                        </div>
                    </div>

                    <CounterComponent
                        count={counts.boardCount}
                        onDecrease={() => handleChange('boardCount', -1)}
                        onIncrease={() => handleChange('boardCount', 1)}
                        canDecrease={counts.boardCount > 0}
                        canIncrease={available.board > counts.boardCount}
                    />
                </div>

                {/* –°–∞–ø–±–æ—Ä–¥—ã —Å –∫—Ä–µ—Å–ª–æ–º */}
                <div style={{
                    display: 'flex',
                    flexDirection: isMobile ? 'row' : 'column',
                    alignItems: 'center',
                    backgroundColor: '#2C2C2E',
                    borderRadius: isMobile ? 8 : 12,
                    padding: isMobile ? 16 : 16,
                    minWidth: isMobile ? 'auto' : 120,
                    flex: isMobile ? 'none' : '0 0 auto',
                    width: isMobile ? '100%' : 'auto',
                    position: 'relative',
                    border: counts.boardWithSeatCount > 0 ? '2px solid #007AFF' : '2px solid transparent',
                    justifyContent: isMobile ? 'space-between' : 'center'
                }}>
                    <div style={{
                        position: 'absolute',
                        top: isMobile ? 6 : 8,
                        right: isMobile ? 6 : 8,
                        backgroundColor: available.board_with_seat === 0 ? '#FF4D4F' : '#007AFF',
                        color: '#fff',
                        borderRadius: isMobile ? 6 : 8,
                        padding: isMobile ? '1px 4px' : '2px 6px',
                        fontSize: isMobile ? 10 : 11,
                        fontWeight: 600
                    }}>
                        {available.board_with_seat}
                    </div>

                    <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: isMobile ? 12 : 0,
                        flexDirection: isMobile ? 'row' : 'column'
                    }}>
                        <div style={{
                            fontSize: isMobile ? 32 : 40,
                            marginBottom: isMobile ? 0 : 8,
                        }}>
                            ü™ë
                        </div>
                        <div style={{
                            color: '#fff',
                            fontSize: isMobile ? 14 : 14,
                            fontWeight: 500,
                            marginBottom: isMobile ? 0 : 12,
                            textAlign: isMobile ? 'left' : 'center'
                        }}>
                            –° –∫—Ä–µ—Å–ª–æ–º
                        </div>
                    </div>

                    <CounterComponent
                        count={counts.boardWithSeatCount}
                        onDecrease={() => handleChange('boardWithSeatCount', -1)}
                        onIncrease={() => handleChange('boardWithSeatCount', 1)}
                        canDecrease={counts.boardWithSeatCount > 0}
                        canIncrease={available.board_with_seat > counts.boardWithSeatCount}
                    />
                </div>

                {/* –ü–ª–æ—Ç—ã */}
                <div style={{
                    display: 'flex',
                    flexDirection: isMobile ? 'row' : 'column',
                    alignItems: 'center',
                    backgroundColor: '#2C2C2E',
                    borderRadius: isMobile ? 8 : 12,
                    padding: isMobile ? 16 : 16,
                    minWidth: isMobile ? 'auto' : 120,
                    flex: isMobile ? 'none' : '0 0 auto',
                    width: isMobile ? '100%' : 'auto',
                    position: 'relative',
                    border: counts.raftCount > 0 ? '2px solid #007AFF' : '2px solid transparent',
                    justifyContent: isMobile ? 'space-between' : 'center'
                }}>
                    <div style={{
                        position: 'absolute',
                        top: isMobile ? 6 : 8,
                        right: isMobile ? 6 : 8,
                        backgroundColor: available.raft === 0 ? '#FF4D4F' : '#007AFF',
                        color: '#fff',
                        borderRadius: isMobile ? 6 : 8,
                        padding: isMobile ? '1px 4px' : '2px 6px',
                        fontSize: isMobile ? 10 : 11,
                        fontWeight: 600
                    }}>
                        {available.raft}
                    </div>

                    <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: isMobile ? 12 : 0,
                        flexDirection: isMobile ? 'row' : 'column'
                    }}>
                        <div style={{
                            fontSize: isMobile ? 32 : 40,
                            marginBottom: isMobile ? 0 : 8,
                        }}>
                            üõ∂
                        </div>
                        <div style={{
                            color: '#fff',
                            fontSize: isMobile ? 14 : 14,
                            fontWeight: 500,
                            marginBottom: isMobile ? 0 : 12,
                            textAlign: isMobile ? 'left' : 'center'
                        }}>
                            –ü–ª–æ—Ç—ã
                        </div>
                    </div>

                    <CounterComponent
                        count={counts.raftCount}
                        onDecrease={() => handleChange('raftCount', -1)}
                        onIncrease={() => handleChange('raftCount', 1)}
                        canDecrease={counts.raftCount > 0}
                        canIncrease={available.raft > counts.raftCount}
                    />
                </div>
            </div>

            {error && (
                <div style={{
                    marginTop: 12,
                    padding: 12,
                    backgroundColor: '#FF4D4F20',
                    border: '1px solid #FF4D4F',
                    borderRadius: 8,
                    color: '#FF4D4F',
                    fontSize: 14
                }}>
                    {error}
                </div>
            )}
        </div>
    );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç InventorySelector
const NewInventorySelector: React.FC<NewInventorySelectorProps> = ({ 
    selectedItems, 
    onChange, 
    error,
    plannedDate,
    plannedTime,
    durationInHours,
    bookingId,
    onClose
}) => {
    // –ï—Å–ª–∏ selectedItems –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
    const currentSelectedItems = React.useMemo(() => {
        if (!selectedItems || typeof selectedItems !== 'object' || Array.isArray(selectedItems)) {
            return {};
        }
        return selectedItems;
    }, [selectedItems]);
    // –•—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    const [isMobile, setIsMobile] = useState(false);
    const [shakeCard, setShakeCard] = useState<number | null>(null);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const [inventoryTypes, setInventoryTypes] = useState<InventoryType[]>([]);
    const [loading, setLoading] = useState(true);
    const [availability, setAvailability] = useState<Record<number, number>>({});
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const [isInventoryModalOpen, setIsInventoryModalOpen] = useState(false);
    
    // –î–∞–Ω–Ω—ã–µ –∏–∑ Redux –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const bookingsMap = useAppSelector((state: RootState) => state.bookings.bookings);
    const boards = useAppSelector((state: RootState) => state.boards.boards);
    const seats = useAppSelector((state: RootState) => state.seats.seats);
    const { totalInventory } = useInventoryTotal();
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤
    const flatAllBookings = React.useMemo(() => 
        Object.values(bookingsMap || {}).flat() as Booking[], 
        [bookingsMap]
    );
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    const [presets, setPresets] = useState<InventoryPreset[]>(() => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        const savedPresets = localStorage.getItem('inventoryPresets');
        if (savedPresets) {
            try {
                return JSON.parse(savedPresets);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤:', e);
            }
        }
        
        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã (–ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ, –æ–±–Ω–æ–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤)
        return [];
    });

    useEffect(() => {
        const checkIsMobile = () => {
            setIsMobile(window.innerWidth <= 768);
        };

        checkIsMobile();
        window.addEventListener('resize', checkIsMobile);
        return () => window.removeEventListener('resize', checkIsMobile);
    }, []);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        const loadInventoryTypes = async () => {
            try {
                setLoading(true);
                const response = await inventoryApi.getInventoryTypes();
                const types = response.data.filter(type => type.is_active);
                setInventoryTypes(types);
                
                // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤
                if (types.length > 0 && presets.length === 0) {
                    const defaultPresets = createDefaultPresets(types);
                    setPresets(defaultPresets);
                    localStorage.setItem('inventoryPresets', JSON.stringify(defaultPresets));
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', err);
            } finally {
                setLoading(false);
            }
        };

        loadInventoryTypes();
    }, []);

    // –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    useEffect(() => {
        const calculateAvailability = () => {
            console.log('[InventorySelector] calculateAvailability called with:', {
                plannedDate,
                plannedTime,
                durationInHours,
                inventoryTypesLength: inventoryTypes.length
            });

            if (!plannedDate || !plannedTime || !durationInHours || inventoryTypes.length === 0) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
                const generalAvailability: Record<number, number> = {};
                inventoryTypes.forEach(type => {
                    generalAvailability[type.id] = type.available_count || 0;
                });
                console.log('[InventorySelector] Using general availability (no time data):', generalAvailability);
                setAvailability(generalAvailability);
                return;
            }

            try {
                // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                const [hoursStr, minutesStr] = plannedTime.split(':');
                const hours = parseInt(hoursStr, 10);
                const minutes = parseInt(minutesStr, 10);

                if (isNaN(hours) || isNaN(minutes)) {
                    console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:', plannedTime);
                    return;
                }

                let requestedDate = parseISO(plannedDate);
                if (!isValidDate(requestedDate)) {
                    console.error('–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞:', plannedDate);
                    return;
                }
                
                requestedDate = new Date(
                    requestedDate.getFullYear(), 
                    requestedDate.getMonth(), 
                    requestedDate.getDate(), 
                    hours, 
                    minutes
                );
                
                if (!isValidDate(requestedDate)) {
                    console.error('–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è:', plannedDate, plannedTime);
                    return;
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ DesktopBookingForm
                const effectiveInventory = totalInventory > 0 ? totalInventory : Math.max(boards.length, 12);
                
                const availabilityInfo = getDetailedAvailabilityInfo(
                    requestedDate,
                    durationInHours,
                    flatAllBookings,
                    effectiveInventory, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∫–∞–∫ –ª–∏–º–∏—Ç –¥–æ—Å–æ–∫
                    effectiveInventory, // –ò –∫–∞–∫ –ª–∏–º–∏—Ç –∫—Ä–µ—Å–µ–ª (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–æ–π)
                    bookingId // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                );

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                const calculatedAvailability: Record<number, number> = {};
                
                // –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ "–≤–ª–∏—è—é—â–∏—Ö" —Ç–∏–ø–æ–≤ (SUP –¥–æ—Å–æ–∫)
                const selectedAffectingTypes = Object.entries(currentSelectedItems)
                    .filter(([typeIdStr]) => {
                        const typeId = parseInt(typeIdStr);
                        const type = inventoryTypes.find(t => t.id === typeId);
                        return type?.affects_availability || false;
                    })
                    .reduce((sum, [, count]) => sum + (Number(count) || 0), 0);
                
                inventoryTypes.forEach(type => {
                    if (type.affects_availability) {
                        // –î–ª—è —Ç–∏–ø–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (SUP –¥–æ—Å–∫–∏):
                        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
                        const maxByTimeSlot = Math.max(0, availabilityInfo.availableBoards);
                        
                        // –£—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥—Ä—É–≥–∏—Ö –≤–ª–∏—è—é—â–∏—Ö —Ç–∏–ø–æ–≤
                        const selectedOtherAffectingTypes = Object.entries(currentSelectedItems)
                            .filter(([typeIdStr]) => {
                                const otherTypeId = parseInt(typeIdStr);
                                if (otherTypeId === type.id) return false;
                                const otherType = inventoryTypes.find(t => t.id === otherTypeId);
                                return otherType?.affects_availability || false;
                            })
                            .reduce((sum, [, count]) => sum + (Number(count) || 0), 0);
                        
                        const availableByTimeSlot = Math.max(0, maxByTimeSlot - selectedOtherAffectingTypes);
                        
                        // –ë–µ—Ä–µ–º –º–∏–Ω–∏–º—É–º –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
                        const availableForType = Math.min(type.available_count || 0, availableByTimeSlot);
                        calculatedAvailability[type.id] = availableForType;
                    } else {
                        // –î–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ (–∂–∏–ª–µ—Ç—ã, –≤–µ—Å–ª–∞ –∏ —Ç.–¥.):
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        calculatedAvailability[type.id] = type.available_count || 0;
                    }
                });

                console.log('[InventorySelector] Calculated availability:', {
                    requestedDate: requestedDate.toISOString(),
                    durationInHours,
                    effectiveInventory,
                    availabilityInfo,
                    calculatedAvailability,
                    currentSelectedItems,
                    inventoryTypesWithCounts: inventoryTypes.map(t => ({
                        id: t.id,
                        name: t.display_name,
                        available_count: t.available_count,
                        affects_availability: t.affects_availability
                    }))
                });

                setAvailability(calculatedAvailability);
                
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', err);
                // Fallback –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                const fallbackAvailability: Record<number, number> = {};
                inventoryTypes.forEach(type => {
                    fallbackAvailability[type.id] = type.available_count || 0;
                });
                setAvailability(fallbackAvailability);
            }
        };

        calculateAvailability();
    }, [
        plannedDate, 
        plannedTime, 
        durationInHours, 
        inventoryTypes, 
        bookingId, 
        flatAllBookings, 
        totalInventory, 
        boards.length, 
        currentSelectedItems
    ]);

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const createDefaultPresets = (types: InventoryType[]): InventoryPreset[] => {
        const presets: InventoryPreset[] = [];
        
        // –ò—â–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã
        const supBoard = types.find(t => t.name.toLowerCase().includes('sup') || t.name.toLowerCase().includes('board'));
        const kayak = types.find(t => t.name.toLowerCase().includes('kayak') || t.name.toLowerCase().includes('–∫–∞—è–∫'));
        
        if (supBoard) {
            presets.push({
                id: 'default-1',
                name: '1 —Å–∞–ø–±–æ—Ä–¥',
                boardCount: 0, // —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                boardWithSeatCount: 0,
                raftCount: 0,
                selectedItems: { [supBoard.id]: 1 },
                isDefault: true,
                description: '–û–¥–∏–Ω —Å–∞–ø–±–æ—Ä–¥ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–Ω–∏—è',
                emoji: supBoard.icon_name || 'üèÑ‚Äç‚ôÇÔ∏è'
            });
            
            presets.push({
                id: 'default-2',
                name: '2 —Å–∞–ø–±–æ—Ä–¥–∞',
                boardCount: 0,
                boardWithSeatCount: 0, 
                raftCount: 0,
                selectedItems: { [supBoard.id]: 2 },
                isDefault: true,
                description: '–î–≤–∞ —Å–∞–ø–±–æ—Ä–¥–∞ –¥–ª—è –ø–∞—Ä—ã –∏–ª–∏ –¥—Ä—É–∑–µ–π',
                emoji: 'üë´'
            });
        }
        
        if (kayak) {
            presets.push({
                id: 'default-3',
                name: '1 –∫–∞—è–∫',
                boardCount: 0,
                boardWithSeatCount: 0,
                raftCount: 0,
                selectedItems: { [kayak.id]: 1 },
                isDefault: true,
                description: '–û–¥–∏–Ω –∫–∞—è–∫ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ —Å–ø–ª–∞–≤–∞',
                emoji: kayak.icon_name || 'üõ∂'
            });
        }

        return presets;
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    useEffect(() => {
        if (presets.length > 0) {
            localStorage.setItem('inventoryPresets', JSON.stringify(presets));
        }
    }, [presets]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤
    const handlePresetsChange = (newPresets: InventoryPreset[]) => {
        setPresets(newPresets);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–∞
    const handlePresetSelect = (preset: InventoryPreset) => {
        if (preset.selectedItems) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å selectedItems
            onChange(preset.selectedItems);
        } else {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π
            const legacyItems: Record<number, number> = {};
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            onChange(legacyItems);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const handleChange = (typeId: number, delta: number) => {
        const currentCount = currentSelectedItems[typeId] || 0;
        const newCount = Math.max(0, currentCount + delta);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏
        if (delta > 0) {
            const type = inventoryTypes.find(t => t.id === typeId);
            if (!type) return;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
            const availableForType = availability[typeId] || 0;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            if (newCount > availableForType) {
                // –í—ã–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤—Å—Ç—Ä—è—Ö–∏–≤–∞–Ω–∏—è
                setShakeCard(typeId);
                setTimeout(() => setShakeCard(null), 600);
                return; // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–∏–ø–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if (type.affects_availability && plannedDate && plannedTime && durationInHours) {
                // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö "–≤–ª–∏—è—é—â–∏—Ö" —Ç–∏–ø–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                const totalAffectingAfterChange = Object.entries(currentSelectedItems)
                    .filter(([typeIdStr]) => {
                        const otherTypeId = parseInt(typeIdStr);
                        const otherType = inventoryTypes.find(t => t.id === otherTypeId);
                        return otherType?.affects_availability || false;
                    })
                    .reduce((sum, [typeIdStr, count]) => {
                        const otherTypeId = parseInt(typeIdStr);
                        const countToUse = otherTypeId === typeId ? newCount : (Number(count) || 0);
                        return sum + countToUse;
                    }, 0);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –≤–ª–∏—è—é—â–∏—Ö —Ç–∏–ø–æ–≤
                try {
                    const [hoursStr, minutesStr] = plannedTime.split(':');
                    const hours = parseInt(hoursStr, 10);
                    const minutes = parseInt(minutesStr, 10);
                    
                    if (!isNaN(hours) && !isNaN(minutes)) {
                        let requestedDate = parseISO(plannedDate);
                        if (isValidDate(requestedDate)) {
                            requestedDate = new Date(
                                requestedDate.getFullYear(), 
                                requestedDate.getMonth(), 
                                requestedDate.getDate(), 
                                hours, 
                                minutes
                            );
                            
                            if (isValidDate(requestedDate)) {
                                const effectiveInventory = totalInventory > 0 ? totalInventory : Math.max(boards.length, 12);
                                const availabilityInfo = getDetailedAvailabilityInfo(
                                    requestedDate,
                                    durationInHours,
                                    flatAllBookings,
                                    effectiveInventory,
                                    effectiveInventory,
                                    bookingId
                                );
                                
                                if (totalAffectingAfterChange > availabilityInfo.availableBoards) {
                                    // –ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
                                    setShakeCard(typeId);
                                    setTimeout(() => setShakeCard(null), 600);
                                    return;
                                }
                            }
                        }
                    }
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞:', err);
                }
            }
        }
        
        const newSelectedItems = { ...currentSelectedItems };
        if (newCount === 0) {
            delete newSelectedItems[typeId]; // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –µ—Å–ª–∏ 0
        } else {
            newSelectedItems[typeId] = newCount;
        }
        
        onChange(newSelectedItems);
    };

    const handleClearAll = () => {
        onChange({});
    };

    const getTotalSelected = () => {
        return Object.values(currentSelectedItems).reduce((sum, count) => sum + count, 0);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
    const handleManageInventory = () => {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
        setIsInventoryModalOpen(true);
    };

    const handleInventoryModalClose = () => {
        setIsInventoryModalOpen(false);
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞
        // —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
        const loadInventoryTypes = async () => {
            try {
                const response = await inventoryApi.getInventoryTypes();
                const types = response.data.filter(type => type.is_active);
                setInventoryTypes(types);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', err);
            }
        };
        loadInventoryTypes();
    };

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const CounterComponent = ({ 
        count, 
        onDecrease, 
        onIncrease, 
        canDecrease, 
        canIncrease 
    }: {
        count: number;
        onDecrease: () => void;
        onIncrease: () => void;
        canDecrease: boolean;
        canIncrease: boolean;
    }) => (
        <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: isMobile ? 8 : 12,
            backgroundColor: '#1C1C1E',
            borderRadius: isMobile ? 6 : 8,
            padding: isMobile ? '4px 6px' : '6px 8px'
        }}>
            <motion.button 
                type="button" 
                onClick={onDecrease}
                disabled={!canDecrease}
                whileHover={canDecrease ? { 
                    scale: 1.1, 
                    backgroundColor: '#0056CC',
                    boxShadow: '0 0 15px rgba(0, 122, 255, 0.4)'
                } : {}}
                whileTap={canDecrease ? { 
                    scale: 0.95,
                    backgroundColor: '#004499'
                } : {}}
                animate={!canDecrease ? { 
                    opacity: 0.5,
                    scale: 1
                } : { 
                    opacity: 1,
                    scale: 1
                }}
                transition={{ 
                    type: "spring", 
                    stiffness: 400, 
                    damping: 25 
                }}
                style={{
                    width: isMobile ? 32 : 28,
                    height: isMobile ? 32 : 28,
                    borderRadius: 6,
                    border: 'none',
                    backgroundColor: !canDecrease ? '#3C3C3E' : '#007AFF',
                    color: '#fff',
                    fontSize: isMobile ? 18 : 16,
                    fontWeight: 600,
                    cursor: !canDecrease ? 'not-allowed' : 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    userSelect: 'none',
                    WebkitUserSelect: 'none',
                    MozUserSelect: 'none',
                    msUserSelect: 'none',
                    WebkitTouchCallout: 'none',
                    WebkitTapHighlightColor: 'transparent'
                }}
            >
                ‚àí
            </motion.button>
            
            <div style={{
                minWidth: isMobile ? 16 : 20,
                textAlign: 'center',
                position: 'relative',
                overflow: 'hidden',
                height: isMobile ? 20 : 24
            }}>
                <AnimatePresence mode="wait">
                    <motion.span
                        key={count}
                        initial={{ y: -30, opacity: 0 }}
                        animate={{ y: 0, opacity: 1 }}
                        exit={{ y: 30, opacity: 0 }}
                        transition={{ 
                            type: "spring", 
                            stiffness: 400, 
                            damping: 25,
                            duration: 0.3
                        }}
                        style={{
                            color: '#fff',
                            fontSize: isMobile ? 16 : 18,
                            fontWeight: 600,
                            position: 'absolute',
                            width: '100%',
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center'
                        }}
                    >
                        {count}
                    </motion.span>
                </AnimatePresence>
            </div>
            
            <motion.button 
                type="button" 
                onClick={onIncrease}
                disabled={!canIncrease}
                whileHover={canIncrease ? { 
                    scale: 1.1, 
                    backgroundColor: '#0056CC',
                    boxShadow: '0 0 15px rgba(0, 122, 255, 0.4)'
                } : {}}
                whileTap={canIncrease ? { 
                    scale: 0.95,
                    backgroundColor: '#004499'
                } : {}}
                animate={!canIncrease ? { 
                    opacity: 0.5,
                    scale: 1
                } : { 
                    opacity: 1,
                    scale: 1
                }}
                transition={{ 
                    type: "spring", 
                    stiffness: 400, 
                    damping: 25 
                }}
                style={{
                    width: isMobile ? 32 : 28,
                    height: isMobile ? 32 : 28,
                    borderRadius: 6,
                    border: 'none',
                    backgroundColor: !canIncrease ? '#3C3C3E' : '#007AFF',
                    color: '#fff',
                    fontSize: isMobile ? 18 : 16,
                    fontWeight: 600,
                    cursor: !canIncrease ? 'not-allowed' : 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    userSelect: 'none',
                    WebkitUserSelect: 'none',
                    MozUserSelect: 'none',
                    msUserSelect: 'none',
                    WebkitTouchCallout: 'none',
                    WebkitTapHighlightColor: 'transparent'
                }}
            >
                +
            </motion.button>
        </div>
    );

    if (loading) {
        return (
            <div style={{ 
                background: '#23232a', 
                borderRadius: isMobile ? 12 : 16, 
                padding: isMobile ? 16 : 20, 
                margin: '8px 0',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                minHeight: 120
            }}>
                <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: 12,
                    color: '#86868B'
                }}>
                    <div style={{
                        width: 20,
                        height: 20,
                        border: '2px solid #3C3C3E',
                        borderTop: '2px solid #007AFF',
                        borderRadius: '50%',
                        animation: 'spin 1s linear infinite'
                    }} />
                    –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...
                </div>
                <style>{`
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                `}</style>
            </div>
        );
    }

    if (inventoryTypes.length === 0) {
        return (
            <div style={{ 
                background: '#23232a', 
                borderRadius: isMobile ? 12 : 16, 
                padding: isMobile ? 20 : 24, 
                margin: '8px 0',
                textAlign: 'center'
            }}>
                <div style={{ 
                    fontSize: isMobile ? 40 : 48,
                    marginBottom: 16
                }}>
                    üì¶
                </div>
                <div style={{ 
                    color: '#fff',
                    fontSize: isMobile ? 16 : 18,
                    fontWeight: 600,
                    marginBottom: 8
                }}>
                    –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                </div>
                <div style={{ 
                    color: '#86868B',
                    fontSize: isMobile ? 14 : 15,
                    marginBottom: 20,
                    lineHeight: 1.4
                }}>
                    –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ<br />
                    —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ —Å–∏—Å—Ç–µ–º—É
                </div>
                
                <motion.button
                    whileHover={{ 
                        scale: 1.02,
                        backgroundColor: '#0056CC',
                        boxShadow: '0 8px 25px rgba(0, 122, 255, 0.3)'
                    }}
                    whileTap={{ scale: 0.98 }}
                    transition={{ type: "spring", stiffness: 400, damping: 25 }}
                    onClick={handleManageInventory}
                    style={{
                        background: 'linear-gradient(135deg, #007AFF 0%, #0056CC 100%)',
                        border: 'none',
                        borderRadius: isMobile ? 8 : 10,
                        padding: isMobile ? '12px 20px' : '14px 24px',
                        color: '#fff',
                        fontSize: isMobile ? 14 : 15,
                        fontWeight: 600,
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        gap: 8,
                        margin: '0 auto',
                        boxShadow: '0 4px 15px rgba(0, 122, 255, 0.2)',
                        userSelect: 'none',
                        WebkitUserSelect: 'none',
                        MozUserSelect: 'none',
                        msUserSelect: 'none',
                        WebkitTouchCallout: 'none',
                        WebkitTapHighlightColor: 'transparent'
                    }}
                >
                    <span style={{ fontSize: 16 }}>‚öôÔ∏è</span>
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
                </motion.button>
                
                <div style={{ 
                    color: '#5A5A5E',
                    fontSize: isMobile ? 12 : 13,
                    marginTop: 12,
                    fontStyle: 'italic'
                }}>
                    –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                </div>
            </div>
        );
    }

    return (
        <div style={{ 
            background: '#23232a', 
            borderRadius: isMobile ? 12 : 16, 
            padding: isMobile ? 16 : 20, 
            margin: '8px 0',
            userSelect: 'none',
            WebkitUserSelect: 'none',
            MozUserSelect: 'none',
            msUserSelect: 'none',
            WebkitTouchCallout: 'none',
            WebkitTapHighlightColor: 'transparent'
        }}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ */}
            <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                marginBottom: isMobile ? 12 : 16
            }}>
                <h3 style={{
                    margin: 0,
                    color: '#fff',
                    fontSize: isMobile ? 14 : (inventoryTypes.length === 1 ? 18 : 16),
                    fontWeight: inventoryTypes.length === 1 ? 700 : 600,
                    textShadow: inventoryTypes.length === 1 ? '0 1px 2px rgba(0, 0, 0, 0.3)' : 'none'
                }}>
                    {inventoryTypes.length === 1 ? 
                        `üéØ ${inventoryTypes[0].display_name}` : 
                        'üõª –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'
                    }
                </h3>
                <AnimatePresence>
                    {getTotalSelected() > 0 && (
                        <motion.button
                            initial={{ opacity: 0, scale: 0.8 }}
                            animate={{ opacity: 1, scale: 1 }}
                            exit={{ opacity: 0, scale: 0.8 }}
                            whileHover={{ 
                                scale: 1.05,
                                backgroundColor: '#FF4D4F20'
                            }}
                            whileTap={{ scale: 0.95 }}
                            transition={{ type: "spring", stiffness: 400, damping: 25 }}
                            type="button"
                            onClick={handleClearAll}
                            style={{
                                background: 'none',
                                border: '1px solid #FF4D4F',
                                borderRadius: 6,
                                padding: '4px 8px',
                                color: '#FF4D4F',
                                fontSize: 12,
                                cursor: 'pointer',
                                userSelect: 'none',
                                WebkitUserSelect: 'none',
                                MozUserSelect: 'none',
                                msUserSelect: 'none',
                                WebkitTouchCallout: 'none',
                                WebkitTapHighlightColor: 'transparent'
                            }}
                            title="–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –≤—ã–±–æ—Ä"
                        >
                            –û—á–∏—Å—Ç–∏—Ç—å
                        </motion.button>
                    )}
                </AnimatePresence>
            </div>

            {/* TODO: –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PresetManager */}
            {/* {presets.length > 0 && (
                <PresetManager
                    presets={presets}
                    onPresetsChange={handlePresetsChange}
                    onPresetSelect={handlePresetSelect}
                    currentSelection={currentSelectedItems}
                />
            )} */}

            {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º */}
            <div style={{ 
                display: 'flex', 
                gap: isMobile ? 12 : 16, 
                alignItems: inventoryTypes.length === 1 ? 'center' : 'flex-start', 
                justifyContent: inventoryTypes.length === 1 ? 'center' : (isMobile ? 'stretch' : 'flex-start'),
                flexWrap: 'wrap',
                flexDirection: isMobile ? 'column' : 'row',
                // –î–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
                padding: inventoryTypes.length === 1 ? (isMobile ? '20px 0' : '30px 0') : '0'
            }}>
                {inventoryTypes.map((type, index) => {
                    const count = currentSelectedItems[type.id] || 0;
                    const maxAvailable = availability[type.id] || 0;
                    const remainingAvailable = Math.max(0, maxAvailable - count); // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
                    const isSingleItem = inventoryTypes.length === 1;
                    
                    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    console.log(`[InventorySelector] Type: ${type.display_name}`, {
                        typeId: type.id,
                        available_count: type.available_count,
                        maxAvailable,
                        count,
                        remainingAvailable,
                        availability: availability[type.id]
                    });
                    
                    return (
                        <motion.div 
                            key={type.id}
                            initial={{ 
                                opacity: 0, 
                                y: isSingleItem ? 30 : 20,
                                scale: isSingleItem ? 0.95 : 1
                            }}
                            animate={shakeCard === type.id ? {
                                x: [-10, 10, -10, 10, 0],
                                opacity: 1,
                                y: 0,
                                scale: 1
                            } : { 
                                opacity: 1, 
                                y: 0,
                                x: 0,
                                scale: 1
                            }}
                            transition={shakeCard === type.id ? {
                                duration: 0.6,
                                ease: "easeInOut"
                            } : { 
                                delay: isSingleItem ? 0.2 : index * 0.1, 
                                duration: isSingleItem ? 0.6 : 0.4,
                                type: isSingleItem ? "spring" : "tween",
                                stiffness: isSingleItem ? 200 : 400,
                                damping: isSingleItem ? 20 : 25
                            }}
                            whileHover={{ 
                                scale: isSingleItem ? 1.03 : 1.02,
                                boxShadow: count > 0 
                                    ? `0 ${isSingleItem ? 12 : 8}px ${isSingleItem ? 35 : 25}px ${type.color || '#007AFF'}${isSingleItem ? '40' : '33'}` 
                                    : `0 ${isSingleItem ? 12 : 8}px ${isSingleItem ? 35 : 25}px rgba(255, 255, 255, ${isSingleItem ? '0.15' : '0.1'})`
                            }}
                            style={{
                                display: 'flex',
                                flexDirection: isMobile || isSingleItem ? 'row' : 'column',
                                alignItems: 'center',
                                backgroundColor: isSingleItem ? '#2E2E30' : '#2C2C2E',
                                borderRadius: isMobile ? 8 : (isSingleItem ? 16 : 12),
                                padding: isMobile ? (isSingleItem ? 20 : 16) : (isSingleItem ? 24 : 16),
                                minWidth: isMobile ? 'auto' : (isSingleItem ? 280 : 120),
                                maxWidth: isSingleItem ? (isMobile ? '100%' : 400) : 'auto',
                                flex: isMobile ? 'none' : (isSingleItem ? '0 0 auto' : '0 0 auto'),
                                width: isMobile ? '100%' : 'auto',
                                position: 'relative',
                                border: count > 0 ? `${isSingleItem ? 3 : 2}px solid ${type.color || '#007AFF'}` : `${isSingleItem ? 3 : 2}px solid transparent`,
                                justifyContent: (isMobile || isSingleItem) ? 'space-between' : 'center',
                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                                background: isSingleItem ? 
                                    `linear-gradient(135deg, #2E2E30 0%, #2A2A2C 50%, #262628 100%)` : 
                                    '#2C2C2E',
                                boxShadow: isSingleItem ? 
                                    '0 8px 32px rgba(0, 0, 0, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.1)' : 
                                    'none'
                            }}>
                            
                            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ */}
                            <motion.div 
                                animate={(remainingAvailable === 0 && type.affects_availability) ? {
                                    scale: [1, 1.1, 1],
                                    backgroundColor: [type.color || '#007AFF', '#FF4D4F', type.color || '#007AFF']
                                } : {}}
                                transition={{ 
                                    duration: 1.5, 
                                    repeat: (remainingAvailable === 0 && type.affects_availability) ? Infinity : 0,
                                    ease: "easeInOut"
                                }}
                                style={{
                                    position: 'absolute',
                                    top: isMobile ? 6 : (isSingleItem ? 12 : 8),
                                    right: isMobile ? 6 : (isSingleItem ? 12 : 8),
                                    backgroundColor: (remainingAvailable === 0 && type.affects_availability) ? '#FF4D4F' : 
                                                   (remainingAvailable === 0 && !type.affects_availability) ? '#FF9500' : 
                                                   (type.color || '#007AFF'),
                                    color: '#fff',
                                    borderRadius: isMobile ? 6 : (isSingleItem ? 10 : 8),
                                    padding: isMobile ? '1px 4px' : (isSingleItem ? '4px 8px' : '2px 6px'),
                                    fontSize: isMobile ? 10 : (isSingleItem ? 13 : 11),
                                    fontWeight: 600,
                                    boxShadow: isSingleItem ? '0 2px 8px rgba(0, 0, 0, 0.3)' : 'none',
                                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                                    background: isSingleItem ? 
                                        `linear-gradient(135deg, ${remainingAvailable === 0 ? '#FF4D4F' : (type.color || '#007AFF')}, ${remainingAvailable === 0 ? '#FF4D4F' : (type.color || '#007AFF')}CC)` :
                                        (remainingAvailable === 0 ? '#FF4D4F' : (type.color || '#007AFF'))
                                }}
                            >
                                {isSingleItem ? `${remainingAvailable} —à—Ç` : remainingAvailable}
                            </motion.div>

                            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
                            {isSingleItem && (
                                <motion.div
                                    initial={{ opacity: 0, scale: 0 }}
                                    animate={{ opacity: 0.6, scale: 1 }}
                                    transition={{ delay: 0.4, duration: 0.5 }}
                                    style={{
                                        position: 'absolute',
                                        top: isMobile ? 6 : 12,
                                        left: isMobile ? 6 : 12,
                                        width: 8,
                                        height: 8,
                                        borderRadius: '50%',
                                        background: `linear-gradient(45deg, ${type.color || '#007AFF'}, #fff)`,
                                        boxShadow: '0 0 10px rgba(255, 255, 255, 0.3)'
                                    }}
                                />
                            )}

                            {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–∫–æ–Ω–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ */}
                            <div style={{
                                display: 'flex',
                                alignItems: 'center',
                                gap: isMobile ? 12 : (isSingleItem ? 20 : 0),
                                flexDirection: (isMobile || isSingleItem) ? 'row' : 'column'
                            }}>
                                {/* –ò–∫–æ–Ω–∫–∞ */}
                                <div style={{
                                    fontSize: isMobile ? 32 : (isSingleItem ? 56 : 40),
                                    marginBottom: (isMobile || isSingleItem) ? 0 : 8,
                                    filter: remainingAvailable === 0 ? 'grayscale(100%) opacity(0.5)' : 'none',
                                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                                    textShadow: isSingleItem ? '0 2px 8px rgba(0, 0, 0, 0.3)' : 'none'
                                }}>
                                    {type.icon_name || 'üì¶'}
                                </div>
                                
                                {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
                                <div style={{
                                    display: 'flex',
                                    flexDirection: 'column',
                                    alignItems: (isMobile || isSingleItem) ? 'flex-start' : 'center'
                                }}>
                                    <div style={{
                                        color: remainingAvailable === 0 ? '#86868B' : '#fff',
                                        fontSize: isMobile ? 14 : (isSingleItem ? 20 : 14),
                                        fontWeight: isSingleItem ? 600 : 500,
                                        marginBottom: (isMobile || !isSingleItem) ? 0 : 4,
                                        textAlign: (isMobile || isSingleItem) ? 'left' : 'center',
                                        textShadow: isSingleItem ? '0 1px 2px rgba(0, 0, 0, 0.5)' : 'none'
                                    }}>
                                        {type.display_name}
                                    </div>
                                    
                                    {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
                                    {isSingleItem && type.description && (
                                        <div style={{
                                            color: '#86868B',
                                            fontSize: isMobile ? 12 : 14,
                                            fontWeight: 400,
                                            marginTop: 2,
                                            textAlign: 'left'
                                        }}>
                                            {type.description}
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å—á–µ—Ç—á–∏–∫ */}
                            <div style={{
                                // –î–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ–ª–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫—Ä—É–ø–Ω–µ–µ
                                transform: isSingleItem ? 'scale(1.2)' : 'scale(1)'
                            }}>
                                <CounterComponent
                                    count={count}
                                    onDecrease={() => handleChange(type.id, -1)}
                                    onIncrease={() => handleChange(type.id, 1)}
                                    canDecrease={count > 0}
                                    canIncrease={remainingAvailable > 0}
                                />
                            </div>
                        </motion.div>
                    );
                })}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è */}
            <div style={{
                marginTop: 16,
                padding: isMobile ? 12 : 16,
                backgroundColor: '#1C1C1E',
                borderRadius: 8,
                border: '1px solid #3C3C3E',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                gap: 12
            }}>
                <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: 12,
                    flex: 1
                }}>
                    <div style={{ fontSize: 20 }}>üí°</div>
                    <div>
                        <div style={{
                            color: '#fff',
                            fontSize: isMobile ? 13 : 14,
                            fontWeight: 500,
                            marginBottom: 2
                        }}>
                            –ù—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è?
                        </div>
                        <div style={{
                            color: '#86868B',
                            fontSize: isMobile ? 11 : 12
                        }}>
                            –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ —Å–∏—Å—Ç–µ–º—É
                        </div>
                    </div>
                </div>
                
                <motion.button
                    whileHover={{ 
                        scale: 1.05,
                        backgroundColor: '#34C759',
                        boxShadow: '0 4px 15px rgba(52, 199, 89, 0.3)'
                    }}
                    whileTap={{ scale: 0.95 }}
                    transition={{ type: "spring", stiffness: 400, damping: 25 }}
                    onClick={handleManageInventory}
                    style={{
                        background: 'linear-gradient(135deg, #30D158 0%, #28A745 100%)',
                        border: 'none',
                        borderRadius: 6,
                        padding: isMobile ? '8px 12px' : '10px 16px',
                        color: '#fff',
                        fontSize: isMobile ? 12 : 13,
                        fontWeight: 600,
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        gap: 6,
                        boxShadow: '0 2px 8px rgba(52, 199, 89, 0.2)',
                        userSelect: 'none',
                        WebkitUserSelect: 'none',
                        MozUserSelect: 'none',
                        msUserSelect: 'none',
                        WebkitTouchCallout: 'none',
                        WebkitTapHighlightColor: 'transparent'
                    }}
                >
                    <span style={{ fontSize: isMobile ? 12 : 14 }}>‚ûï</span>
                    {isMobile ? '–î–æ–±–∞–≤–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π'}
                </motion.button>
            </div>

            {/* –û—à–∏–±–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å */}
            {error && (
                <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    style={{
                        marginTop: 12,
                        padding: 12,
                        backgroundColor: '#FF4D4F20',
                        border: '1px solid #FF4D4F',
                        borderRadius: 8,
                        color: '#FF4D4F',
                        fontSize: 14
                    }}
                >
                    {error}
                </motion.div>
            )}

            {/* –ú–æ–¥–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º */}
            <DesktopInventoryModal
                isOpen={isInventoryModalOpen}
                onClose={handleInventoryModalClose}
            />
        </div>
    );
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç InventorySelector
const InventorySelector: React.FC<InventorySelectorProps> = (props) => {
    if (isLegacyProps(props)) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º
        return <LegacyInventorySelectorAdapter {...props} />;
    } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        return <NewInventorySelector {...props} />;
    }
};

export default InventorySelector; 