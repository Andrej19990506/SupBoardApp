import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

export interface InventoryPreset {
    id: string;
    name: string;
    boardCount: number; // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏
    boardWithSeatCount: number; // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏
    raftCount: number; // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏
    selectedItems?: Record<number, number>; // –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: typeId -> quantity
    isDefault?: boolean;
    isPopular?: boolean;
    usageCount?: number;
    createdBy?: string;
    createdAt?: string;
    description?: string;
    emoji?: string;
}

interface PresetManagerProps {
    presets: InventoryPreset[];
    onPresetsChange: (presets: InventoryPreset[]) => void;
    currentCounts: {
        boardCount: number;
        boardWithSeatCount: number;
        raftCount: number;
    };
    available: {
        board: number;
        board_with_seat: number;
        raft: number;
    };
    onPresetSelect: (preset: InventoryPreset) => void;
    isMobile?: boolean;
}

const PresetManager: React.FC<PresetManagerProps> = ({
    presets,
    onPresetsChange,
    currentCounts,
    available,
    onPresetSelect,
    isMobile = false
}) => {
    const [showCreateForm, setShowCreateForm] = useState(false);
    const [editingPreset, setEditingPreset] = useState<InventoryPreset | null>(null);
    const [newPresetName, setNewPresetName] = useState('');
    const [newPresetDescription, setNewPresetDescription] = useState('');

    const [selectedEmoji, setSelectedEmoji] = useState('‚ö°');
    const [showEmojiPicker, setShowEmojiPicker] = useState(false);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (showEmojiPicker) {
                const target = event.target as Element;
                if (!target.closest('[data-emoji-picker]')) {
                    setShowEmojiPicker(false);
                }
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, [showEmojiPicker]);

    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–æ–≤
    const availableEmojis = [
        '‚ö°', 'üî•', '‚≠ê', 'üíé', 'üéØ', 'üèÜ', 'üöÄ', 'üí´', '‚ú®', 'üåü',
        'üëë', 'üé™', 'üé®', 'üé≠', 'üé™', 'üéä', 'üéâ', 'üéà', 'üéÅ', 'üèÖ',
        'üåä', 'üèÑ‚Äç‚ôÇÔ∏è', 'üèÑ‚Äç‚ôÄÔ∏è', 'üö§', '‚õµ', 'üèñÔ∏è', 'üåÖ', 'üåû', '‚òÄÔ∏è', 'üå§Ô∏è',
        'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'üë´', 'üë¨', 'üë≠', 'üë∂', 'üßí', 'üë¶', 'üëß', 'üë®', 'üë©',
        'üí™', 'ü§ù', 'üëç', '‚úåÔ∏è', 'ü§ü', 'üëå', 'ü§û', 'üôå', 'üëè', 'ü§ó'
    ];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ—Å–µ—Ç–∞
    const isPresetAvailable = (preset: InventoryPreset) => {
        if (!available) return true; // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        
        const totalNeededBoards = preset.boardCount + preset.boardWithSeatCount + (preset.raftCount * 2);
        return preset.boardCount <= available.board && 
               preset.boardWithSeatCount <= available.board_with_seat && 
               preset.raftCount <= available.raft &&
               totalNeededBoards <= Math.min(available.board, available.board_with_seat, available.raft * 2);
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ—Å–µ—Ç —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º
    const isCurrentSelection = (preset: InventoryPreset) => {
        return currentCounts.boardCount === preset.boardCount &&
               currentCounts.boardWithSeatCount === preset.boardWithSeatCount &&
               currentCounts.raftCount === preset.raftCount;
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
    const handleCreatePreset = () => {
        if (!newPresetName.trim()) return;

        const newPreset: InventoryPreset = {
            id: Date.now().toString(),
            name: newPresetName.trim(),
            description: newPresetDescription.trim() || undefined,
            boardCount: currentCounts.boardCount,
            boardWithSeatCount: currentCounts.boardWithSeatCount,
            raftCount: currentCounts.raftCount,

            createdBy: 'current_user', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            createdAt: new Date().toISOString(),
            usageCount: 0,
            emoji: selectedEmoji
        };

        onPresetsChange([...presets, newPreset]);
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        setNewPresetName('');
        setNewPresetDescription('');
        setSelectedEmoji('‚ö°');
        setShowEmojiPicker(false);
        setShowCreateForm(false);
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
    const handleDeletePreset = (presetId: string) => {
        onPresetsChange(presets.filter(p => p.id !== presetId));
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const handlePresetClick = (preset: InventoryPreset) => {
        if (!isPresetAvailable(preset)) return;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–æ–º 99
        const updatedPresets = presets.map(p => 
            p.id === preset.id 
                ? { ...p, usageCount: Math.min((p.usageCount || 0) + 1, 99) }
                : p
        );
        onPresetsChange(updatedPresets);
        onPresetSelect(preset);
    };

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const sortedPresets = [...presets].sort((a, b) => {
        if (a.isDefault && !b.isDefault) return -1;
        if (!a.isDefault && b.isDefault) return 1;
        if (a.isPopular && !b.isPopular) return -1;
        if (!a.isPopular && b.isPopular) return 1;
        return (b.usageCount || 0) - (a.usageCount || 0);
    });

    return (
        <div style={{
            marginTop: isMobile ? 12 : 16,
            padding: isMobile ? 10 : 12,
            backgroundColor: '#1C1C1E',
            borderRadius: isMobile ? 6 : 8,
            border: '1px solid #3C3C3E'
        }}>
            <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                marginBottom: isMobile ? 8 : 10
            }}>
                <div style={{
                    color: '#86868B',
                    fontSize: isMobile ? 11 : 12,
                    fontWeight: 500
                }}>
                    ‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:
                </div>
                
                <div style={{ display: 'flex', gap: 6 }}>
                    <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => setShowCreateForm(!showCreateForm)}
                        style={{
                            background: 'none',
                            border: '1px solid #007AFF',
                            borderRadius: 4,
                            padding: '2px 6px',
                            color: '#007AFF',
                            fontSize: 10,
                            cursor: 'pointer',
                            userSelect: 'none'
                        }}
                        title="–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞"
                    >
                        + –°–æ–∑–¥–∞—Ç—å
                    </motion.button>
                    
                    {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ */}
                    {presets.some(p => p.usageCount && p.usageCount > 0) && (
                        <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            onClick={() => {
                                const resetPresets = presets.map(p => ({ ...p, usageCount: 0 }));
                                onPresetsChange(resetPresets);
                            }}
                            style={{
                                background: 'none',
                                border: '1px solid #FF9500',
                                borderRadius: 4,
                                padding: '2px 6px',
                                color: '#FF9500',
                                fontSize: 10,
                                cursor: 'pointer',
                                userSelect: 'none'
                            }}
                            title="–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
                        >
                            üîÑ –°–±—Ä–æ—Å
                        </motion.button>
                    )}
                </div>
            </div>

            {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ */}
            <AnimatePresence>
                {showCreateForm && (
                    <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        transition={{ duration: 0.3 }}
                        style={{
                            marginBottom: 12,
                            padding: 8,
                            backgroundColor: '#2C2C2E',
                            borderRadius: 6,
                            border: '1px solid #3C3C3E',
                            overflow: 'hidden'
                        }}
                    >
                        <div style={{ marginBottom: 8 }}>
                            <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                                {/* –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ */}
                                <div style={{ position: 'relative' }} data-emoji-picker>
                                    <motion.button
                                        type="button"
                                        whileHover={{ scale: 1.1 }}
                                        whileTap={{ scale: 0.9 }}
                                        onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                                        style={{
                                            width: 32,
                                            height: 32,
                                            backgroundColor: '#2C2C2E',
                                            border: '1px solid #3C3C3E',
                                            borderRadius: 4,
                                            fontSize: 16,
                                            cursor: 'pointer',
                                            display: 'flex',
                                            alignItems: 'center',
                                            justifyContent: 'center'
                                        }}
                                        title="–í—ã–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏"
                                    >
                                        {selectedEmoji}
                                    </motion.button>
                                    
                                    {/* –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏ */}
                                    <AnimatePresence>
                                        {showEmojiPicker && (
                                            <motion.div
                                                initial={{ opacity: 0, scale: 0.8, y: -10 }}
                                                animate={{ opacity: 1, scale: 1, y: 0 }}
                                                exit={{ opacity: 0, scale: 0.8, y: -10 }}
                                                transition={{ duration: 0.2 }}
                                                style={{
                                                    position: 'absolute',
                                                    top: 36,
                                                    left: 0,
                                                    zIndex: 1000,
                                                    backgroundColor: '#2C2C2E',
                                                    border: '1px solid #3C3C3E',
                                                    borderRadius: 8,
                                                    padding: 8,
                                                    display: 'grid',
                                                    gridTemplateColumns: 'repeat(8, 1fr)',
                                                    gap: 4,
                                                    maxWidth: 240,
                                                    maxHeight: 200,
                                                    overflowY: 'auto',
                                                    boxShadow: '0 4px 12px rgba(0,0,0,0.3)'
                                                }}
                                            >
                                                {availableEmojis.map((emoji, index) => (
                                                    <motion.button
                                                        key={emoji}
                                                        type="button"
                                                        initial={{ opacity: 0 }}
                                                        animate={{ opacity: 1 }}
                                                        transition={{ delay: index * 0.02 }}
                                                        whileHover={{ scale: 1.2, backgroundColor: '#3C3C3E' }}
                                                        whileTap={{ scale: 0.9 }}
                                                        onClick={() => {
                                                            setSelectedEmoji(emoji);
                                                            setShowEmojiPicker(false);
                                                        }}
                                                        style={{
                                                            width: 24,
                                                            height: 24,
                                                            backgroundColor: selectedEmoji === emoji ? '#007AFF' : 'transparent',
                                                            border: 'none',
                                                            borderRadius: 4,
                                                            fontSize: 14,
                                                            cursor: 'pointer',
                                                            display: 'flex',
                                                            alignItems: 'center',
                                                            justifyContent: 'center'
                                                        }}
                                                    >
                                                        {emoji}
                                                    </motion.button>
                                                ))}
                                            </motion.div>
                                        )}
                                    </AnimatePresence>
                                </div>
                                
                                {/* –ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è */}
                                <input
                                    type="text"
                                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞"
                                    value={newPresetName}
                                    onChange={(e) => setNewPresetName(e.target.value)}
                                    style={{
                                        flex: 1,
                                        padding: '6px 8px',
                                        backgroundColor: '#1C1C1E',
                                        border: '1px solid #3C3C3E',
                                        borderRadius: 4,
                                        color: '#fff',
                                        fontSize: 12,
                                        outline: 'none'
                                    }}
                                    onKeyPress={(e) => e.key === 'Enter' && handleCreatePreset()}
                                />
                            </div>
                        </div>
                        
                        <div style={{ marginBottom: 8 }}>
                            <input
                                type="text"
                                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                                value={newPresetDescription}
                                onChange={(e) => setNewPresetDescription(e.target.value)}
                                style={{
                                    width: '100%',
                                    padding: '6px 8px',
                                    backgroundColor: '#1C1C1E',
                                    border: '1px solid #3C3C3E',
                                    borderRadius: 4,
                                    color: '#fff',
                                    fontSize: 12,
                                    outline: 'none'
                                }}
                            />
                        </div>



                        <div style={{
                            display: 'flex',
                            gap: 6,
                            justifyContent: 'flex-end'
                        }}>
                            <button
                                onClick={() => setShowCreateForm(false)}
                                style={{
                                    background: 'none',
                                    border: 'none',
                                    color: '#86868B',
                                    fontSize: 11,
                                    cursor: 'pointer',
                                    padding: '4px 8px'
                                }}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                onClick={handleCreatePreset}
                                disabled={!newPresetName.trim()}
                                style={{
                                    backgroundColor: newPresetName.trim() ? '#007AFF' : '#3C3C3E',
                                    color: '#fff',
                                    border: 'none',
                                    borderRadius: 4,
                                    padding: '4px 12px',
                                    fontSize: 11,
                                    cursor: newPresetName.trim() ? 'pointer' : 'not-allowed',
                                    opacity: newPresetName.trim() ? 1 : 0.5
                                }}
                            >
                                –°–æ–∑–¥–∞—Ç—å
                            </button>
                        </div>

                        <div style={{
                            marginTop: 8,
                            padding: 6,
                            backgroundColor: '#1C1C1E',
                            borderRadius: 4,
                            fontSize: 10,
                            color: '#86868B'
                        }}>
                            –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: {currentCounts.boardCount} —Å–∞–ø–±–æ—Ä–¥ + {currentCounts.boardWithSeatCount} —Å –∫—Ä–µ—Å–ª–æ–º + {currentCounts.raftCount} –ø–ª–æ—Ç
                        </div>
                    </motion.div>
                )}
            </AnimatePresence>

            {/* –°–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ */}
            <div style={{
                display: 'flex',
                gap: isMobile ? 6 : 8,
                flexWrap: 'wrap'
            }}>
                {sortedPresets.map((preset, index) => {
                    const isAvailable = isPresetAvailable(preset);
                    const isCurrent = isCurrentSelection(preset);

                    return (
                        <div key={preset.id} style={{ position: 'relative' }}>
                            <motion.button
                                initial={{ opacity: 0, x: -20 }}
                                animate={{ opacity: 1, x: 0 }}
                                transition={{ delay: 0.4 + index * 0.1, duration: 0.3 }}
                                whileHover={isAvailable && !isCurrent ? { 
                                    scale: 1.05,
                                    backgroundColor: '#007AFF10',
                                    borderColor: '#007AFF'
                                } : {}}
                                whileTap={isAvailable ? { 
                                    scale: 0.95 
                                } : {}}
                                onClick={() => handlePresetClick(preset)}
                                disabled={!isAvailable}
                                style={{
                                    padding: isMobile ? '5px 10px' : '6px 12px',
                                    borderRadius: isMobile ? 4 : 6,
                                    border: isCurrent ? '1px solid #007AFF' : '1px solid #3C3C3E',
                                    backgroundColor: isCurrent ? 'rgba(0, 122, 255, 0.125)' : 'rgba(0, 122, 255, 0)',
                                    color: isAvailable ? '#fff' : '#666',
                                    fontSize: isMobile ? 11 : 12,
                                    fontWeight: 500,
                                    cursor: isAvailable ? 'pointer' : 'not-allowed',
                                    opacity: isAvailable ? 1 : 0.5,
                                    userSelect: 'none',
                                    position: 'relative',
                                    paddingRight: preset.isDefault ? undefined : (isMobile ? 25 : 30)
                                }}
                                title={
                                    isAvailable 
                                        ? `${preset.name}${preset.description ? ` - ${preset.description}` : ''}${preset.usageCount ? ` (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${preset.usageCount} —Ä–∞–∑)` : ''}`
                                        : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è'
                                }
                            >
                                <div style={{ display: 'flex', alignItems: 'center', gap: 4 }}>
                                    {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç–º–æ–¥–∑–∏ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ */}
                                    {preset.emoji ? (
                                        <span style={{ fontSize: 12 }}>{preset.emoji}</span>
                                    ) : (
                                        <>
                                            {preset.isDefault && <span style={{ fontSize: 10 }}>‚≠ê</span>}
                                            {preset.isPopular && <span style={{ fontSize: 10 }}>üî•</span>}
                                        </>
                                    )}
                                    <span>{preset.name}</span>
                                    {preset.usageCount && preset.usageCount > 0 && (
                                        <span style={{ 
                                            fontSize: 9, 
                                            opacity: 0.7,
                                            backgroundColor: '#007AFF30',
                                            padding: '1px 3px',
                                            borderRadius: 2
                                        }}>
                                            {preset.usageCount > 99 ? '99+' : preset.usageCount}
                                        </span>
                                    )}
                                </div>
                            </motion.button>

                            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ */}
                            {!preset.isDefault && (
                                <motion.button
                                    whileHover={{ scale: 1.1 }}
                                    whileTap={{ scale: 0.9 }}
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        handleDeletePreset(preset.id);
                                    }}
                                    style={{
                                        position: 'absolute',
                                        top: -2,
                                        right: -2,
                                        width: 16,
                                        height: 16,
                                        borderRadius: '50%',
                                        backgroundColor: '#FF4D4F',
                                        color: '#fff',
                                        border: 'none',
                                        fontSize: 10,
                                        cursor: 'pointer',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        lineHeight: 1
                                    }}
                                    title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç"
                                >
                                    √ó
                                </motion.button>
                            )}
                        </div>
                    );
                })}
            </div>


        </div>
    );
};

export default PresetManager; 