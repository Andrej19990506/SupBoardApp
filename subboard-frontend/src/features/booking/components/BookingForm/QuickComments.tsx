import React, { useState } from 'react';
import type { QuickComment } from './types';

interface QuickCommentsProps {
    value: string;
    onChange: (value: string) => void;
    disabled?: boolean;
}

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
const INITIAL_QUICK_COMMENTS: QuickComment[] = [
    { id: '1', text: '–ü–µ—Ä–≤—ã–π —Ä–∞–∑', category: 'client_type' },
    { id: '2', text: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç', category: 'client_type' },
    { id: '3', text: 'VIP –∫–ª–∏–µ–Ω—Ç', category: 'client_type' },
    { id: '4', text: '–ì—Ä—É–ø–ø–∞', category: 'client_type' },
    { id: '5', text: '–¢—Ä–µ–±—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂', category: 'special_needs' },
    { id: '6', text: '–û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', category: 'special_needs' },
    { id: '7', text: '–ï—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é', category: 'special_needs' },
    { id: '8', text: '–ù—É–∂–Ω—ã –≤–µ—Å–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞', category: 'equipment' },
    { id: '9', text: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∂–µ—Å—Ç–∫–∏–µ –¥–æ—Å–∫–∏', category: 'equipment' },
    { id: '10', text: '–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è', category: 'other' }
];

const QuickComments: React.FC<QuickCommentsProps> = ({
    value,
    onChange,
    disabled = false
}) => {
    const [isExpanded, setIsExpanded] = useState(false);
    const [quickComments, setQuickComments] = useState<QuickComment[]>(INITIAL_QUICK_COMMENTS);
    const [newTagInputs, setNewTagInputs] = useState<Record<string, string>>({});

    const handleCommentClick = (commentText: string) => {
        if (disabled) return;
        
        // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ –µ—Å—Ç—å, —É–±–∏—Ä–∞–µ–º –µ–≥–æ (toggle —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
        if (value.includes(commentText)) {
            handleRemoveTag(commentText);
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        const newValue = value.trim() 
            ? `${value.trim()}, ${commentText}`
            : commentText;
            
        onChange(newValue);
    };

    const handleRemoveTag = (tagToRemove: string) => {
        if (disabled) return;
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –∑–∞–ø—è—Ç–æ–π, —É–¥–∞–ª—è–µ–º –Ω—É–∂–Ω—ã–π —Ç–µ–≥ –∏ —Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        const parts = value.split(',').map(part => part.trim()).filter(part => part !== tagToRemove);
        onChange(parts.join(', '));
    };

    const handleRemoveQuickComment = (commentId: string) => {
        if (disabled) return;
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        setQuickComments(prev => prev.filter(comment => comment.id !== commentId));
        
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
        const commentToRemove = quickComments.find(c => c.id === commentId);
        if (commentToRemove && value.includes(commentToRemove.text)) {
            handleRemoveTag(commentToRemove.text);
        }
    };

    const handleAddNewTag = (category: string) => {
        const newTagText = newTagInputs[category]?.trim();
        if (!newTagText || disabled) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π —Ç–µ–≥ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const exists = quickComments.some(comment => 
            comment.text.toLowerCase() === newTagText.toLowerCase() && 
            comment.category === category
        );
        
        if (exists) {
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            setNewTagInputs(prev => ({ ...prev, [category]: '' }));
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        const newComment: QuickComment = {
            id: `custom_${Date.now()}_${Math.random()}`,
            text: newTagText,
            category: category as any
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        setQuickComments(prev => [...prev, newComment]);
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setNewTagInputs(prev => ({ ...prev, [category]: '' }));
    };

    const handleNewTagInputChange = (category: string, value: string) => {
        setNewTagInputs(prev => ({ ...prev, [category]: value }));
    };

    const handleNewTagKeyPress = (e: React.KeyboardEvent, category: string) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleAddNewTag(category);
        }
    };

    const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        onChange(e.target.value);
    };

    const getCommentsByCategory = (category: string) => {
        return quickComments.filter(comment => comment.category === category);
    };

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const getActiveTags = () => {
        if (!value.trim()) return [];
        return value.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
    };

    const categoryIcons = {
        client_type: 'üë§',
        special_needs: '‚ö†Ô∏è',
        equipment: 'üèÑ‚Äç‚ôÇÔ∏è',
        other: 'üí¨'
    };

    const categoryNames = {
        client_type: '–¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞',
        special_needs: '–û—Å–æ–±—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏',
        equipment: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å',
        other: '–ü—Ä–æ—á–µ–µ'
    };

    const activeTags = getActiveTags();

    return (
        <div>
            {/* –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ */}
            <textarea
                value={value}
                onChange={handleTextAreaChange}
                placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                disabled={disabled}
                rows={3}
                style={{
                    width: '100%',
                    padding: '12px 16px',
                    backgroundColor: '#23232a',
                    border: '1px solid #3C3C3E',
                    borderRadius: '12px',
                    color: '#fff',
                    fontSize: '1rem',
                    outline: 'none',
                    resize: 'vertical',
                    minHeight: '80px',
                    fontFamily: 'inherit',
                    transition: 'border-color 0.2s ease',
                }}
                onFocus={(e) => {
                    e.target.style.borderColor = '#007AFF';
                }}
                onBlur={(e) => {
                    e.target.style.borderColor = '#3C3C3E';
                }}
            />

            {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–≥–∏ */}
            {activeTags.length > 0 && (
                <div style={{
                    marginTop: '8px',
                    display: 'flex',
                    flexWrap: 'wrap',
                    gap: '6px'
                }}>
                    {activeTags.map((tag, index) => (
                        <div
                            key={index}
                            style={{
                                display: 'flex',
                                alignItems: 'center',
                                backgroundColor: '#007AFF',
                                color: '#fff',
                                padding: '4px 8px',
                                borderRadius: '6px',
                                fontSize: '13px',
                                fontWeight: 500,
                                userSelect: 'none'
                            }}
                        >
                            <span style={{ marginRight: '6px' }}>{tag}</span>
                            <button
                                type="button"
                                onClick={() => handleRemoveTag(tag)}
                                disabled={disabled}
                                style={{
                                    background: 'none',
                                    border: 'none',
                                    color: '#fff',
                                    cursor: disabled ? 'not-allowed' : 'pointer',
                                    padding: '0',
                                    width: '16px',
                                    height: '16px',
                                    borderRadius: '50%',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    fontSize: '12px',
                                    transition: 'background-color 0.2s ease',
                                    userSelect: 'none'
                                }}
                                onMouseEnter={(e) => {
                                    if (!disabled) {
                                        (e.target as HTMLButtonElement).style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
                                    }
                                }}
                                onMouseLeave={(e) => {
                                    if (!disabled) {
                                        (e.target as HTMLButtonElement).style.backgroundColor = 'transparent';
                                    }
                                }}
                            >
                                √ó
                            </button>
                        </div>
                    ))}
                </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ */}
            <button
                type="button"
                onClick={() => setIsExpanded(!isExpanded)}
                disabled={disabled}
                style={{
                    marginTop: '8px',
                    padding: '6px 12px',
                    borderRadius: '8px',
                    border: 'none',
                    fontSize: '14px',
                    fontWeight: 500,
                    cursor: disabled ? 'not-allowed' : 'pointer',
                    backgroundColor: '#3C3C3E',
                    color: '#007AFF',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px',
                    transition: 'all 0.2s ease',
                    opacity: disabled ? 0.5 : 1,
                    userSelect: 'none'
                }}
                onMouseEnter={(e) => {
                    if (!disabled) {
                        (e.target as HTMLButtonElement).style.backgroundColor = '#007AFF20';
                    }
                }}
                onMouseLeave={(e) => {
                    if (!disabled) {
                        (e.target as HTMLButtonElement).style.backgroundColor = '#3C3C3E';
                    }
                }}
            >
                <span>{isExpanded ? '‚ñº' : '‚ñ∂'}</span>
                <span>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</span>
            </button>

            {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ */}
            {isExpanded && (
                <div style={{
                    marginTop: '12px',
                    padding: '16px',
                    backgroundColor: '#2C2C2E',
                    borderRadius: '12px',
                    border: '1px solid #3C3C3E'
                }}>
                    {Object.entries(categoryNames).map(([category, name]) => {
                        const comments = getCommentsByCategory(category);

                        return (
                            <div key={category} style={{ marginBottom: '16px' }}>
                                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                                <div style={{
                                    fontSize: '14px',
                                    fontWeight: 600,
                                    color: '#fff',
                                    marginBottom: '8px',
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '6px',
                                    userSelect: 'none',
                                    WebkitUserSelect: 'none',
                                    MozUserSelect: 'none',
                                    msUserSelect: 'none',
                                    WebkitTouchCallout: 'none',
                                    WebkitTapHighlightColor: 'transparent'
                                }}>
                                    <span>{categoryIcons[category as keyof typeof categoryIcons]}</span>
                                    <span>{name}</span>
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
                                <div style={{
                                    display: 'flex',
                                    flexWrap: 'wrap',
                                    gap: '6px',
                                    marginBottom: '8px'
                                }}>
                                    {comments.map((comment) => {
                                        const isAlreadyAdded = value.includes(comment.text);
                                        
                                        return (
                                            <div
                                                key={comment.id}
                                                style={{
                                                    display: 'flex',
                                                    alignItems: 'center',
                                                    backgroundColor: isAlreadyAdded ? '#4CAF50' : '#3C3C3E',
                                                    borderRadius: '6px',
                                                    overflow: 'hidden',
                                                    userSelect: 'none',
                                                    WebkitUserSelect: 'none',
                                                    MozUserSelect: 'none',
                                                    msUserSelect: 'none',
                                                    WebkitTouchCallout: 'none',
                                                    WebkitTapHighlightColor: 'transparent'
                                                }}
                                            >
                                                <button
                                                    type="button"
                                                    onClick={() => handleCommentClick(comment.text)}
                                                    disabled={disabled}
                                                    style={{
                                                        padding: '6px 10px',
                                                        border: 'none',
                                                        fontSize: '13px',
                                                        fontWeight: 500,
                                                        cursor: disabled ? 'not-allowed' : 'pointer',
                                                        backgroundColor: 'transparent',
                                                        color: '#fff',
                                                        transition: 'all 0.2s ease',
                                                        opacity: disabled ? 0.5 : 1,
                                                        display: 'flex',
                                                        alignItems: 'center',
                                                        gap: '4px',
                                                        userSelect: 'none',
                                                        WebkitUserSelect: 'none',
                                                        MozUserSelect: 'none',
                                                        msUserSelect: 'none',
                                                        WebkitTouchCallout: 'none',
                                                        WebkitTapHighlightColor: 'transparent'
                                                    }}
                                                    onMouseEnter={(e) => {
                                                        if (!disabled) {
                                                            if (isAlreadyAdded) {
                                                                (e.target as HTMLButtonElement).style.backgroundColor = '#FF4D4F';
                                                            } else {
                                                                (e.target as HTMLButtonElement).style.backgroundColor = '#007AFF';
                                                            }
                                                        }
                                                    }}
                                                    onMouseLeave={(e) => {
                                                        if (!disabled) {
                                                            (e.target as HTMLButtonElement).style.backgroundColor = 'transparent';
                                                        }
                                                    }}
                                                >
                                                    {isAlreadyAdded && <span>‚úì</span>}
                                                    <span>{comment.text}</span>
                                                </button>
                                                
                                                {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞ */}
                                                <button
                                                    type="button"
                                                    onClick={() => handleRemoveQuickComment(comment.id)}
                                                    disabled={disabled}
                                                    style={{
                                                        padding: '6px 8px',
                                                        border: 'none',
                                                        backgroundColor: 'transparent',
                                                        color: '#FF4D4F',
                                                        cursor: disabled ? 'not-allowed' : 'pointer',
                                                        fontSize: '12px',
                                                        transition: 'background-color 0.2s ease',
                                                        userSelect: 'none',
                                                        WebkitUserSelect: 'none',
                                                        MozUserSelect: 'none',
                                                        msUserSelect: 'none',
                                                        WebkitTouchCallout: 'none',
                                                        WebkitTapHighlightColor: 'transparent'
                                                    }}
                                                    onMouseEnter={(e) => {
                                                        if (!disabled) {
                                                            (e.target as HTMLButtonElement).style.backgroundColor = '#FF4D4F20';
                                                        }
                                                    }}
                                                    onMouseLeave={(e) => {
                                                        if (!disabled) {
                                                            (e.target as HTMLButtonElement).style.backgroundColor = 'transparent';
                                                        }
                                                    }}
                                                    title="–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥"
                                                >
                                                    √ó
                                                </button>
                                            </div>
                                        );
                                    })}
                                    
                                    {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é */}
                                    <div style={{
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: '4px'
                                    }}>
                                        <input
                                            type="text"
                                            value={newTagInputs[category] || ''}
                                            onChange={(e) => handleNewTagInputChange(category, e.target.value)}
                                            onKeyPress={(e) => handleNewTagKeyPress(e, category)}
                                            placeholder="–ù–æ–≤—ã–π —Ç–µ–≥..."
                                            disabled={disabled}
                                            style={{
                                                padding: '4px 8px',
                                                backgroundColor: '#1C1C1E',
                                                border: '1px solid #3C3C3E',
                                                borderRadius: '4px',
                                                color: '#fff',
                                                fontSize: '12px',
                                                outline: 'none',
                                                width: '100px',
                                                transition: 'border-color 0.2s ease',
                                            }}
                                            onFocus={(e) => {
                                                e.target.style.borderColor = '#007AFF';
                                            }}
                                            onBlur={(e) => {
                                                e.target.style.borderColor = '#3C3C3E';
                                            }}
                                        />
                                        <button
                                            type="button"
                                            onClick={() => handleAddNewTag(category)}
                                            disabled={disabled || !newTagInputs[category]?.trim()}
                                            style={{
                                                padding: '4px 8px',
                                                borderRadius: '4px',
                                                border: 'none',
                                                fontSize: '12px',
                                                fontWeight: 500,
                                                cursor: (disabled || !newTagInputs[category]?.trim()) ? 'not-allowed' : 'pointer',
                                                backgroundColor: '#007AFF',
                                                color: '#fff',
                                                transition: 'all 0.2s ease',
                                                opacity: (disabled || !newTagInputs[category]?.trim()) ? 0.5 : 1,
                                                userSelect: 'none',
                                                WebkitUserSelect: 'none',
                                                MozUserSelect: 'none',
                                                msUserSelect: 'none',
                                                WebkitTouchCallout: 'none',
                                                WebkitTapHighlightColor: 'transparent'
                                            }}
                                            onMouseEnter={(e) => {
                                                if (!disabled && newTagInputs[category]?.trim()) {
                                                    (e.target as HTMLButtonElement).style.backgroundColor = '#0056CC';
                                                }
                                            }}
                                            onMouseLeave={(e) => {
                                                if (!disabled && newTagInputs[category]?.trim()) {
                                                    (e.target as HTMLButtonElement).style.backgroundColor = '#007AFF';
                                                }
                                            }}
                                        >
                                            +
                                        </button>
                                    </div>
                                </div>
                            </div>
                        );
                    })}

                    {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
                    <div style={{
                        fontSize: '12px',
                        color: '#86868B',
                        fontStyle: 'italic',
                        textAlign: 'center',
                        marginTop: '8px',
                        userSelect: 'none',
                        WebkitUserSelect: 'none',
                        MozUserSelect: 'none',
                        msUserSelect: 'none',
                        WebkitTouchCallout: 'none',
                        WebkitTapHighlightColor: 'transparent'
                    }}>
                        üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫ —Ç–µ–∫—Å—Ç—É
                    </div>
                </div>
            )}
        </div>
    );
};

export default QuickComments; 