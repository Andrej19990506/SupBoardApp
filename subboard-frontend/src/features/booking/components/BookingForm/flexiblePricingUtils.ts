import type { ServiceType } from '@/types/booking';
import type { PricingConfig } from './types';
import type { InventoryType } from '@/features/booking/services/inventoryApi';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
export interface FlexiblePricingResult {
    subtotal: number;
    itemCosts: Array<{
        inventoryTypeId: number;
        inventoryTypeName: string;
        quantity: number;
        unitPrice: number;
        totalPrice: number;
        icon: string;
    }>;
    calculationDetails: string[];
}

export interface FlexibleDepositResult {
    total: number;
    itemDeposits: Array<{
        inventoryTypeId: number;
        inventoryTypeName: string;
        quantity: number;
        unitDeposit: number;
        totalDeposit: number;
        icon: string;
    }>;
}

export interface FlexibleDiscountResult {
    percentage: number;
    amount: number;
    reasons: string[];
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –≥–∏–±–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
export function calculateFlexiblePricing(
    serviceType: ServiceType,
    selectedItems: Record<number, number>, // inventoryTypeId -> quantity
    inventoryTypes: InventoryType[],
    durationInHours: number,
    config: PricingConfig
): FlexiblePricingResult {
    let subtotal = 0;
    const itemCosts: FlexiblePricingResult['itemCosts'] = [];
    const calculationDetails: string[] = [];

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–∞–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    Object.entries(selectedItems).forEach(([typeIdStr, quantity]) => {
        if (quantity <= 0) return;

        const typeId = parseInt(typeIdStr, 10);
        const inventoryType = inventoryTypes.find(t => t.id === typeId);
        if (!inventoryType) return;

        const pricing = config.inventoryPricing[typeId];
        if (!pricing) return;

        let unitPrice = 0;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∏ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
        if (serviceType === '–∞—Ä–µ–Ω–¥–∞') {
            if (config.pricingMode === 'hourly') {
                unitPrice = pricing.hourlyRate * durationInHours;
            } else if (config.pricingMode === 'fixed') {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
                if (durationInHours <= 24) {
                    unitPrice = pricing.fixedPrices.rent['24h'];
                } else if (durationInHours <= 48) {
                    unitPrice = pricing.fixedPrices.rent['48h'];
                } else if (durationInHours <= 72) {
                    unitPrice = pricing.fixedPrices.rent['72h'];
                } else {
                    unitPrice = pricing.fixedPrices.rent['week'];
                }
            } else { // hybrid
                // –í –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—É—é —Ü–µ–Ω—É
                const hourlyPrice = pricing.hourlyRate * durationInHours;
                let fixedPrice = pricing.fixedPrices.rent['24h'];
                if (durationInHours <= 24) {
                    fixedPrice = pricing.fixedPrices.rent['24h'];
                } else if (durationInHours <= 48) {
                    fixedPrice = pricing.fixedPrices.rent['48h'];
                } else if (durationInHours <= 72) {
                    fixedPrice = pricing.fixedPrices.rent['72h'];
                } else {
                    fixedPrice = pricing.fixedPrices.rent['week'];
                }
                unitPrice = Math.min(hourlyPrice, fixedPrice);
            }
        } else { // —Å–ø–ª–∞–≤
            unitPrice = pricing.fixedPrices.rafting;
        }

        const totalPrice = unitPrice * quantity;
        subtotal += totalPrice;

        itemCosts.push({
            inventoryTypeId: typeId,
            inventoryTypeName: inventoryType.display_name,
            quantity,
            unitPrice,
            totalPrice,
            icon: inventoryType.icon_name || 'üì¶'
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞
        if (serviceType === '–∞—Ä–µ–Ω–¥–∞') {
            calculationDetails.push(
                `${quantity} ${inventoryType.display_name} √ó ${durationInHours} —á √ó ${pricing.hourlyRate}‚ÇΩ`
            );
        } else {
            calculationDetails.push(
                `${quantity} ${inventoryType.display_name} √ó ${unitPrice}‚ÇΩ`
            );
        }
    });

    return {
        subtotal,
        itemCosts,
        calculationDetails
    };
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–ª–æ–≥–æ–≤ –¥–ª—è –≥–∏–±–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
export function calculateFlexibleDeposits(
    selectedItems: Record<number, number>,
    inventoryTypes: InventoryType[],
    config: PricingConfig
): FlexibleDepositResult {
    let total = 0;
    const itemDeposits: FlexibleDepositResult['itemDeposits'] = [];

    Object.entries(selectedItems).forEach(([typeIdStr, quantity]) => {
        if (quantity <= 0) return;

        const typeId = parseInt(typeIdStr, 10);
        const inventoryType = inventoryTypes.find(t => t.id === typeId);
        if (!inventoryType) return;

        const pricing = config.inventoryPricing[typeId];
        if (!pricing || !pricing.requireDeposit) return;

        const totalDeposit = pricing.deposit * quantity;
        total += totalDeposit;

        itemDeposits.push({
            inventoryTypeId: typeId,
            inventoryTypeName: inventoryType.display_name,
            quantity,
            unitDeposit: pricing.deposit,
            totalDeposit,
            icon: inventoryType.icon_name || 'üì¶'
        });
    });

    return {
        total,
        itemDeposits
    };
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫ –¥–ª—è –≥–∏–±–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
export function calculateFlexibleDiscounts(
    subtotal: number,
    selectedItems: Record<number, number>,
    inventoryTypes: InventoryType[],
    isVIP: boolean,
    customDiscount: number,
    config: PricingConfig
): FlexibleDiscountResult {
    if (!config.discounts.enableDiscounts) {
        return { percentage: 0, amount: 0, reasons: [] };
    }

    let percentage = customDiscount || 0;
    const reasons: string[] = [];

    // VIP —Å–∫–∏–¥–∫–∞
    if (isVIP && config.discounts.rates.vip > 0) {
        percentage = Math.max(percentage, config.discounts.rates.vip);
        reasons.push('VIP –∫–ª–∏–µ–Ω—Ç');
    }

    // –ì—Ä—É–ø–ø–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ (—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è)
    const totalItems = Object.values(selectedItems).reduce((sum, count) => sum + count, 0);
    if (totalItems >= 5 && config.discounts.rates.group > 0) {
        percentage = Math.max(percentage, config.discounts.rates.group);
        reasons.push('–ì—Ä—É–ø–ø–æ–≤–∞—è —Å–∫–∏–¥–∫–∞');
    }

    // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ, –∑–∞–≥–ª—É—à–∫–∞)
    // if (isRepeatCustomer && config.discounts.rates.repeat > 0) {
    //     percentage = Math.max(percentage, config.discounts.rates.repeat);
    //     reasons.push('–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç');
    // }

    const amount = (subtotal * percentage) / 100;

    return {
        percentage,
        amount,
        reasons
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
export function createDefaultPricingForInventoryTypes(inventoryTypes: InventoryType[]): PricingConfig {
    const inventoryPricing: PricingConfig['inventoryPricing'] = {};

    inventoryTypes.forEach(type => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        let baseHourlyRate = 300;
        let baseDeposit = 3000;
        let baseRaftingPrice = 1500;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Ç–∏–ø–∞–º (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É)
        if (type.name.toLowerCase().includes('–∫–∞—è–∫') || type.name.toLowerCase().includes('kayak')) {
            baseHourlyRate = 400;
            baseRaftingPrice = 1800;
        } else if (type.name.toLowerCase().includes('–ø–ª–æ—Ç') || type.name.toLowerCase().includes('raft')) {
            baseHourlyRate = 600;
            baseDeposit = 5000;
            baseRaftingPrice = 2500;
        } else if (type.name.toLowerCase().includes('—Å–∞–ø') || type.name.toLowerCase().includes('sup')) {
            baseHourlyRate = 300;
            baseRaftingPrice = 1500;
        }

        inventoryPricing[type.id] = {
            hourlyRate: baseHourlyRate,
            fixedPrices: {
                rent: {
                    '24h': baseHourlyRate * 7,   // ~7 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
                    '48h': baseHourlyRate * 12,  // ~6 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ 2 –¥–Ω—è
                    '72h': baseHourlyRate * 17,  // ~5.5 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ 3 –¥–Ω—è
                    'week': baseHourlyRate * 40, // ~5.7 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –Ω–µ–¥–µ–ª—é
                },
                rafting: baseRaftingPrice,
            },
            deposit: baseDeposit,
            requireDeposit: true,
        };
    });

    return {
        pricingMode: 'hybrid',
        inventoryPricing,
        discounts: {
            enableDiscounts: true,
            rates: {
                vip: 10,
                group: 15,
                repeat: 5,
            }
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –Ω–æ–≤—É—é
export function migrateLegacyPricingConfig(
    legacyConfig: any, 
    inventoryTypes: InventoryType[]
): PricingConfig {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const newConfig = createDefaultPricingForInventoryTypes(inventoryTypes);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    if (legacyConfig) {
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ä–µ–∂–∏–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if (legacyConfig.pricingMode) {
            newConfig.pricingMode = legacyConfig.pricingMode;
        }
        
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–∫–∏–¥–∫–∏
        if (legacyConfig.discounts) {
            newConfig.discounts = { ...newConfig.discounts, ...legacyConfig.discounts };
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ —Ü–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–µ —Ç–∏–ø—ã
        if (legacyConfig.hourlyRates) {
            inventoryTypes.forEach(type => {
                if (type.name.toLowerCase().includes('—Å–∞–ø') || type.name.toLowerCase().includes('sup')) {
                    if (legacyConfig.hourlyRates.boardHourPrice) {
                        newConfig.inventoryPricing[type.id].hourlyRate = legacyConfig.hourlyRates.boardHourPrice;
                    }
                } else if (type.name.toLowerCase().includes('–∫–∞—è–∫')) {
                    if (legacyConfig.hourlyRates.boardWithSeatHourPrice) {
                        newConfig.inventoryPricing[type.id].hourlyRate = legacyConfig.hourlyRates.boardWithSeatHourPrice;
                    }
                } else if (type.name.toLowerCase().includes('–ø–ª–æ—Ç')) {
                    if (legacyConfig.hourlyRates.raftHourPrice) {
                        newConfig.inventoryPricing[type.id].hourlyRate = legacyConfig.hourlyRates.raftHourPrice;
                    }
                }
            });
        }
    }
    
    return newConfig;
} 