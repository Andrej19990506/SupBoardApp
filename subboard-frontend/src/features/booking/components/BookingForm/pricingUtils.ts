import type { PricingConfig } from './types';
import { SERVICE_TYPES } from '@features/booking/constants/constants';

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–∏–±–∫–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
export const calculateFlexiblePricing = (
    serviceType: string,
    boardCount: number,
    boardWithSeatCount: number,
    raftCount: number,
    durationInHours: number,
    config: PricingConfig
) => {
    const hours = serviceType === SERVICE_TYPES.RENT ? durationInHours : 4;
    let boardCost = 0;
    let boardWithSeatCost = 0;
    let raftCost = 0;
    let calculationDetails: string[] = [];

    if (serviceType === SERVICE_TYPES.RAFTING) {
        // –î–ª—è —Å–ø–ª–∞–≤–∞
        if (config.pricingMode === 'hourly') {
            // –ü–æ—á–∞—Å–æ–≤–æ–π —Ä–∞—Å—á–µ—Ç –¥–ª—è —Å–ø–ª–∞–≤–∞
            boardCost = boardCount * config.hourlyRates.boardHourPrice * hours;
            boardWithSeatCost = (boardWithSeatCount || 0) * config.hourlyRates.boardWithSeatHourPrice * hours;
            raftCost = (raftCount || 0) * config.hourlyRates.raftHourPrice * hours;
            
            if (boardCount > 0) calculationDetails.push(`üèÑ‚Äç‚ôÇÔ∏è –î–æ—Å–∫–∏ (${boardCount} √ó ${hours}—á √ó ${config.hourlyRates.boardHourPrice}‚ÇΩ)`);
            if (boardWithSeatCount > 0) calculationDetails.push(`ü™ë –î–æ—Å–∫–∏ —Å –∫—Ä–µ—Å–ª–æ–º (${boardWithSeatCount} √ó ${hours}—á √ó ${config.hourlyRates.boardWithSeatHourPrice}‚ÇΩ)`);
            if (raftCount > 0) calculationDetails.push(`üö£‚Äç‚ôÇÔ∏è –ü–ª–æ—Ç—ã (${raftCount} √ó ${hours}—á √ó ${config.hourlyRates.raftHourPrice}‚ÇΩ)`);
        } else {
            // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Å–ø–ª–∞–≤–∞
            boardCost = boardCount * config.fixedPrices.rafting.board;
            boardWithSeatCost = (boardWithSeatCount || 0) * config.fixedPrices.rafting.boardWithSeat;
            raftCost = (raftCount || 0) * config.fixedPrices.rafting.raft;
            
            if (boardCount > 0) calculationDetails.push(`üèÑ‚Äç‚ôÇÔ∏è –î–æ—Å–∫–∏ (${boardCount} √ó ${config.fixedPrices.rafting.board}‚ÇΩ –∑–∞ —Å–ø–ª–∞–≤)`);
            if (boardWithSeatCount > 0) calculationDetails.push(`ü™ë –î–æ—Å–∫–∏ —Å –∫—Ä–µ—Å–ª–æ–º (${boardWithSeatCount} √ó ${config.fixedPrices.rafting.boardWithSeat}‚ÇΩ –∑–∞ —Å–ø–ª–∞–≤)`);
            if (raftCount > 0) calculationDetails.push(`üö£‚Äç‚ôÇÔ∏è –ü–ª–æ—Ç—ã (${raftCount} √ó ${config.fixedPrices.rafting.raft}‚ÇΩ –∑–∞ —Å–ø–ª–∞–≤)`);
        }
    } else {
        // –î–ª—è –∞—Ä–µ–Ω–¥—ã
        if (config.pricingMode === 'hourly') {
            // –ü–æ—á–∞—Å–æ–≤–æ–π —Ä–∞—Å—á–µ—Ç
            boardCost = boardCount * config.hourlyRates.boardHourPrice * hours;
            boardWithSeatCost = (boardWithSeatCount || 0) * config.hourlyRates.boardWithSeatHourPrice * hours;
            raftCost = (raftCount || 0) * config.hourlyRates.raftHourPrice * hours;
            
            if (boardCount > 0) calculationDetails.push(`üèÑ‚Äç‚ôÇÔ∏è –î–æ—Å–∫–∏ (${boardCount} √ó ${hours}—á √ó ${config.hourlyRates.boardHourPrice}‚ÇΩ)`);
            if (boardWithSeatCount > 0) calculationDetails.push(`ü™ë –î–æ—Å–∫–∏ —Å –∫—Ä–µ—Å–ª–æ–º (${boardWithSeatCount} √ó ${hours}—á √ó ${config.hourlyRates.boardWithSeatHourPrice}‚ÇΩ)`);
            if (raftCount > 0) calculationDetails.push(`üö£‚Äç‚ôÇÔ∏è –ü–ª–æ—Ç—ã (${raftCount} √ó ${hours}—á √ó ${config.hourlyRates.raftHourPrice}‚ÇΩ)`);
        } else {
            // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            const durationKey = getDurationKey(hours);
            const durationLabel = getDurationLabel(durationKey);
            
            boardCost = boardCount * config.fixedPrices.rent.board[durationKey];
            boardWithSeatCost = (boardWithSeatCount || 0) * config.fixedPrices.rent.boardWithSeat[durationKey];
            raftCost = (raftCount || 0) * config.fixedPrices.rent.raft[durationKey];
            
            if (boardCount > 0) calculationDetails.push(`üèÑ‚Äç‚ôÇÔ∏è –î–æ—Å–∫–∏ (${boardCount} √ó ${config.fixedPrices.rent.board[durationKey]}‚ÇΩ –∑–∞ ${durationLabel})`);
            if (boardWithSeatCount > 0) calculationDetails.push(`ü™ë –î–æ—Å–∫–∏ —Å –∫—Ä–µ—Å–ª–æ–º (${boardWithSeatCount} √ó ${config.fixedPrices.rent.boardWithSeat[durationKey]}‚ÇΩ –∑–∞ ${durationLabel})`);
            if (raftCount > 0) calculationDetails.push(`üö£‚Äç‚ôÇÔ∏è –ü–ª–æ—Ç—ã (${raftCount} √ó ${config.fixedPrices.rent.raft[durationKey]}‚ÇΩ –∑–∞ ${durationLabel})`);
        }
    }

    return {
        boardCost,
        boardWithSeatCost,
        raftCost,
        subtotal: boardCost + boardWithSeatCost + raftCost,
        hours,
        calculationDetails,
        calculationMethod: serviceType === SERVICE_TYPES.RAFTING 
            ? (config.pricingMode === 'hourly' ? 'hourly' : 'fixed-rafting')
            : (config.pricingMode === 'hourly' ? 'hourly' : 'fixed-rent')
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const getDurationKey = (hours: number): '24h' | '48h' | '72h' | 'week' => {
    if (hours <= 24) return '24h';
    if (hours <= 48) return '48h';
    if (hours <= 72) return '72h';
    return 'week';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const getDurationLabel = (key: '24h' | '48h' | '72h' | 'week'): string => {
    switch (key) {
        case '24h': return '—Å—É—Ç–∫–∏';
        case '48h': return '2 —Å—É—Ç–æ–∫';
        case '72h': return '3 —Å—É—Ç–æ–∫';
        case 'week': return '–Ω–µ–¥–µ–ª—é';
        default: return '–ø–µ—Ä–∏–æ–¥';
    }
};

// –†–∞—Å—á–µ—Ç –∑–∞–ª–æ–≥–æ–≤
export const calculateDeposits = (
    boardCount: number,
    boardWithSeatCount: number,
    raftCount: number,
    config: PricingConfig
) => {
    if (!config.deposits.requireDeposit) return 0;
    
    const totalBoards = boardCount + (boardWithSeatCount || 0);
    const totalRafts = raftCount || 0;
    
    return totalBoards * config.deposits.depositBoard + totalRafts * config.deposits.depositRaft;
};

// –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫
export const calculateDiscounts = (
    subtotal: number,
    isVIP: boolean,
    boardCount: number,
    boardWithSeatCount: number,
    raftCount: number,
    manualDiscount: number,
    config: PricingConfig
) => {
    let totalDiscount = 0;
    const discountReasons: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Å–∫–∏–¥–∫–∏
    if (!config.discounts.enableDiscounts) {
        return {
            percentage: 0,
            amount: 0,
            reasons: []
        };
    }

    // VIP —Å–∫–∏–¥–∫–∞
    if (isVIP && config.discounts.rates.vip > 0) {
        totalDiscount += config.discounts.rates.vip;
        discountReasons.push(`VIP –∫–ª–∏–µ–Ω—Ç (-${config.discounts.rates.vip}%)`);
    }

    // –ì—Ä—É–ø–ø–æ–≤–∞—è —Å–∫–∏–¥–∫–∞
    const totalInventory = boardCount + (boardWithSeatCount || 0) + (raftCount || 0);
    if (totalInventory >= 5 && config.discounts.rates.group > 0) {
        totalDiscount += config.discounts.rates.group;
        discountReasons.push(`–ì—Ä—É–ø–ø–∞ ${totalInventory}+ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (-${config.discounts.rates.group}%)`);
    }

    // –†—É—á–Ω–∞—è —Å–∫–∏–¥–∫–∞
    if (manualDiscount > 0) {
        totalDiscount += manualDiscount;
        discountReasons.push(`–°–∫–∏–¥–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (-${manualDiscount}%)`);
    }

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 30%
    totalDiscount = Math.min(totalDiscount, 30);

    const discountAmount = Math.round(subtotal * totalDiscount / 100);

    return {
        percentage: totalDiscount,
        amount: discountAmount,
        reasons: discountReasons
    };
}; 