import React, { useEffect, useCallback, useRef } from 'react';
import { differenceInMinutes, parseISO } from 'date-fns';
import { useAppDispatch } from '@features/booking/store/hooks';
import { updateBookingAsync, fetchBookings } from '@features/booking/store/slices/bookings-slice/bookingsThunk';
import type { Booking } from '@/types/booking';
import { BookingStatus } from '@/types/booking';
import { bookingUpdateTracker } from '@features/booking/utils/bookingUpdateTracker';

interface AutoConfirmationCheckerProps {
    bookings: Booking[];
    enabled?: boolean;
    checkIntervalMinutes?: number; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    confirmationTimeMinutes?: number; // –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
}

const AutoConfirmationChecker: React.FC<AutoConfirmationCheckerProps> = ({ 
    bookings, 
    enabled = false, // –û–¢–ö–õ–Æ–ß–ï–ù–û: –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ backend (scheduler)
    checkIntervalMinutes = 5,
    confirmationTimeMinutes = 60
}) => {
    const dispatch = useAppDispatch();
    
    // –•—Ä–∞–Ω–∏–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const processedBookingsRef = useRef<Set<number>>(new Set());
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    useEffect(() => {
        const currentIds = bookings.map(b => typeof b.id === 'string' ? parseInt(b.id, 10) : b.id);
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ ID –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        const processedIds = processedBookingsRef.current;
        processedIds.forEach(id => {
            if (!currentIds.includes(id)) {
                processedIds.delete(id);
            }
        });
        
        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä
        bookingUpdateTracker.cleanup(currentIds);
    }, [bookings]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    const checkAndUpdateConfirmationStatus = useCallback(async (forced = false) => {
        if (!enabled || !bookings || bookings.length === 0) {
            return;
        }

        const now = new Date();
        const bookingsToUpdate: Booking[] = [];

        // –û—á–∏—â–∞–µ–º –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ)
        if (forced) {
            processedBookingsRef.current.clear();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        bookings.forEach(booking => {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º BOOKED
            if (booking.status !== BookingStatus.BOOKED) {
                return;
            }

            const bookingId = typeof booking.id === 'string' ? parseInt(booking.id, 10) : booking.id;
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if (!forced && processedBookingsRef.current.has(bookingId)) {
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if (!forced && bookingUpdateTracker.wasRecentlyUpdated(bookingId)) {
                const minutesSince = bookingUpdateTracker.getMinutesSinceUpdate(bookingId);
                console.log(`‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${booking.clientName} (ID: ${booking.id}), –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${minutesSince} –º–∏–Ω –Ω–∞–∑–∞–¥`);
                return;
            }

            try {
                const plannedTime = parseISO(booking.plannedStartTime);
                const minutesUntilStart = differenceInMinutes(plannedTime, now);

                // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (minutesUntilStart <= confirmationTimeMinutes && minutesUntilStart > 0) {
                    console.log(`[AutoConfirmationChecker] ${booking.clientName}: –¥–æ –Ω–∞—á–∞–ª–∞ ${minutesUntilStart} –º–∏–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ`);
                }

                // –ï—Å–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å —á–∞—Å –∏–ª–∏ –º–µ–Ω—å—à–µ (–Ω–æ –±–æ–ª—å—à–µ 0), 
                // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                if (minutesUntilStart <= confirmationTimeMinutes && minutesUntilStart > 0) {
                    bookingsToUpdate.push(booking);
                    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    processedBookingsRef.current.add(bookingId);
                    console.log(`üîî –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ${booking.clientName} (ID: ${booking.id}) - –¥–æ –Ω–∞—á–∞–ª–∞ ${minutesUntilStart} –º–∏–Ω`);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error, booking);
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        if (bookingsToUpdate.length > 0) {
            try {
                console.log(`ü§ñ –ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –≤ PENDING_CONFIRMATION: ${bookingsToUpdate.length} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π`);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                for (const booking of bookingsToUpdate) {
                    const bookingId = typeof booking.id === 'string' ? parseInt(booking.id, 10) : booking.id;
                    
                    const result = await dispatch(updateBookingAsync({
                        id: bookingId,
                        booking: {
                            status: BookingStatus.PENDING_CONFIRMATION
                        }
                    }));

                    if (updateBookingAsync.fulfilled.match(result)) {
                        console.log(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${booking.clientName} (ID: ${booking.id})`);
                        
                        // –ü–æ–º–µ—á–∞–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ç—Ä–µ–∫–µ—Ä–µ
                        bookingUpdateTracker.markAsUpdated(bookingId);
                    } else {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${booking.clientName} (ID: ${booking.id})`);
                        // –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        processedBookingsRef.current.delete(bookingId);
                    }
                }

                // Redux —É–∂–µ –æ–±–Ω–æ–≤–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ updateBookingAsync.fulfilled
                // –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º fetchBookings()

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error);
            }
        }
    }, [bookings, enabled, confirmationTimeMinutes, dispatch]);

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç bookings, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤)
    useEffect(() => {
        if (!enabled) {
            return;
        }

        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        checkAndUpdateConfirmationStatus();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        const interval = setInterval(
            () => checkAndUpdateConfirmationStatus(false), 
            checkIntervalMinutes * 60 * 1000
        );

        return () => {
            clearInterval(interval);
        };
    }, [enabled, checkIntervalMinutes, confirmationTimeMinutes, dispatch]);

    // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    useEffect(() => {
        if (!enabled) {
            return;
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        const timeoutId = setTimeout(() => {
            checkAndUpdateConfirmationStatus(false);
        }, 1000);

        return () => {
            clearTimeout(timeoutId);
        };
    }, [bookings.length, enabled]);

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç
    return null;
};

export default AutoConfirmationChecker; 