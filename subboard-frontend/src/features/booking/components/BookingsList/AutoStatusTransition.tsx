import React, { useEffect, useCallback } from 'react';
import { differenceInMinutes, parseISO } from 'date-fns';
import { useAppDispatch } from '@features/booking/store/hooks';
import { updateBookingAsync } from '@features/booking/store/slices/bookings-slice/bookingsThunk';
import { fetchBookings } from '@features/booking/store/slices/bookings-slice/bookingsThunk';
import type { Booking } from '@/types/booking';
import { BookingStatus } from '@/types/booking';

interface AutoStatusTransitionProps {
    bookings: Booking[];
    enabled?: boolean;
    onStatusChanged?: (bookingId: string, oldStatus: string, newStatus: string) => void;
}

interface TransitionRule {
    fromStatus: BookingStatus;
    toStatus: BookingStatus;
    condition: (booking: Booking, currentTime: Date) => boolean;
    description: string;
}

const AutoStatusTransition: React.FC<AutoStatusTransitionProps> = ({ 
    bookings, 
    enabled = false, // –û–¢–ö–õ–Æ–ß–ï–ù–û: –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ backend (scheduler)
    onStatusChanged 
}) => {
    const dispatch = useAppDispatch();

    // –ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
    const transitionRules: TransitionRule[] = [
        {
            fromStatus: BookingStatus.BOOKED,
            toStatus: BookingStatus.NO_SHOW,
            condition: (booking, now) => {
                const plannedTime = parseISO(booking.plannedStartTime);
                const minutesLate = differenceInMinutes(now, plannedTime);
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–Ω–µ —è–≤–∏–ª—Å—è" —á–µ—Ä–µ–∑ 90 –º–∏–Ω—É—Ç –æ–ø–æ–∑–¥–∞–Ω–∏—è
                return minutesLate >= 90;
            },
            description: '–ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –≤ "–ù–µ —è–≤–∏–ª—Å—è" —á–µ—Ä–µ–∑ 90 –º–∏–Ω –æ–ø–æ–∑–¥–∞–Ω–∏—è'
        },
        {
            fromStatus: BookingStatus.PENDING_CONFIRMATION,
            toStatus: BookingStatus.NO_SHOW,
            condition: (booking, now) => {
                const plannedTime = parseISO(booking.plannedStartTime);
                const minutesLate = differenceInMinutes(now, plannedTime);
                // –î–ª—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ - 120 –º–∏–Ω—É—Ç
                return minutesLate >= 120;
            },
            description: '–ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ "–ù–µ —è–≤–∏–ª—Å—è" —á–µ—Ä–µ–∑ 120 –º–∏–Ω –æ–ø–æ–∑–¥–∞–Ω–∏—è'
        },
        {
            fromStatus: BookingStatus.CONFIRMED,
            toStatus: BookingStatus.NO_SHOW,
            condition: (booking, now) => {
                const plannedTime = parseISO(booking.plannedStartTime);
                const minutesLate = differenceInMinutes(now, plannedTime);
                // –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Ç–æ–∂–µ –¥–∞–µ–º 90 –º–∏–Ω—É—Ç, –∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
                return minutesLate >= 90;
            },
            description: '–ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ "–ù–µ —è–≤–∏–ª—Å—è" —á–µ—Ä–µ–∑ 90 –º–∏–Ω –æ–ø–æ–∑–¥–∞–Ω–∏—è'
        }
    ];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    const checkAutoTransitions = useCallback(async () => {
        if (!enabled) return;

        const now = new Date();
        const transitionsToExecute: Array<{
            booking: Booking;
            rule: TransitionRule;
        }> = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º
        bookings.forEach(booking => {
            transitionRules.forEach(rule => {
                if (booking.status === rule.fromStatus && rule.condition(booking, now)) {
                    transitionsToExecute.push({ booking, rule });
                }
            });
        });

        // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        for (const { booking, rule } of transitionsToExecute) {
            try {
                console.log(`ü§ñ –ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥: ${booking.clientName} (${booking.id}) ${rule.fromStatus} ‚Üí ${rule.toStatus}`);
                
                await dispatch(updateBookingAsync({
                    id: typeof booking.id === 'string' ? parseInt(booking.id, 10) : booking.id,
                    booking: {
                        status: rule.toStatus
                    }
                }));

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
                onStatusChanged?.(booking.id, rule.fromStatus, rule.toStatus);

            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${booking.id}:`, error);
            }
        }

        // Redux —É–∂–µ –æ–±–Ω–æ–≤–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ updateBookingAsync.fulfilled
        // –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º fetchBookings() –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    }, [bookings, enabled, dispatch, onStatusChanged]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    useEffect(() => {
        if (!enabled) return;

        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
        checkAutoTransitions();

        // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        const interval = setInterval(checkAutoTransitions, 5 * 60 * 1000);
        
        return () => clearInterval(interval);
    }, [checkAutoTransitions, enabled]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    const getTransitionStats = useCallback(() => {
        const now = new Date();
        const stats = {
            pendingNoShow: 0,
            totalChecked: bookings.length
        };

        bookings.forEach(booking => {
            if (booking.status === BookingStatus.BOOKED) {
                const plannedTime = parseISO(booking.plannedStartTime);
                const minutesLate = differenceInMinutes(now, plannedTime);
                
                if (minutesLate >= 60 && minutesLate < 90) {
                    stats.pendingNoShow++;
                }
            } else if (booking.status === BookingStatus.PENDING_CONFIRMATION) {
                const plannedTime = parseISO(booking.plannedStartTime);
                const minutesLate = differenceInMinutes(now, plannedTime);
                
                if (minutesLate >= 90 && minutesLate < 120) {
                    stats.pendingNoShow++;
                }
            } else if (booking.status === BookingStatus.CONFIRMED) {
                const plannedTime = parseISO(booking.plannedStartTime);
                const minutesLate = differenceInMinutes(now, plannedTime);
                
                if (minutesLate >= 60 && minutesLate < 90) {
                    stats.pendingNoShow++;
                }
            }
        });

        return stats;
    }, [bookings]);

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    useEffect(() => {
        if (enabled) {
            const stats = getTransitionStats();
            if (stats.pendingNoShow > 0) {
                console.log(`üìä –ê–≤—Ç–æ—Å—Ç–∞—Ç—É—Å—ã: ${stats.pendingNoShow} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å–∫–æ—Ä–æ –ø–µ—Ä–µ–π–¥—É—Ç –≤ "–ù–µ —è–≤–∏–ª—Å—è"`);
            }
        }
    }, [getTransitionStats, enabled]);

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ
    return null;
};

export default AutoStatusTransition; 