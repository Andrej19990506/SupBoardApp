import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { inventoryApi, type InventoryType, type InventoryItem, type InventoryStats } from '@/features/booking/services/inventoryApi';
import { useDevice } from '@/shared/hooks/useDevice';

interface MobileInventoryModalProps {
    isOpen: boolean;
    onClose: () => void;
}

const MobileInventoryModal: React.FC<MobileInventoryModalProps> = ({
    isOpen,
    onClose
}) => {
    const { isMobile, deviceType } = useDevice();
    const [activeTab, setActiveTab] = useState<'overview' | 'types' | 'items'>('overview');
    const [inventoryTypes, setInventoryTypes] = useState<InventoryType[]>([]);
    const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>([]);
    const [inventoryStats, setInventoryStats] = useState<InventoryStats | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º
    const [showCreateTypeForm, setShowCreateTypeForm] = useState(false);
    const [showCreateItemsForm, setShowCreateItemsForm] = useState(false);
    const [selectedTypeForItems, setSelectedTypeForItems] = useState<number | null>(null);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞
    const [newTypeForm, setNewTypeForm] = useState({
        name: '',
        display_name: '',
        description: '',
        icon_name: '',
        color: '#007AFF',
        affects_availability: false,
        board_equivalent: 0.0,
        initial_quantity: 1
    });
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü
    const [newItemsForm, setNewItemsForm] = useState({
        quantity: 1,
        name_prefix: ''
    });
    
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const inventoryIcons = [
        'üõ∂', 'üö£', '‚õµ', 'üèÑ‚Äç‚ôÇÔ∏è', 'üèÑ‚Äç‚ôÄÔ∏è', 'ü§ø', 'ü¶∫', '‚õëÔ∏è',
        'üéØ', 'üèπ', 'üé™', '‚õ∞Ô∏è', 'üèîÔ∏è', 'üåä', 'üèñÔ∏è', 'üåÖ',
        'üî•', '‚≠ê', 'üíé', 'üé®', 'üé≠', 'üé™', 'üé°', 'üé¢',
        'üöÅ', '‚úàÔ∏è', 'üöÄ', '‚öì', 'üß≠', 'üó∫Ô∏è', 'üìç', 'üéí'
    ];

    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    const isSmallMobile = deviceType === 'mobile';
    const padding = isSmallMobile ? 16 : 20;
    const titleSize = isSmallMobile ? 20 : 24;
    const cardPadding = isSmallMobile ? 16 : 20;
    const buttonHeight = isSmallMobile ? 48 : 52;
    const fontSize = isSmallMobile ? 14 : 16;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        if (isOpen) {
            loadInventoryData();
        }
    }, [isOpen]);

    const loadInventoryData = async () => {
        try {
            setLoading(true);
            setError(null);
            
            const [typesResponse, itemsResponse, statsResponse] = await Promise.all([
                inventoryApi.getInventoryTypes(),
                inventoryApi.getInventoryItems(),
                inventoryApi.getInventoryStats()
            ]);
            
            setInventoryTypes(typesResponse.data);
            setInventoryItems(itemsResponse.data);
            setInventoryStats(statsResponse.data);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è');
        } finally {
            setLoading(false);
        }
    };

    // –ö—ç—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const translationCache = useRef<Map<string, string>>(new Map());
    const [isTranslating, setIsTranslating] = useState(false);
    const translationTimeoutRef = useRef<NodeJS.Timeout | null>(null);

    // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const inventoryTranslations: {[key: string]: string} = {
        '–∫–∞—è–∫': 'kayak', '–±–∞–π–¥–∞—Ä–∫–∞': 'kayak', '–ª–æ–¥–∫–∞': 'boat', '–ø–ª–æ—Ç': 'raft',
        '–¥–æ—Å–∫–∞': 'board', '—Å–∞–ø': 'sup', 'sup': 'sup', '—Å–µ—Ä—Ñ': 'surf',
        '–∂–∏–ª–µ—Ç': 'jacket', '—Å–ø–∞—Å–∂–∏–ª–µ—Ç': 'life_jacket', '—à–ª–µ–º': 'helmet',
        '–≤–µ—Å–ª–æ': 'paddle', '–≤–µ—Å–ª–∞': 'paddles', '–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º': 'wetsuit'
    };

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    const translateToEnglish = async (text: string): Promise<string> => {
        const cacheKey = text.toLowerCase().trim();
        if (translationCache.current.has(cacheKey)) {
            return translationCache.current.get(cacheKey)!;
        }

        if (!/[–∞-—è—ë]/i.test(text)) {
            const result = text.toLowerCase()
                .replace(/[^a-z0-9]/g, '_')
                .replace(/_+/g, '_')
                .replace(/^_|_$/g, '');
            translationCache.current.set(cacheKey, result);
            return result;
        }

        // –£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å
        const words = text.toLowerCase().split(/[\s\-_.,!?()]+/).filter(w => w.length > 0);
        const translatedWords = words.map(word => {
            if (inventoryTranslations[word]) {
                return inventoryTranslations[word];
            }
            for (const [ru, en] of Object.entries(inventoryTranslations)) {
                if (word.includes(ru)) {
                    return en;
                }
            }
            return null;
        });

        if (translatedWords.every(w => w !== null)) {
            const result = translatedWords.join('_');
            translationCache.current.set(cacheKey, result);
            return result;
        }

        // Fallback - —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
        const fallback = text
            .toLowerCase()
            .replace(/[–∞-—è—ë]/g, (char) => {
                const map: {[key: string]: string} = {
                    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
                    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
                    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
                    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
                    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
                };
                return map[char] || char;
            })
            .replace(/[^a-z0-9]/g, '_')
            .replace(/_+/g, '_')
            .replace(/^_|_$/g, '');
        
        translationCache.current.set(cacheKey, fallback);
        return fallback;
    };

    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    const handleDisplayNameChange = async (value: string) => {
        setNewTypeForm(prev => ({ ...prev, display_name: value }));

        if (value.trim() && /[–∞-—è—ë]/i.test(value)) {
            if (translationTimeoutRef.current) {
                clearTimeout(translationTimeoutRef.current);
            }
            
            setIsTranslating(true);
            
            translationTimeoutRef.current = setTimeout(async () => {
                try {
                    const translatedName = await translateToEnglish(value);
                    setNewTypeForm(prev => ({ ...prev, name: translatedName }));
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
                } finally {
                    setIsTranslating(false);
                }
            }, 500);
        } else if (value.trim() === '') {
            if (translationTimeoutRef.current) {
                clearTimeout(translationTimeoutRef.current);
            }
            setIsTranslating(false);
            setNewTypeForm(prev => ({ ...prev, name: '' }));
        }
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const handleCreateType = async () => {
        try {
            setLoading(true);
            await inventoryApi.createInventoryTypeQuick(newTypeForm);
            setShowCreateTypeForm(false);
            setNewTypeForm({
                name: '',
                display_name: '',
                description: '',
                icon_name: '',
                color: '#007AFF',
                affects_availability: false,
                board_equivalent: 0.0,
                initial_quantity: 1
            });
            await loadInventoryData();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è');
        } finally {
            setLoading(false);
        }
    };

    const handleCreateItems = async () => {
        if (!selectedTypeForItems) return;
        
        try {
            setLoading(true);
            await inventoryApi.createInventoryItemsBulk(selectedTypeForItems, newItemsForm.quantity, newItemsForm.name_prefix);
            setShowCreateItemsForm(false);
            setSelectedTypeForItems(null);
            setNewItemsForm({ quantity: 1, name_prefix: '' });
            await loadInventoryData();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è');
        } finally {
            setLoading(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    const getStatusIcon = (status: string): string => {
        switch (status) {
            case 'available': return '‚úÖ';
            case 'in_use': return 'üîµ';
            case 'servicing': return 'üîß';
            case 'repair': return 'üî¥';
            default: return '‚ùì';
        }
    };

    const getStatusName = (status: string): string => {
        switch (status) {
            case 'available': return '–î–æ—Å—Ç—É–ø–Ω–æ';
            case 'in_use': return '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è';
            case 'servicing': return '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ';
            case 'repair': return '–í —Ä–µ–º–æ–Ω—Ç–µ';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    };

    if (!isOpen) return null;

    return (
        <AnimatePresence>
            <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.3 }}
                style={{
                    position: 'fixed',
                    inset: 0,
                    zIndex: 1000,
                    background: 'linear-gradient(135deg, rgba(15, 15, 20, 0.98) 0%, rgba(25, 25, 35, 0.95) 30%, rgba(20, 20, 30, 0.97) 70%, rgba(10, 10, 15, 0.98) 100%)',
                    backdropFilter: 'blur(20px)',
                    display: 'flex',
                    flexDirection: 'column',
                    overflow: 'hidden'
                }}
                onClick={onClose}
            >
                <motion.div
                    initial={{ y: '100%' }}
                    animate={{ y: 0 }}
                    exit={{ y: '100%' }}
                    transition={{ 
                        type: "spring", 
                        stiffness: 300, 
                        damping: 30,
                        duration: 0.5 
                    }}
                    style={{
                        background: 'linear-gradient(135deg, rgba(28, 28, 30, 0.95) 0%, rgba(44, 44, 46, 0.9) 50%, rgba(28, 28, 30, 0.95) 100%)',
                        backdropFilter: 'blur(30px)',
                        flex: 1,
                        display: 'flex',
                        flexDirection: 'column',
                        overflow: 'hidden',
                        border: '1px solid rgba(255, 255, 255, 0.1)',
                        boxShadow: '0 -8px 32px rgba(0, 0, 0, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.1)',
                    }}
                    onClick={(e) => e.stopPropagation()}
                >
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <div style={{
                        padding: `${padding}px ${padding}px ${padding - 4}px`,
                        borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'space-between',
                        background: 'linear-gradient(135deg, rgba(44, 44, 46, 0.8) 0%, rgba(58, 58, 60, 0.6) 100%)',
                        backdropFilter: 'blur(20px)',
                        position: 'relative',
                        flexShrink: 0
                    }}>
                        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è */}
                        <div style={{
                            position: 'absolute',
                            top: 8,
                            left: '50%',
                            transform: 'translateX(-50%)',
                            width: 36,
                            height: 4,
                            backgroundColor: 'rgba(255, 255, 255, 0.3)',
                            borderRadius: 2
                        }} />
                        
                        <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: 12
                        }}>
                            <span style={{ fontSize: isSmallMobile ? 20 : 24 }}>üì¶</span>
                            <h2 style={{
                                margin: 0,
                                color: '#fff',
                                fontSize: titleSize,
                                fontWeight: 700,
                                textShadow: '0 2px 4px rgba(0, 0, 0, 0.3)'
                            }}>
                                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
                            </h2>
                        </div>
                        
                        <motion.button
                            whileHover={{ scale: 1.1, backgroundColor: 'rgba(255, 255, 255, 0.2)' }}
                            whileTap={{ scale: 0.9 }}
                            onClick={onClose}
                            style={{
                                background: 'rgba(255, 255, 255, 0.1)',
                                border: '1px solid rgba(255, 255, 255, 0.2)',
                                borderRadius: 12,
                                width: 36,
                                height: 36,
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                color: '#fff',
                                fontSize: 18,
                                cursor: 'pointer',
                                backdropFilter: 'blur(10px)'
                            }}
                        >
                            ‚úï
                        </motion.button>
                    </div>

                    {/* –í–∫–ª–∞–¥–∫–∏ */}
                    <div style={{
                        display: 'flex',
                        borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
                        padding: `0 ${padding}px`,
                        background: 'rgba(28, 28, 30, 0.6)',
                        backdropFilter: 'blur(15px)',
                        flexShrink: 0
                    }}>
                        {[
                            { key: 'overview', label: 'üìä –û–±–∑–æ—Ä', icon: 'üìä' },
                            { key: 'types', label: 'üì¶ –¢–∏–ø—ã', icon: 'üì¶' },
                            { key: 'items', label: 'üìã –ï–¥–∏–Ω–∏—Ü—ã', icon: 'üìã' }
                        ].map(tab => (
                            <motion.button
                                key={tab.key}
                                whileHover={{ backgroundColor: 'rgba(0, 122, 255, 0.1)' }}
                                whileTap={{ scale: 0.98 }}
                                onClick={() => setActiveTab(tab.key as any)}
                                style={{
                                    background: activeTab === tab.key ? 'rgba(0, 122, 255, 0.2)' : 'transparent',
                                    border: 'none',
                                    color: activeTab === tab.key ? '#007AFF' : 'rgba(255, 255, 255, 0.7)',
                                    padding: `${isSmallMobile ? 12 : 16}px ${isSmallMobile ? 8 : 12}px`,
                                    fontSize: isSmallMobile ? 12 : 14,
                                    fontWeight: 600,
                                    cursor: 'pointer',
                                    borderRadius: '12px 12px 0 0',
                                    position: 'relative',
                                    flex: 1,
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    gap: isSmallMobile ? 4 : 6,
                                    transition: 'all 0.3s ease'
                                }}
                            >
                                <span style={{ fontSize: isSmallMobile ? 14 : 16 }}>{tab.icon}</span>
                                <span style={{ 
                                    display: isSmallMobile ? 'none' : 'inline',
                                    whiteSpace: 'nowrap'
                                }}>
                                    {tab.label.split(' ')[1]}
                                </span>
                                {activeTab === tab.key && (
                                    <motion.div
                                        layoutId="activeTab"
                                        style={{
                                            position: 'absolute',
                                            bottom: -1,
                                            left: 0,
                                            right: 0,
                                            height: 2,
                                            background: '#007AFF',
                                            borderRadius: '1px 1px 0 0'
                                        }}
                                    />
                                )}
                            </motion.button>
                        ))}
                    </div>

                    {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
                    <div style={{
                        flex: 1,
                        overflow: 'auto',
                        padding: `${padding}px`,
                        WebkitOverflowScrolling: 'touch'
                    }}>
                        {loading ? (
                            <div style={{
                                display: 'flex',
                                flexDirection: 'column',
                                alignItems: 'center',
                                justifyContent: 'center',
                                padding: '60px 20px',
                                color: 'rgba(255, 255, 255, 0.7)'
                            }}>
                                <div style={{
                                    width: isSmallMobile ? 32 : 40,
                                    height: isSmallMobile ? 32 : 40,
                                    border: '3px solid rgba(255, 255, 255, 0.1)',
                                    borderTop: '3px solid #007AFF',
                                    borderRadius: '50%',
                                    animation: 'spin 1s linear infinite',
                                    marginBottom: 16
                                }} />
                                <div style={{ fontSize, textAlign: 'center' }}>
                                    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...
                                </div>
                                <style>{`
                                    @keyframes spin {
                                        0% { transform: rotate(0deg); }
                                        100% { transform: rotate(360deg); }
                                    }
                                `}</style>
                            </div>
                        ) : error ? (
                            <div style={{
                                textAlign: 'center',
                                padding: '60px 20px',
                                color: 'rgba(255, 255, 255, 0.6)'
                            }}>
                                <div style={{ fontSize: isSmallMobile ? 48 : 64, marginBottom: 16 }}>‚ùå</div>
                                <h3 style={{
                                    color: 'rgba(255, 255, 255, 0.8)',
                                    fontSize: isSmallMobile ? 16 : 20,
                                    fontWeight: 600,
                                    margin: '0 0 8px 0'
                                }}>
                                    –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                                </h3>
                                <p style={{ fontSize, margin: 0, lineHeight: 1.5 }}>{error}</p>
                            </div>
                        ) : (
                            <>
                                {activeTab === 'overview' && renderOverview()}
                                {activeTab === 'types' && renderTypes()}
                                {activeTab === 'items' && renderItems()}
                            </>
                        )}
                    </div>
                </motion.div>
            </motion.div>
        </AnimatePresence>
    );

    // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ "–û–±–∑–æ—Ä"
    function renderOverview() {
        if (!inventoryStats) return null;

        return (
            <div style={{ display: 'flex', flexDirection: 'column', gap: 20 }}>
                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
                <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(2, 1fr)',
                    gap: 12
                }}>
                    {[
                        { value: inventoryStats.total_types, label: '–¢–∏–ø–æ–≤', color: '#52C41A', icon: 'üì¶' },
                        { value: inventoryStats.total_items, label: '–ï–¥–∏–Ω–∏—Ü', color: '#007AFF', icon: 'üìã' },
                        { value: inventoryStats.available_items, label: '–î–æ—Å—Ç—É–ø–Ω–æ', color: '#52C41A', icon: '‚úÖ' },
                        { value: inventoryStats.in_use_items, label: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', color: '#007AFF', icon: 'üîµ' }
                    ].map((stat, index) => (
                        <motion.div
                            key={index}
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: index * 0.1 }}
                            style={{
                                background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.12) 0%, rgba(255, 255, 255, 0.08) 100%)',
                                backdropFilter: 'blur(15px)',
                                border: '1px solid rgba(255, 255, 255, 0.15)',
                                borderRadius: 16,
                                padding: cardPadding,
                                textAlign: 'center',
                                position: 'relative',
                                overflow: 'hidden'
                            }}
                        >
                            <div style={{
                                fontSize: isSmallMobile ? 24 : 28,
                                fontWeight: 800,
                                color: stat.color,
                                marginBottom: 4,
                                textShadow: '0 2px 4px rgba(0, 0, 0, 0.3)'
                            }}>
                                {stat.value}
                            </div>
                            <div style={{
                                fontSize: isSmallMobile ? 11 : 12,
                                color: 'rgba(255, 255, 255, 0.8)',
                                fontWeight: 500,
                                textTransform: 'uppercase',
                                letterSpacing: 0.5
                            }}>
                                {stat.label}
                            </div>
                            <div style={{
                                position: 'absolute',
                                top: 8,
                                right: 8,
                                fontSize: isSmallMobile ? 16 : 18,
                                opacity: 0.3
                            }}>
                                {stat.icon}
                            </div>
                        </motion.div>
                    ))}
                </div>

                {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º */}
                {Object.keys(inventoryStats.by_type).length > 0 && (
                    <div>
                        <h3 style={{
                            color: '#fff',
                            fontSize: isSmallMobile ? 16 : 18,
                            fontWeight: 600,
                            margin: '0 0 12px 0',
                            display: 'flex',
                            alignItems: 'center',
                            gap: 8
                        }}>
                            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
                        </h3>
                        <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>
                            {Object.entries(inventoryStats.by_type).map(([typeName, typeStats]) => {
                                const type = inventoryTypes.find(t => t.name === typeName);
                                return (
                                    <motion.div
                                        key={typeName}
                                        initial={{ opacity: 0, x: -20 }}
                                        animate={{ opacity: 1, x: 0 }}
                                        style={{
                                            background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.12) 0%, rgba(255, 255, 255, 0.08) 100%)',
                                            backdropFilter: 'blur(15px)',
                                            border: '1px solid rgba(255, 255, 255, 0.15)',
                                            borderRadius: 14,
                                            padding: cardPadding,
                                            borderLeft: `4px solid ${type?.color || '#007AFF'}`
                                        }}
                                    >
                                        <div style={{
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: 12,
                                            marginBottom: 12
                                        }}>
                                            <div style={{
                                                fontSize: isSmallMobile ? 20 : 24,
                                                width: isSmallMobile ? 32 : 36,
                                                height: isSmallMobile ? 32 : 36,
                                                display: 'flex',
                                                alignItems: 'center',
                                                justifyContent: 'center',
                                                borderRadius: 10,
                                                background: 'rgba(255, 255, 255, 0.1)'
                                            }}>
                                                {type?.icon_name || 'üì¶'}
                                            </div>
                                            <div style={{ flex: 1 }}>
                                                <div style={{
                                                    color: '#fff',
                                                    fontSize: isSmallMobile ? 14 : 16,
                                                    fontWeight: 600
                                                }}>
                                                    {type?.display_name || typeName}
                                                </div>
                                            </div>
                                        </div>
                                        <div style={{
                                            display: 'grid',
                                            gridTemplateColumns: 'repeat(4, 1fr)',
                                            gap: 8
                                        }}>
                                            {[
                                                { value: typeStats.available, label: '–î–æ—Å—Ç—É–ø–Ω–æ', color: '#52C41A' },
                                                { value: typeStats.in_use, label: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', color: '#007AFF' },
                                                { value: typeStats.servicing, label: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', color: '#FFD600' },
                                                { value: typeStats.repair, label: '–†–µ–º–æ–Ω—Ç', color: '#FF4D4F' }
                                            ].map((stat, idx) => (
                                                <div key={idx} style={{ textAlign: 'center' }}>
                                                    <div style={{
                                                        fontSize: isSmallMobile ? 16 : 18,
                                                        fontWeight: 700,
                                                        color: stat.color
                                                    }}>
                                                        {stat.value}
                                                    </div>
                                                    <div style={{
                                                        fontSize: isSmallMobile ? 9 : 10,
                                                        color: 'rgba(255, 255, 255, 0.6)',
                                                        textTransform: 'uppercase',
                                                        letterSpacing: 0.3
                                                    }}>
                                                        {stat.label}
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </motion.div>
                                );
                            })}
                        </div>
                    </div>
                )}
            </div>
        );
    }

    // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ "–¢–∏–ø—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"
    function renderTypes() {
        return (
            <div style={{ display: 'flex', flexDirection: 'column', gap: 20 }}>
                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <div style={{
                    display: 'flex',
                    gap: 12,
                    flexWrap: 'wrap'
                }}>
                    <motion.button
                        whileHover={{ scale: 1.02, backgroundColor: '#0056CC' }}
                        whileTap={{ scale: 0.98 }}
                        onClick={() => setShowCreateTypeForm(true)}
                        style={{
                            background: 'linear-gradient(135deg, #007AFF 0%, #0056CC 100%)',
                            border: 'none',
                            borderRadius: 12,
                            padding: `${isSmallMobile ? 12 : 14}px ${isSmallMobile ? 16 : 20}px`,
                            color: '#fff',
                            fontSize: isSmallMobile ? 13 : 14,
                            fontWeight: 600,
                            cursor: 'pointer',
                            display: 'flex',
                            alignItems: 'center',
                            gap: 8,
                            boxShadow: '0 4px 16px rgba(0, 122, 255, 0.3)',
                            flex: 1,
                            justifyContent: 'center',
                            minHeight: buttonHeight
                        }}
                    >
                        <span style={{ fontSize: isSmallMobile ? 14 : 16 }}>‚ûï</span>
                        –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø
                    </motion.button>
                    {inventoryTypes.length > 0 && (
                        <motion.button
                            whileHover={{ scale: 1.02, backgroundColor: '#28A745' }}
                            whileTap={{ scale: 0.98 }}
                            onClick={() => setShowCreateItemsForm(true)}
                            style={{
                                background: 'linear-gradient(135deg, #30D158 0%, #28A745 100%)',
                                border: 'none',
                                borderRadius: 12,
                                padding: `${isSmallMobile ? 12 : 14}px ${isSmallMobile ? 16 : 20}px`,
                                color: '#fff',
                                fontSize: isSmallMobile ? 13 : 14,
                                fontWeight: 600,
                                cursor: 'pointer',
                                display: 'flex',
                                alignItems: 'center',
                                gap: 8,
                                boxShadow: '0 4px 16px rgba(52, 199, 89, 0.3)',
                                flex: 1,
                                justifyContent: 'center',
                                minHeight: buttonHeight
                            }}
                        >
                            <span style={{ fontSize: isSmallMobile ? 14 : 16 }}>üì¶</span>
                            –î–æ–±–∞–≤–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã
                        </motion.button>
                    )}
                </div>

                {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ */}
                <AnimatePresence>
                    {showCreateTypeForm && (
                        <motion.div
                            initial={{ opacity: 0, height: 0 }}
                            animate={{ opacity: 1, height: 'auto' }}
                            exit={{ opacity: 0, height: 0 }}
                            style={{
                                background: 'rgba(28, 28, 30, 0.8)',
                                border: '1px solid rgba(255, 255, 255, 0.1)',
                                borderRadius: 16,
                                padding: cardPadding,
                                backdropFilter: 'blur(16px)'
                            }}
                        >
                            <h3 style={{
                                margin: '0 0 16px 0',
                                fontSize: isSmallMobile ? 16 : 18,
                                fontWeight: 600,
                                color: '#ffffff',
                                display: 'flex',
                                alignItems: 'center',
                                gap: 8
                            }}>
                                ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞
                            </h3>
                            
                            {/* –ü–æ–ª—è —Ñ–æ—Ä–º—ã */}
                            <div style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>
                                <div>
                                    <label style={{
                                        fontSize: isSmallMobile ? 12 : 14,
                                        fontWeight: 500,
                                        color: 'rgba(255, 255, 255, 0.9)',
                                        marginBottom: 6,
                                        display: 'block'
                                    }}>
                                        –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ *
                                    </label>
                                    <input
                                        type="text"
                                        placeholder="–ö–∞—è–∫, –°–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –∂–∏–ª–µ—Ç, –í–µ—Å–ª–æ..."
                                        value={newTypeForm.display_name}
                                        onChange={(e) => handleDisplayNameChange(e.target.value)}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.05)',
                                            border: '1px solid rgba(255, 255, 255, 0.1)',
                                            borderRadius: 8,
                                            padding: 12,
                                            color: '#ffffff',
                                            fontSize: isSmallMobile ? 14 : 16,
                                            width: '100%',
                                            boxSizing: 'border-box'
                                        }}
                                    />
                                </div>
                                
                                <div>
                                    <label style={{
                                        fontSize: isSmallMobile ? 12 : 14,
                                        fontWeight: 500,
                                        color: 'rgba(255, 255, 255, 0.9)',
                                        marginBottom: 6,
                                        display: 'block'
                                    }}>
                                        –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è *
                                    </label>
                                    <input
                                        type="text"
                                        placeholder={isTranslating ? "–ü–µ—Ä–µ–≤–æ–¥–∏–º..." : "kayak, life_jacket, paddle..."}
                                        value={newTypeForm.name}
                                        onChange={(e) => setNewTypeForm({...newTypeForm, name: e.target.value})}
                                        disabled={isTranslating}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.05)',
                                            border: '1px solid rgba(255, 255, 255, 0.1)',
                                            borderRadius: 8,
                                            padding: 12,
                                            color: '#ffffff',
                                            fontSize: isSmallMobile ? 14 : 16,
                                            width: '100%',
                                            boxSizing: 'border-box',
                                            opacity: isTranslating ? 0.6 : 1
                                        }}
                                    />
                                </div>

                                {/* –í—ã–±–æ—Ä –∏–∫–æ–Ω–∫–∏ */}
                                <div>
                                    <label style={{
                                        fontSize: isSmallMobile ? 12 : 14,
                                        fontWeight: 500,
                                        color: 'rgba(255, 255, 255, 0.9)',
                                        marginBottom: 6,
                                        display: 'block'
                                    }}>
                                        –ò–∫–æ–Ω–∫–∞
                                    </label>
                                    <div style={{
                                        display: 'grid',
                                        gridTemplateColumns: `repeat(${isSmallMobile ? 6 : 8}, 1fr)`,
                                        gap: 6,
                                        maxHeight: 120,
                                        overflow: 'auto',
                                        padding: 8,
                                        background: 'rgba(255, 255, 255, 0.03)',
                                        borderRadius: 8,
                                        border: '1px solid rgba(255, 255, 255, 0.1)'
                                    }}>
                                        {inventoryIcons.map((icon, index) => (
                                            <motion.button
                                                key={index}
                                                type="button"
                                                whileHover={{ scale: 1.1 }}
                                                whileTap={{ scale: 0.95 }}
                                                onClick={() => setNewTypeForm({...newTypeForm, icon_name: icon})}
                                                style={{
                                                    width: isSmallMobile ? 32 : 36,
                                                    height: isSmallMobile ? 32 : 36,
                                                    border: `2px solid ${newTypeForm.icon_name === icon ? '#007AFF' : 'rgba(255, 255, 255, 0.1)'}`,
                                                    borderRadius: 8,
                                                    background: newTypeForm.icon_name === icon ? 'rgba(0, 122, 255, 0.2)' : 'rgba(255, 255, 255, 0.05)',
                                                    display: 'flex',
                                                    alignItems: 'center',
                                                    justifyContent: 'center',
                                                    fontSize: isSmallMobile ? 16 : 18,
                                                    cursor: 'pointer'
                                                }}
                                            >
                                                {icon}
                                            </motion.button>
                                        ))}
                                    </div>
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã */}
                                <div style={{
                                    display: 'flex',
                                    gap: 8,
                                    justifyContent: 'flex-end',
                                    marginTop: 8
                                }}>
                                    <button
                                        onClick={() => setShowCreateTypeForm(false)}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.1)',
                                            color: 'rgba(255, 255, 255, 0.8)',
                                            border: '1px solid rgba(255, 255, 255, 0.2)',
                                            borderRadius: 8,
                                            padding: '10px 16px',
                                            fontSize: isSmallMobile ? 13 : 14,
                                            cursor: 'pointer'
                                        }}
                                    >
                                        –û—Ç–º–µ–Ω–∞
                                    </button>
                                    <button
                                        onClick={handleCreateType}
                                        disabled={!newTypeForm.name || !newTypeForm.display_name}
                                        style={{
                                            background: 'linear-gradient(135deg, #007AFF 0%, #0056CC 100%)',
                                            color: 'white',
                                            border: 'none',
                                            borderRadius: 8,
                                            padding: '10px 20px',
                                            fontSize: isSmallMobile ? 13 : 14,
                                            fontWeight: 600,
                                            cursor: 'pointer',
                                            opacity: (!newTypeForm.name || !newTypeForm.display_name) ? 0.5 : 1
                                        }}
                                    >
                                        ‚úÖ –°–æ–∑–¥–∞—Ç—å
                                    </button>
                                </div>
                            </div>
                        </motion.div>
                    )}
                </AnimatePresence>

                {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü */}
                <AnimatePresence>
                    {showCreateItemsForm && (
                        <motion.div
                            initial={{ opacity: 0, height: 0 }}
                            animate={{ opacity: 1, height: 'auto' }}
                            exit={{ opacity: 0, height: 0 }}
                            style={{
                                background: 'rgba(28, 28, 30, 0.8)',
                                border: '1px solid rgba(255, 255, 255, 0.1)',
                                borderRadius: 16,
                                padding: cardPadding,
                                backdropFilter: 'blur(16px)'
                            }}
                        >
                            <h3 style={{
                                margin: '0 0 16px 0',
                                fontSize: isSmallMobile ? 16 : 18,
                                fontWeight: 600,
                                color: '#ffffff',
                                display: 'flex',
                                alignItems: 'center',
                                gap: 8
                            }}>
                                üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                            </h3>
                            
                            {/* –ü–æ–ª—è —Ñ–æ—Ä–º—ã */}
                            <div style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>
                                <div>
                                    <label style={{
                                        fontSize: isSmallMobile ? 12 : 14,
                                        fontWeight: 500,
                                        color: 'rgba(255, 255, 255, 0.9)',
                                        marginBottom: 6,
                                        display: 'block'
                                    }}>
                                        –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è *
                                    </label>
                                    <select
                                        value={selectedTypeForItems || ''}
                                        onChange={(e) => setSelectedTypeForItems(Number(e.target.value) || null)}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.05)',
                                            border: '1px solid rgba(255, 255, 255, 0.1)',
                                            borderRadius: 8,
                                            padding: 12,
                                            color: '#ffffff',
                                            fontSize: isSmallMobile ? 14 : 16,
                                            width: '100%',
                                            boxSizing: 'border-box'
                                        }}
                                    >
                                        <option value="" style={{ background: '#1C1C1E', color: '#ffffff' }}>
                                            –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø...
                                        </option>
                                        {inventoryTypes.map(type => (
                                            <option 
                                                key={type.id} 
                                                value={type.id}
                                                style={{ background: '#1C1C1E', color: '#ffffff' }}
                                            >
                                                {type.icon_name} {type.display_name}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                                
                                <div>
                                    <label style={{
                                        fontSize: isSmallMobile ? 12 : 14,
                                        fontWeight: 500,
                                        color: 'rgba(255, 255, 255, 0.9)',
                                        marginBottom: 6,
                                        display: 'block'
                                    }}>
                                        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü *
                                    </label>
                                    <input
                                        type="number"
                                        min="1"
                                        max="50"
                                        placeholder="1"
                                        value={newItemsForm.quantity}
                                        onChange={(e) => setNewItemsForm({...newItemsForm, quantity: parseInt(e.target.value) || 1})}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.05)',
                                            border: '1px solid rgba(255, 255, 255, 0.1)',
                                            borderRadius: 8,
                                            padding: 12,
                                            color: '#ffffff',
                                            fontSize: isSmallMobile ? 14 : 16,
                                            width: '100%',
                                            boxSizing: 'border-box'
                                        }}
                                    />
                                </div>

                                <div>
                                    <label style={{
                                        fontSize: isSmallMobile ? 12 : 14,
                                        fontWeight: 500,
                                        color: 'rgba(255, 255, 255, 0.9)',
                                        marginBottom: 6,
                                        display: 'block'
                                    }}>
                                        –ü—Ä–µ—Ñ–∏–∫—Å –Ω–∞–∑–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                                    </label>
                                    <input
                                        type="text"
                                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: SUP-01, –ñ–∏–ª–µ—Ç-–ê..."
                                        value={newItemsForm.name_prefix}
                                        onChange={(e) => setNewItemsForm({...newItemsForm, name_prefix: e.target.value})}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.05)',
                                            border: '1px solid rgba(255, 255, 255, 0.1)',
                                            borderRadius: 8,
                                            padding: 12,
                                            color: '#ffffff',
                                            fontSize: isSmallMobile ? 14 : 16,
                                            width: '100%',
                                            boxSizing: 'border-box'
                                        }}
                                    />
                                    <div style={{
                                        fontSize: isSmallMobile ? 11 : 12,
                                        color: 'rgba(255, 255, 255, 0.6)',
                                        marginTop: 4,
                                        lineHeight: 1.3
                                    }}>
                                        –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
                                    </div>
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã */}
                                <div style={{
                                    display: 'flex',
                                    gap: 8,
                                    justifyContent: 'flex-end',
                                    marginTop: 8
                                }}>
                                    <button
                                        onClick={() => {
                                            setShowCreateItemsForm(false);
                                            setSelectedTypeForItems(null);
                                            setNewItemsForm({ quantity: 1, name_prefix: '' });
                                        }}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.1)',
                                            color: 'rgba(255, 255, 255, 0.8)',
                                            border: '1px solid rgba(255, 255, 255, 0.2)',
                                            borderRadius: 8,
                                            padding: '10px 16px',
                                            fontSize: isSmallMobile ? 13 : 14,
                                            cursor: 'pointer'
                                        }}
                                    >
                                        –û—Ç–º–µ–Ω–∞
                                    </button>
                                    <button
                                        onClick={handleCreateItems}
                                        disabled={!selectedTypeForItems || newItemsForm.quantity < 1}
                                        style={{
                                            background: 'linear-gradient(135deg, #30D158 0%, #28A745 100%)',
                                            color: 'white',
                                            border: 'none',
                                            borderRadius: 8,
                                            padding: '10px 20px',
                                            fontSize: isSmallMobile ? 13 : 14,
                                            fontWeight: 600,
                                            cursor: 'pointer',
                                            opacity: (!selectedTypeForItems || newItemsForm.quantity < 1) ? 0.5 : 1
                                        }}
                                    >
                                        üì¶ –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—ã
                                    </button>
                                </div>
                            </div>
                        </motion.div>
                    )}
                </AnimatePresence>

                {/* –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ */}
                {inventoryTypes.length === 0 && !showCreateTypeForm ? (
                    <div style={{
                        textAlign: 'center',
                        padding: '60px 20px',
                        color: 'rgba(255, 255, 255, 0.6)'
                    }}>
                        <div style={{ fontSize: isSmallMobile ? 48 : 64, marginBottom: 16 }}>üì¶</div>
                        <h3 style={{
                            color: 'rgba(255, 255, 255, 0.8)',
                            fontSize: isSmallMobile ? 16 : 20,
                            fontWeight: 600,
                            margin: '0 0 8px 0'
                        }}>
                            –ù–µ—Ç —Ç–∏–ø–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                        </h3>
                        <p style={{ fontSize, margin: 0, lineHeight: 1.5 }}>
                            –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
                        </p>
                    </div>
                ) : (
                    <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>
                        {inventoryTypes.map(type => (
                            <motion.div
                                key={type.id}
                                initial={{ opacity: 0, y: 20 }}
                                animate={{ opacity: 1, y: 0 }}
                                style={{
                                    background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.12) 0%, rgba(255, 255, 255, 0.08) 100%)',
                                    backdropFilter: 'blur(15px)',
                                    border: '1px solid rgba(255, 255, 255, 0.15)',
                                    borderRadius: 14,
                                    padding: cardPadding,
                                    borderLeft: `4px solid ${type.color || '#007AFF'}`
                                }}
                            >
                                <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: 12,
                                    marginBottom: type.description ? 8 : 0
                                }}>
                                    <div style={{
                                        fontSize: isSmallMobile ? 20 : 24,
                                        width: isSmallMobile ? 36 : 40,
                                        height: isSmallMobile ? 36 : 40,
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        borderRadius: 12,
                                        background: 'rgba(255, 255, 255, 0.1)'
                                    }}>
                                        {type.icon_name || 'üì¶'}
                                    </div>
                                    <div style={{ flex: 1 }}>
                                        <div style={{
                                            color: '#fff',
                                            fontSize: isSmallMobile ? 14 : 16,
                                            fontWeight: 600
                                        }}>
                                            {type.display_name}
                                        </div>
                                        {type.name !== type.display_name && (
                                            <div style={{
                                                fontSize: isSmallMobile ? 11 : 12,
                                                color: 'rgba(255,255,255,0.5)'
                                            }}>
                                                ({type.name})
                                            </div>
                                        )}
                                    </div>
                                    <div style={{
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: 12
                                    }}>
                                        <div style={{ textAlign: 'center' }}>
                                            <div style={{
                                                fontSize: isSmallMobile ? 16 : 18,
                                                fontWeight: 700,
                                                color: '#007AFF'
                                            }}>
                                                {type.items_count || 0}
                                            </div>
                                            <div style={{
                                                fontSize: isSmallMobile ? 9 : 10,
                                                color: 'rgba(255, 255, 255, 0.6)',
                                                textTransform: 'uppercase'
                                            }}>
                                                –í—Å–µ–≥–æ
                                            </div>
                                        </div>
                                        <div style={{ textAlign: 'center' }}>
                                            <div style={{
                                                fontSize: isSmallMobile ? 16 : 18,
                                                fontWeight: 700,
                                                color: '#52C41A'
                                            }}>
                                                {type.available_count || 0}
                                            </div>
                                            <div style={{
                                                fontSize: isSmallMobile ? 9 : 10,
                                                color: 'rgba(255, 255, 255, 0.6)',
                                                textTransform: 'uppercase'
                                            }}>
                                                –î–æ—Å—Ç—É–ø–Ω–æ
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                {type.description && (
                                    <p style={{
                                        color: 'rgba(255, 255, 255, 0.7)',
                                        fontSize: isSmallMobile ? 12 : 13,
                                        margin: 0,
                                        lineHeight: 1.4
                                    }}>
                                        {type.description}
                                    </p>
                                )}
                            </motion.div>
                        ))}
                    </div>
                )}
            </div>
        );
    }

    // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ "–ï–¥–∏–Ω–∏—Ü—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"
    function renderItems() {
        return (
            <div style={{ display: 'flex', flexDirection: 'column', gap: 20 }}>
                {inventoryTypes.length > 0 && (
                    <motion.button
                        whileHover={{ scale: 1.02, backgroundColor: '#28A745' }}
                        whileTap={{ scale: 0.98 }}
                        onClick={() => setShowCreateItemsForm(true)}
                        style={{
                            background: 'linear-gradient(135deg, #30D158 0%, #28A745 100%)',
                            border: 'none',
                            borderRadius: 12,
                            padding: `${isSmallMobile ? 12 : 14}px ${isSmallMobile ? 16 : 20}px`,
                            color: '#fff',
                            fontSize: isSmallMobile ? 13 : 14,
                            fontWeight: 600,
                            cursor: 'pointer',
                            display: 'flex',
                            alignItems: 'center',
                            gap: 8,
                            boxShadow: '0 4px 16px rgba(52, 199, 89, 0.3)',
                            justifyContent: 'center',
                            minHeight: buttonHeight
                        }}
                    >
                        <span style={{ fontSize: isSmallMobile ? 14 : 16 }}>‚ûï</span>
                        –î–æ–±–∞–≤–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã
                    </motion.button>
                )}

                {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü */}
                <AnimatePresence>
                    {showCreateItemsForm && (
                        <motion.div
                            initial={{ opacity: 0, height: 0 }}
                            animate={{ opacity: 1, height: 'auto' }}
                            exit={{ opacity: 0, height: 0 }}
                            style={{
                                background: 'rgba(28, 28, 30, 0.8)',
                                border: '1px solid rgba(255, 255, 255, 0.1)',
                                borderRadius: 16,
                                padding: cardPadding,
                                backdropFilter: 'blur(16px)'
                            }}
                        >
                            <h3 style={{
                                margin: '0 0 16px 0',
                                fontSize: isSmallMobile ? 16 : 18,
                                fontWeight: 600,
                                color: '#ffffff',
                                display: 'flex',
                                alignItems: 'center',
                                gap: 8
                            }}>
                                üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                            </h3>
                            
                            {/* –ü–æ–ª—è —Ñ–æ—Ä–º—ã */}
                            <div style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>
                                <div>
                                    <label style={{
                                        fontSize: isSmallMobile ? 12 : 14,
                                        fontWeight: 500,
                                        color: 'rgba(255, 255, 255, 0.9)',
                                        marginBottom: 6,
                                        display: 'block'
                                    }}>
                                        –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è *
                                    </label>
                                    <select
                                        value={selectedTypeForItems || ''}
                                        onChange={(e) => setSelectedTypeForItems(Number(e.target.value) || null)}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.05)',
                                            border: '1px solid rgba(255, 255, 255, 0.1)',
                                            borderRadius: 8,
                                            padding: 12,
                                            color: '#ffffff',
                                            fontSize: isSmallMobile ? 14 : 16,
                                            width: '100%',
                                            boxSizing: 'border-box'
                                        }}
                                    >
                                        <option value="" style={{ background: '#1C1C1E', color: '#ffffff' }}>
                                            –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø...
                                        </option>
                                        {inventoryTypes.map(type => (
                                            <option 
                                                key={type.id} 
                                                value={type.id}
                                                style={{ background: '#1C1C1E', color: '#ffffff' }}
                                            >
                                                {type.icon_name} {type.display_name}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                                
                                <div>
                                    <label style={{
                                        fontSize: isSmallMobile ? 12 : 14,
                                        fontWeight: 500,
                                        color: 'rgba(255, 255, 255, 0.9)',
                                        marginBottom: 6,
                                        display: 'block'
                                    }}>
                                        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü *
                                    </label>
                                    <input
                                        type="number"
                                        min="1"
                                        max="50"
                                        placeholder="1"
                                        value={newItemsForm.quantity}
                                        onChange={(e) => setNewItemsForm({...newItemsForm, quantity: parseInt(e.target.value) || 1})}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.05)',
                                            border: '1px solid rgba(255, 255, 255, 0.1)',
                                            borderRadius: 8,
                                            padding: 12,
                                            color: '#ffffff',
                                            fontSize: isSmallMobile ? 14 : 16,
                                            width: '100%',
                                            boxSizing: 'border-box'
                                        }}
                                    />
                                </div>

                                <div>
                                    <label style={{
                                        fontSize: isSmallMobile ? 12 : 14,
                                        fontWeight: 500,
                                        color: 'rgba(255, 255, 255, 0.9)',
                                        marginBottom: 6,
                                        display: 'block'
                                    }}>
                                        –ü—Ä–µ—Ñ–∏–∫—Å –Ω–∞–∑–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                                    </label>
                                    <input
                                        type="text"
                                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: SUP-01, –ñ–∏–ª–µ—Ç-–ê..."
                                        value={newItemsForm.name_prefix}
                                        onChange={(e) => setNewItemsForm({...newItemsForm, name_prefix: e.target.value})}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.05)',
                                            border: '1px solid rgba(255, 255, 255, 0.1)',
                                            borderRadius: 8,
                                            padding: 12,
                                            color: '#ffffff',
                                            fontSize: isSmallMobile ? 14 : 16,
                                            width: '100%',
                                            boxSizing: 'border-box'
                                        }}
                                    />
                                    <div style={{
                                        fontSize: isSmallMobile ? 11 : 12,
                                        color: 'rgba(255, 255, 255, 0.6)',
                                        marginTop: 4,
                                        lineHeight: 1.3
                                    }}>
                                        –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
                                    </div>
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã */}
                                <div style={{
                                    display: 'flex',
                                    gap: 8,
                                    justifyContent: 'flex-end',
                                    marginTop: 8
                                }}>
                                    <button
                                        onClick={() => {
                                            setShowCreateItemsForm(false);
                                            setSelectedTypeForItems(null);
                                            setNewItemsForm({ quantity: 1, name_prefix: '' });
                                        }}
                                        style={{
                                            background: 'rgba(255, 255, 255, 0.1)',
                                            color: 'rgba(255, 255, 255, 0.8)',
                                            border: '1px solid rgba(255, 255, 255, 0.2)',
                                            borderRadius: 8,
                                            padding: '10px 16px',
                                            fontSize: isSmallMobile ? 13 : 14,
                                            cursor: 'pointer'
                                        }}
                                    >
                                        –û—Ç–º–µ–Ω–∞
                                    </button>
                                    <button
                                        onClick={handleCreateItems}
                                        disabled={!selectedTypeForItems || newItemsForm.quantity < 1}
                                        style={{
                                            background: 'linear-gradient(135deg, #30D158 0%, #28A745 100%)',
                                            color: 'white',
                                            border: 'none',
                                            borderRadius: 8,
                                            padding: '10px 20px',
                                            fontSize: isSmallMobile ? 13 : 14,
                                            fontWeight: 600,
                                            cursor: 'pointer',
                                            opacity: (!selectedTypeForItems || newItemsForm.quantity < 1) ? 0.5 : 1
                                        }}
                                    >
                                        üì¶ –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—ã
                                    </button>
                                </div>
                            </div>
                        </motion.div>
                    )}
                </AnimatePresence>

                {inventoryItems.length === 0 && !showCreateItemsForm ? (
                    <div style={{
                        textAlign: 'center',
                        padding: '60px 20px',
                        color: 'rgba(255, 255, 255, 0.6)'
                    }}>
                        <div style={{ fontSize: isSmallMobile ? 48 : 64, marginBottom: 16 }}>üìã</div>
                        <h3 style={{
                            color: 'rgba(255, 255, 255, 0.8)',
                            fontSize: isSmallMobile ? 16 : 20,
                            fontWeight: 600,
                            margin: '0 0 8px 0'
                        }}>
                            –ù–µ—Ç –µ–¥–∏–Ω–∏—Ü –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                        </h3>
                        <p style={{ fontSize, margin: 0, lineHeight: 1.5 }}>
                            {inventoryTypes.length === 0 
                                ? '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤–æ –≤–∫–ª–∞–¥–∫–µ "–¢–∏–ø—ã"'
                                : '–î–æ–±–∞–≤—å—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
                            }
                        </p>
                    </div>
                ) : (
                    <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>
                        {inventoryItems.map(item => {
                            const type = inventoryTypes.find(t => t.id === item.inventory_type_id);
                            return (
                                <motion.div
                                    key={item.id}
                                    initial={{ opacity: 0, y: 20 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    style={{
                                        background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.12) 0%, rgba(255, 255, 255, 0.08) 100%)',
                                        backdropFilter: 'blur(15px)',
                                        border: '1px solid rgba(255, 255, 255, 0.15)',
                                        borderRadius: 12,
                                        padding: cardPadding,
                                        borderLeft: `4px solid ${
                                            item.status === 'available' ? '#52C41A' :
                                            item.status === 'in_use' ? '#007AFF' :
                                            item.status === 'servicing' ? '#FFD600' :
                                            item.status === 'repair' ? '#FF4D4F' : '#86868B'
                                        }`
                                    }}
                                >
                                    <div style={{
                                        display: 'flex',
                                        justifyContent: 'space-between',
                                        alignItems: 'flex-start',
                                        marginBottom: 8
                                    }}>
                                        <div style={{
                                            color: '#fff',
                                            fontSize: isSmallMobile ? 14 : 16,
                                            fontWeight: 600
                                        }}>
                                            {type?.icon_name || 'üì¶'} {item.name || `${type?.display_name} #${item.id}`}
                                        </div>
                                        <div style={{
                                            padding: '4px 8px',
                                            borderRadius: 6,
                                            fontSize: isSmallMobile ? 10 : 12,
                                            fontWeight: 500,
                                            textTransform: 'uppercase',
                                            background: item.status === 'available' ? 'rgba(82, 196, 26, 0.2)' :
                                                       item.status === 'in_use' ? 'rgba(0, 122, 255, 0.2)' :
                                                       item.status === 'servicing' ? 'rgba(255, 212, 0, 0.2)' :
                                                       item.status === 'repair' ? 'rgba(255, 77, 79, 0.2)' : 'rgba(134, 134, 139, 0.2)',
                                            color: item.status === 'available' ? '#52C41A' :
                                                  item.status === 'in_use' ? '#007AFF' :
                                                  item.status === 'servicing' ? '#FFD600' :
                                                  item.status === 'repair' ? '#FF4D4F' : '#86868B'
                                        }}>
                                            {getStatusIcon(item.status)} {getStatusName(item.status)}
                                        </div>
                                    </div>
                                    <div style={{
                                        color: 'rgba(255, 255, 255, 0.7)',
                                        fontSize: isSmallMobile ? 12 : 13,
                                        lineHeight: 1.4
                                    }}>
                                        <div><strong>–¢–∏–ø:</strong> {type?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                                        {item.serial_number && (
                                            <div><strong>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:</strong> {item.serial_number}</div>
                                        )}
                                        {item.current_booking_id && (
                                            <div><strong>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> {item.current_booking_id}</div>
                                        )}
                                        <div><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> {new Date(item.created_at).toLocaleDateString()}</div>
                                    </div>
                                </motion.div>
                            );
                        })}
                    </div>
                )}
            </div>
        );
    }
};

export default MobileInventoryModal; 