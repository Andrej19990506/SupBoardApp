import React from 'react';
import { NotificationData } from '../../store/slices/notifications-slice/notificationsSlice';
import { 
  ItemContainer, 
  ItemContent, 
  ItemHeader, 
  ItemTitle, 
  ItemTime,
  ItemBody,
  ItemFooter,
  ClientName,
  ActionButtons,
  ActionButton,
  RemoveButton,
  UnreadIndicator,
  PriorityIndicator
} from './itemStyles';

interface NotificationItemProps {
  notification: NotificationData;
  onClick: () => void;
  onRemove: () => void;
  timeAgo: string;
}

export const NotificationItem: React.FC<NotificationItemProps> = ({
  notification,
  onClick,
  onRemove,
  timeAgo
}) => {
  const getPriorityEmoji = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'üö®';
      case 'high': return '‚ö†Ô∏è';
      case 'medium': return 'üîî';
      case 'low': return '‚ÑπÔ∏è';
      default: return 'üîî';
    }
  };

  const getTypeDescription = (type: string) => {
    switch (type) {
      case 'pending_confirmation': return '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ';
      case 'client_arriving_soon': return '–ö–ª–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ –ø—Ä–∏–¥–µ—Ç';
      case 'client_arriving': return '–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è';
      case 'client_overdue': return '–ö–ª–∏–µ–Ω—Ç –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç';
      case 'return_time': return '–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞';
      case 'return_overdue': return '–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞';
      default: return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
    }
  };

  const handleItemClick = (e: React.MouseEvent) => {
    e.preventDefault();
    onClick();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å bookingId, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    if (notification.bookingId) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
      console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é:', notification.bookingId);
    }
  };

  const handleRemoveClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    onRemove();
  };

  const handleActionClick = (action: string, e: React.MouseEvent<HTMLButtonElement>) => {
    e.stopPropagation();
    console.log('–î–µ–π—Å—Ç–≤–∏–µ:', action, '–¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', notification.bookingId);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    switch (action) {
      case 'confirm':
        // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        break;
      case 'cancel':
        // –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        break;
      case 'contact':
      case 'contact_urgent':
        // –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        break;
      case 'arrived':
        // –û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—à–µ–ª
        break;
      case 'returned':
        // –û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω
        break;
      default:
        break;
    }
    
    // –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
    onClick();
  };

  return (
    <ItemContainer $isRead={notification.isRead} onClick={handleItemClick}>
      {!notification.isRead && <UnreadIndicator />}
      
      <PriorityIndicator $priority={notification.priority}>
        {getPriorityEmoji(notification.priority)}
      </PriorityIndicator>
      
      <ItemContent>
        <ItemHeader>
          <ItemTitle $isRead={notification.isRead}>
            {getTypeDescription(notification.type)}
          </ItemTitle>
          <ItemTime>{timeAgo}</ItemTime>
        </ItemHeader>
        
        <ItemBody $isRead={notification.isRead}>
          {notification.body}
        </ItemBody>
        
        {notification.clientName && (
          <ClientName>
            üë§ {notification.clientName}
          </ClientName>
        )}
        
        {notification.actions && notification.actions.length > 0 && (
          <ItemFooter>
            <ActionButtons>
              {notification.actions.slice(0, 2).map((action, index) => (
                <ActionButton
                  key={index}
                  onClick={(e) => handleActionClick(action.action, e)}
                  $priority={notification.priority}
                >
                  {action.title}
                </ActionButton>
              ))}
            </ActionButtons>
          </ItemFooter>
        )}
      </ItemContent>
      
      <RemoveButton onClick={handleRemoveClick} title="–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ">
        ‚úï
      </RemoveButton>
    </ItemContainer>
  );
}; 