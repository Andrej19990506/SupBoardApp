import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { 
  addNotification, 
  loadNotifications, 
  markAsRead,
  markAllAsRead,
  removeNotification,
  clearOldNotifications,
  NotificationData
} from '../../store/slices/notifications-slice/notificationsSlice';
import { NotificationStorageService } from '../../services/notificationStorageService';
import { notificationSoundService } from './NotificationSoundService';

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç IndexedDB —Å localStorage (—É–¥–∞–ª—è–µ—Ç –∏–∑ IndexedDB —Ç–æ, —á—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ localStorage)
 */
const syncIndexedDBWithLocalStorage = async () => {
  try {
    if (!navigator.serviceWorker.controller) {
      console.warn('‚ö†Ô∏è [useNotificationSync] Service Worker –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ localStorage
    const currentNotifications = NotificationStorageService.loadNotifications();
    
    const channel = new MessageChannel();
    
    return new Promise((resolve) => {
      channel.port1.onmessage = (event) => {
        if (event.data.type === 'SYNC_COMPLETED') {
          console.log('‚úÖ [useNotificationSync] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è IndexedDB –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          resolve(true);
        }
      };

      navigator.serviceWorker.controller!.postMessage({
        type: 'SYNC_NOTIFICATIONS',
        notifications: currentNotifications
      }, [channel.port2]);
    });
  } catch (error) {
    console.error('‚ùå [useNotificationSync] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ IndexedDB:', error);
  }
};

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ IndexedDB —á–µ—Ä–µ–∑ Service Worker
 */
const loadNotificationsFromIndexedDB = async (dispatch: any) => {
  try {
    if (!navigator.serviceWorker.controller) {
      console.warn('‚ö†Ô∏è [useNotificationSync] Service Worker –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ IndexedDB');
      return;
    }

    const channel = new MessageChannel();
    
    return new Promise((resolve) => {
      channel.port1.onmessage = (event) => {
        if (event.data.type === 'NOTIFICATIONS_LOADED') {
          const indexedDBNotifications = event.data.notifications || [];
          console.log(`üì¶ [useNotificationSync] –ü–æ–ª—É—á–µ–Ω–æ ${indexedDBNotifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ IndexedDB`);
          
          if (indexedDBNotifications.length > 0) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ localStorage
            const localStorageNotifications = NotificationStorageService.loadNotifications();
            const localStorageIds = new Set(localStorageNotifications.map(n => n.id));
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ IndexedDB (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ localStorage)
            const newNotifications = indexedDBNotifications.filter(
              (notification: NotificationData) => !localStorageIds.has(notification.id)
            );
            
            console.log(`üîÑ [useNotificationSync] –ù–∞–π–¥–µ–Ω–æ ${newNotifications.length} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ IndexedDB`);
            
            if (newNotifications.length > 0) {
              // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ localStorage
              newNotifications.forEach((notification: NotificationData) => {
                NotificationStorageService.addNotification(notification);
              });
              
              // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Redux
              const allNotifications = [...localStorageNotifications, ...newNotifications];
              dispatch(loadNotifications(allNotifications));
              console.log(`üîÑ [useNotificationSync] –î–æ–±–∞–≤–ª–µ–Ω–æ ${newNotifications.length} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Redux`);
            } else {
              console.log('‚úÖ [useNotificationSync] –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ IndexedDB —É–∂–µ –µ—Å—Ç—å –≤ localStorage');
            }
          }
          resolve(indexedDBNotifications);
        }
      };

      navigator.serviceWorker.controller!.postMessage(
        { type: 'LOAD_NOTIFICATIONS' },
        [channel.port2]
      );
    });
  } catch (error) {
    console.error('‚ùå [useNotificationSync] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ IndexedDB:', error);
  }
};

/**
 * –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–∂–¥—É Service Worker, localStorage –∏ Redux store
 */
export const useNotificationSync = () => {
  const dispatch = useDispatch();

  useEffect(() => {
    console.log('üöÄ [useNotificationSync] –•—É–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const existingNotifications = NotificationStorageService.loadNotifications();
    console.log(`üìã [useNotificationSync] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${existingNotifications.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ localStorage`);
    if (existingNotifications.length > 0) {
      dispatch(loadNotifications(existingNotifications));
    }

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    dispatch(clearOldNotifications());

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Service Worker
    const handleServiceWorkerMessage = (event: MessageEvent) => {
      console.log('üì® [useNotificationSync] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Service Worker:', event.data);
      
      if (event.data?.type === 'NEW_NOTIFICATION') {
        console.log('üì± [useNotificationSync] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Service Worker:', event.data.notification);
        const notification = event.data.notification;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ localStorage
        console.log('üíæ [useNotificationSync] –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ localStorage');
        NotificationStorageService.addNotification(notification);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ store
        console.log('üîÑ [useNotificationSync] –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Redux store');
        dispatch(addNotification(notification));
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ urgent)
        console.log('üîä [useNotificationSync] –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        
        try {
          notificationSoundService.playNotificationSound('urgent');
        } catch (error) {
          console.warn('‚ö†Ô∏è [useNotificationSync] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
      }
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏)
    const unsubscribeFromStorage = NotificationStorageService.subscribeToChanges((notifications) => {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏');
      dispatch(loadNotifications(notifications));
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    const registerServiceWorker = async () => {
      if ('serviceWorker' in navigator) {
        try {
          const registration = await navigator.serviceWorker.register('/sw.js');
          console.log('‚úÖ [useNotificationSync] Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
          
          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Service Worker (–¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
          console.log('üîó [useNotificationSync] –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Service Worker');
          navigator.serviceWorker.addEventListener('message', handleServiceWorkerMessage);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —á–µ—Ä–µ–∑ onmessage –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
          if (navigator.serviceWorker.controller) {
            navigator.serviceWorker.controller.postMessage({ type: 'CLIENT_READY' });
          }
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ IndexedDB (–º–æ–≥—É—Ç –±—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
          console.log('üì¶ [useNotificationSync] –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ IndexedDB...');
          loadNotificationsFromIndexedDB(dispatch);
          
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º IndexedDB —Å localStorage (—É–¥–∞–ª—è–µ–º –∏–∑ IndexedDB —Ç–æ, —á—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ localStorage)
          console.log('üîÑ [useNotificationSync] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º IndexedDB —Å localStorage...');
          syncIndexedDBWithLocalStorage();
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π Service Worker
          if (navigator.serviceWorker.controller) {
            console.log('‚úÖ [useNotificationSync] Service Worker –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤
            navigator.serviceWorker.controller.postMessage({ type: 'CLIENT_READY' });
          } else {
            console.log('‚ö†Ô∏è [useNotificationSync] Service Worker –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –æ–∂–∏–¥–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...');
            
            // –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Service Worker
            navigator.serviceWorker.ready.then((registration) => {
              console.log('‚úÖ [useNotificationSync] Service Worker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
              
              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã Service Worker –≤–∑—è–ª –∫–æ–Ω—Ç—Ä–æ–ª—å
              if (!navigator.serviceWorker.controller) {
                console.log('üîÑ [useNotificationSync] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Service Worker');
                window.location.reload();
                return;
              }
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤
              if (navigator.serviceWorker.controller) {
                navigator.serviceWorker.controller.postMessage({ type: 'CLIENT_READY' });
              }
            });
          }
          
        } catch (error) {
          console.error('‚ùå [useNotificationSync] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
        }
      } else {
        console.warn('‚ö†Ô∏è [useNotificationSync] Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      }
    };

    registerServiceWorker();

    // Cleanup
    return () => {
      unsubscribeFromStorage();
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.removeEventListener('message', handleServiceWorkerMessage);
      }
    };
  }, [dispatch]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å localStorage
  return {
    markAsRead: (notificationId: string) => {
      NotificationStorageService.markAsRead(notificationId);
      dispatch(markAsRead(notificationId));
    },
    
    markAllAsRead: () => {
      NotificationStorageService.markAllAsRead();
      dispatch(markAllAsRead());
    },
    
    removeNotification: (notificationId: string) => {
      NotificationStorageService.removeNotification(notificationId);
      dispatch(removeNotification(notificationId));
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å IndexedDB
      syncIndexedDBWithLocalStorage().catch(error => 
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
      );
    },
    
    clearOldNotifications: () => {
      NotificationStorageService.clearOldNotifications();
      dispatch(clearOldNotifications());
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å IndexedDB
      syncIndexedDBWithLocalStorage().catch(error => 
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
      );
    }
  };
}; 