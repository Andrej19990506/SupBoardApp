import type { Booking } from '@/types/booking';
import { BookingStatus } from '@/types/booking';
import api from '@shared/services/api';

interface PushSubscriptionData {
  endpoint: string;
  keys: {
    p256dh: string;
    auth: string;
  };
}

interface NotificationPayload {
  title: string;
  body: string;
  tag?: string;
  priority: 'high' | 'medium' | 'low';
  data: {
    bookingId: string;
    bookingStatus: string;
    clientName: string;
    phone?: string;
    action?: string;
    trackClose?: boolean;
  };
  actions?: Array<{
    action: string;
    title: string;
    icon?: string;
  }>;
}

class PushNotificationService {
  private serviceWorkerRegistration: ServiceWorkerRegistration | null = null;
  private subscription: PushSubscription | null = null;
  private isSupported: boolean = false;
  private isPermissionGranted: boolean = false;

  constructor() {
    this.checkSupport();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private checkSupport(): void {
    const hasServiceWorker = 'serviceWorker' in navigator;
    const hasPushManager = 'PushManager' in window;
    const hasNotification = 'Notification' in window;
    const isSecureContext = window.isSecureContext;
    const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
    console.log('  - Service Worker:', hasServiceWorker);
    console.log('  - PushManager:', hasPushManager);
    console.log('  - Notification:', hasNotification);
    console.log('  - Secure Context (HTTPS):', isSecureContext);
    console.log('  - Localhost:', isLocalhost);
    console.log('  - URL:', window.location.href);
    
    this.isSupported = hasServiceWorker && hasPushManager && hasNotification;
    
    if (!this.isSupported) {
      console.warn('‚ö†Ô∏è Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:');
      if (!hasServiceWorker) console.warn('  - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Service Worker API');
      if (!hasPushManager) console.warn('  - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PushManager API');
      if (!hasNotification) console.warn('  - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Notification API');
      if (!isSecureContext && !isLocalhost) {
        console.warn('  - –¢—Ä–µ–±—É–µ—Ç—Å—è HTTPS (–∏–ª–∏ localhost –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)');
      }
    }
      
    console.log('üîç Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:', this.isSupported);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Service Worker –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async initialize(): Promise<boolean> {
    if (!this.isSupported) {
      console.warn('‚ö†Ô∏è Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      return false;
    }

    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker
      this.serviceWorkerRegistration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/'
      });

      console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', this.serviceWorkerRegistration);

      // –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Service Worker
      await this.waitForServiceWorkerActivation();

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const permission = await this.requestNotificationPermission();
      
      if (permission) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await this.createPushSubscription();
        return true;
      }

      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return false;
    }
  }

  /**
   * –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Service Worker
   */
  private async waitForServiceWorkerActivation(): Promise<void> {
    if (!this.serviceWorkerRegistration) return;

    if (this.serviceWorkerRegistration.active) {
      return;
    }

    return new Promise((resolve) => {
      const worker = this.serviceWorkerRegistration!.installing || this.serviceWorkerRegistration!.waiting;
      
      if (worker) {
        worker.addEventListener('statechange', () => {
          if (worker.state === 'activated') {
            resolve();
          }
        });
      } else {
        resolve();
      }
    });
  }

  /**
   * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async requestNotificationPermission(): Promise<boolean> {
    if (!('Notification' in window)) {
      console.warn('‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return false;
    }

    let permission = Notification.permission;

    if (permission === 'default') {
      permission = await Notification.requestPermission();
    }

    this.isPermissionGranted = permission === 'granted';
    
    console.log('üîî –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', permission);
    
    return this.isPermissionGranted;
  }

  /**
   * –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async createPushSubscription(): Promise<void> {
    if (!this.serviceWorkerRegistration || !this.isPermissionGranted) {
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
      this.subscription = await this.serviceWorkerRegistration.pushManager.getSubscription();

      if (!this.subscription) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        // –ü–æ–ª—É—á–∞–µ–º VAPID –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å —Å–µ—Ä–≤–µ—Ä–∞
        const vapidPublicKey = await this.getVapidPublicKey();
        
                 this.subscription = await this.serviceWorkerRegistration.pushManager.subscribe({
           userVisibleOnly: true,
           applicationServerKey: this.urlBase64ToUint8Array(vapidPublicKey)
         });

        console.log('‚úÖ Push-–ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', this.subscription);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        await this.sendSubscriptionToServer(this.subscription);
      } else {
        console.log('‚úÖ Push-–ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', this.subscription);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è push-–ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º VAPID –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  private async getVapidPublicKey(): Promise<string> {
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
      if (window.APP_CONFIG?.APPLICATION_SERVER_KEY) {
        const vapidKey = window.APP_CONFIG.APPLICATION_SERVER_KEY;
        console.log('üîë VAPID –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', vapidKey.substring(0, 20) + '...');
        return vapidKey;
      }

      // Fallback: –ø–æ–ª—É—á–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      console.log('‚ö†Ô∏è VAPID –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞');
      const response = await api.get('/v1/push-notifications/vapid-public-key');
      const vapidKey = response.data.public_key;
      
      if (!vapidKey) {
        throw new Error('VAPID –∫–ª—é—á –Ω–µ –ø–æ–ª—É—á–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      console.log('üîë VAPID –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞:', vapidKey.substring(0, 20) + '...');
      return vapidKey;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VAPID –∫–ª—é—á–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å VAPID –∫–ª—é—á');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   */
  private async sendSubscriptionToServer(subscription: PushSubscription): Promise<void> {
    try {
             const p256dhKey = subscription.getKey('p256dh');
       const authKey = subscription.getKey('auth');
       
       const subscriptionData: PushSubscriptionData = {
         endpoint: subscription.endpoint,
         keys: {
           p256dh: p256dhKey ? this.arrayBufferToBase64(p256dhKey) : '',
           auth: authKey ? this.arrayBufferToBase64(authKey) : ''
         }
       };

      const response = await api.post('/v1/push-notifications/subscriptions', {
        endpoint: subscriptionData.endpoint,
        keys: subscriptionData.keys,
        user_agent: navigator.userAgent,
        notification_types: [
          'pending_confirmation',
          'client_arriving_soon', 
          'client_overdue',
          'return_time',
          'return_overdue'
        ]
      });

      console.log('‚úÖ Push-–ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º VAPID –∫–ª—é—á –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  private urlBase64ToUint8Array(base64String: string): ArrayBuffer {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray.buffer;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ArrayBuffer –≤ base64 —Å—Ç—Ä–æ–∫—É
   */
  private arrayBufferToBase64(buffer: ArrayBuffer): string {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    for (let i = 0; i < bytes.byteLength; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  }

  /**
   * –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
   */
  createBookingNotification(booking: Booking, eventType: string): NotificationPayload | null {
    const baseData = {
      bookingId: booking.id,
      bookingStatus: booking.status,
      clientName: booking.clientName,
      phone: booking.phone,
      trackClose: true
    };

    switch (eventType) {
      case 'pending_confirmation':
        return {
          title: 'üîî –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
          body: `${booking.clientName} - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞`,
          tag: `confirmation-${booking.id}`,
          priority: 'high',
          data: { ...baseData, action: 'confirm' },
          actions: [
            { action: 'confirm', title: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' },
            { action: 'call', title: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å' },
            { action: 'cancel', title: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }
          ]
        };

      case 'client_arriving_soon':
        return {
          title: '‚è∞ –ö–ª–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ –ø—Ä–∏–¥–µ—Ç',
          body: `${booking.clientName} –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å?`,
          tag: `arriving-${booking.id}`,
          priority: 'medium',
          data: { ...baseData, action: 'prepare' },
          actions: [
            { action: 'prepare', title: 'üèÑ‚Äç‚ôÇÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å' },
            { action: 'call', title: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å' }
          ]
        };

      case 'client_overdue':
        return {
          title: '‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç',
                     body: `${booking.clientName} –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç`,
          tag: `overdue-${booking.id}`,
          priority: 'high',
          data: { ...baseData, action: 'contact' },
          actions: [
            { action: 'call', title: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å' },
            { action: 'no_show', title: 'üëª –ù–µ —è–≤–∏–ª—Å—è' },
            { action: 'cancel', title: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }
          ]
        };

      case 'return_time':
        return {
          title: 'üîÑ –í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞',
          body: `${booking.clientName} –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å`,
          tag: `return-${booking.id}`,
          priority: 'medium',
          data: { ...baseData, action: 'return' },
          actions: [
            { action: 'complete', title: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å' },
            { action: 'extend', title: '‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å' }
          ]
        };

      case 'return_overdue':
        return {
          title: 'üö® –ü—Ä–æ—Å—Ä–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞',
          body: `${booking.clientName} –ø—Ä–æ—Å—Ä–æ—á–∏–ª –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è`,
          tag: `return-overdue-${booking.id}`,
          priority: 'high',
          data: { ...baseData, action: 'contact_overdue' },
          actions: [
            { action: 'call', title: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å—Ä–æ—á–Ω–æ' },
            { action: 'complete', title: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å' }
          ]
        };

      case 'status_changed':
        return {
          title: 'üìù –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω',
          body: `${booking.clientName} - —Å—Ç–∞—Ç—É—Å: ${this.getStatusText(booking.status)}`,
          tag: `status-${booking.id}`,
          priority: 'low',
          data: baseData
        };

      default:
        return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
   */
  private getStatusText(status: string): string {
    const statusTexts: Record<string, string> = {
      [BookingStatus.BOOKED]: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ',
      [BookingStatus.PENDING_CONFIRMATION]: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      [BookingStatus.CONFIRMED]: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
      [BookingStatus.IN_USE]: '–í –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏',
      [BookingStatus.COMPLETED]: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
      [BookingStatus.CANCELLED]: '–û—Ç–º–µ–Ω–µ–Ω–æ',
      [BookingStatus.NO_SHOW]: '–ù–µ —è–≤–∏–ª—Å—è',
      [BookingStatus.RESCHEDULED]: '–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ'
    };

    return statusTexts[status] || status;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API (—Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç push)
   */
  async sendNotification(notification: NotificationPayload): Promise<boolean> {
    if (!this.isSupported || !this.isPermissionGranted) {
      console.warn('‚ö†Ô∏è Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      return false;
    }

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è API
      const requestPayload = {
        payload: notification,
        notification_type: null, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å–∫–∞–º
        max_concurrent: 10
      };
      
      const response = await api.post('/v1/push-notifications/send', requestPayload);
      console.log('‚úÖ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', notification.title);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (fallback)
   */
  showLocalNotification(notification: NotificationPayload): void {
    if (!this.isPermissionGranted) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return;
    }

    new Notification(notification.title, {
      body: notification.body,
      icon: '/icon-192x192.png',
      badge: '/icon-72x72.png',
      tag: notification.tag,
      data: notification.data,
      requireInteraction: notification.priority === 'high',
      silent: notification.priority === 'low'
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  getStatus(): {
    isSupported: boolean;
    isPermissionGranted: boolean;
    hasSubscription: boolean;
    hasServiceWorker: boolean;
  } {
    return {
      isSupported: this.isSupported,
      isPermissionGranted: this.isPermissionGranted,
      hasSubscription: !!this.subscription,
      hasServiceWorker: !!this.serviceWorkerRegistration
    };
  }

  /**
   * –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async unsubscribe(): Promise<boolean> {
    if (!this.subscription) {
      return true;
    }

    try {
      const success = await this.subscription.unsubscribe();
      
      if (success) {
        this.subscription = null;
        console.log('‚úÖ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—Ç–ø–∏—Å–∫–µ
        await api.post('/v1/push-notifications/unsubscribe');
      }

      return success;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const pushNotificationService = new PushNotificationService();
export default pushNotificationService; 