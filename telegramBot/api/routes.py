import logging
import json
import os
from pathlib import Path
from fastapi import APIRouter, Request, HTTPException, status
from pydantic import BaseModel
from datetime import datetime
from typing import Optional, Dict
import time
import telegram
from telegram.error import BadRequest
import random

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã Telegram –∏ Application
from telegram import Update, InputFile
from telegram.ext import Application
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CallbackQueryHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º httpx –∏ get_async_http_client
import httpx

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Pydantic
from .models import SendMessagePayload

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–¥–ª—è –ø—É—Ç–∏ –≤–µ–±—Ö—É–∫–∞ –∏ —Å–µ–∫—Ä–µ—Ç–∞)
from config.config import Config
from api.models import RefreshUserPayload
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Ç–∞–±–µ–ª—è (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
ALLOWED_FILE_DIR = Path("/app/shared/timesheets")

# ---> –î–û–ë–ê–í–õ–ï–ù–ò–ï: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ < ---
ALLOWED_REPORTS_DIR = Path(os.getenv("SHARED_REPORTS_FOLDER", "/app/shared/inventory_reports"))
# ---> –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø < ---


# –°–æ–∑–¥–∞–µ–º APIRouter
router = APIRouter()

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç /api/send_message --- 
@router.post("/send_message", tags=["API"])
async def send_message_api_v2(payload: SendMessagePayload, request: Request):
    """–ü—Ä—è–º–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ (FastAPI)"""
    logger.info("üì¨ –ü–æ–ª—É—á–µ–Ω FastAPI –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/send_message")
    logger.info(f"–î–∞–Ω–Ω—ã–µ payload: {payload.model_dump()}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ app.state
        bot_app: Application = request.app.state.bot_application
        if not bot_app or not bot_app.bot:
            logger.error("‚ùå –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ app.state")
            raise HTTPException(status_code=503, detail="Bot instance not available")
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞
        chat_id_str = payload.chat_id
        processed_chat_id: int
        try:
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ int, Telegram —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å —Ñ–æ—Ä–º–∞—Ç–æ–º
            processed_chat_id = int(chat_id_str)
            logger.info(f"ID —á–∞—Ç–∞ {chat_id_str} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ {processed_chat_id}")
        except ValueError:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å chat_id '{chat_id_str}' –≤ —á–∏—Å–ª–æ")
             raise HTTPException(status_code=400, detail=f"Invalid chat_id format: {chat_id_str}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot_app.bot.send_message(
                chat_id=processed_chat_id,
                text=payload.text,
                parse_mode=payload.parse_mode,
                reply_markup=payload.reply_markup if payload.reply_markup else None
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id_str}")
            return {"success": True, "message": "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
        
        except BadRequest as e:
            error_message = str(e)
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id_str} ({processed_chat_id}): {error_message}")

            if "chat not found" in error_message.lower() and chat_id_str.startswith("-100"):
                try:
                    alternative_chat_id_str = f"-{chat_id_str[4:]}"
                    alternative_chat_id = int(alternative_chat_id_str)
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {alternative_chat_id_str} (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π ID)")
                    
                    await bot_app.bot.send_message(
                        chat_id=alternative_chat_id,
                        text=payload.text,
                        parse_mode=payload.parse_mode,
                        reply_markup=payload.reply_markup if payload.reply_markup else None
                    )
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {alternative_chat_id_str} –ø—Ä–∏ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–µ.")
                    return {"success": True, "message": "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏)"}
                
                except Exception as retry_exc:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –í–¢–û–†–û–ô –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {alternative_chat_id_str}: {retry_exc}")
                    raise HTTPException(status_code=500, detail=f"Failed to send message after retry: {retry_exc}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ BadRequest (–Ω–µ chat not found –∏–ª–∏ ID –±–µ–∑ -100) –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id_str}: {error_message}")
                raise HTTPException(status_code=500, detail=f"Failed to send message: {error_message}")
        
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ bot.send_message –¥–ª—è —á–∞—Ç–∞ {chat_id_str}: {e}", exc_info=True)
            error_detail = str(e)
            if hasattr(e, 'message'): error_detail = e.message
            raise HTTPException(status_code=500, detail=f"Failed to send message: {error_detail}")
            
    except HTTPException as http_exc:
        raise http_exc
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /api/send_message: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.get("/send_message/health", tags=["System"])
async def check_send_message_availability(request: Request):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞ /send_message –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–µ–¥—É–ª–µ—Ä–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ app.state —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        bot_app: Application = request.app.state.bot_application
        if not bot_app or not bot_app.bot:
            logger.error("‚ùå –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ app.state –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ health")
            raise HTTPException(status_code=503, detail="Bot instance not available")
            
        # –ï—Å–ª–∏ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞ /send_message —É—Å–ø–µ—à–Ω–∞")
        return {
            "status": "ok",
            "message": "Send message endpoint is available",
            "send_message_url": "/send_message"
        }
            
    except HTTPException as http_exc:
        raise http_exc
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /send_message/health: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ --- 
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Config
c = Config()
WEBHOOK_TELEGRAM_PATH = c.WEBHOOK_PATH if c.WEBHOOK_PATH else "/webhook" # –ò—Å–ø–æ–ª—å–∑—É–µ–º /webhook –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –∑–∞–¥–∞–Ω
WEBHOOK_SECRET = c.WEBHOOK_SECRET

if not WEBHOOK_TELEGRAM_PATH:
    logger.warning("WEBHOOK_PATH –Ω–µ –∑–∞–¥–∞–Ω, —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ —Ä–æ—É—Ç–µ—Ä–µ.")
    # –ú–æ–∂–Ω–æ –ª–∏–±–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–æ—É—Ç, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
    # raise ValueError("WEBHOOK_PATH –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤–µ–±—Ö—É–∫–∞")
    WEBHOOK_TELEGRAM_PATH = "/webhook_fallback_path" # –ó–∞–ø–∞—Å–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å

logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤–µ–±—Ö—É–∫–∞ –≤ —Ä–æ—É—Ç–µ—Ä–µ –ø–æ –ø—É—Ç–∏: {WEBHOOK_TELEGRAM_PATH}")
@router.post(WEBHOOK_TELEGRAM_PATH, include_in_schema=False) # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑ –∞–≤—Ç–æ–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Swagger/OpenAPI
async def telegram_webhook_endpoint(update_data: dict, request: Request):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    if WEBHOOK_SECRET:
        secret_token_header = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
        if secret_token_header != WEBHOOK_SECRET:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ–±—Ö—É–∫–∞: {secret_token_header}")
            raise HTTPException(status_code=403, detail="Invalid secret token")
    
    try:
        bot_app: Application = request.app.state.bot_application
        if not bot_app:
            logger.error("–≠–∫–∑–µ–º–ø–ª—è—Ä bot_application –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ app.state")
            raise HTTPException(status_code=503, detail="Bot application not available")
        
        update = Update.de_json(update_data, bot_app.bot)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫: {update.update_id}")
        
        await bot_app.update_queue.put(update)
        
        return {"ok": True}
        
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ –≤–µ–±—Ö—É–∫–µ")
        raise HTTPException(status_code=400, detail="Invalid JSON payload")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal server error handling webhook")




# --- –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ /api/refresh_user --- 
@router.post("/refresh_user", tags=["API"], status_code=status.HTTP_200_OK)
async def refresh_user_data(payload: RefreshUserPayload, request: Request):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö.
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è API —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
    """
    logger.info(f"üì¨ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/refresh_user –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {payload.user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot_app: Application = request.app.state.bot_application
        if not bot_app or not bot_app.bot:
            logger.error("‚ùå –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ app.state –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ refresh_user")
            raise HTTPException(status_code=status.HTTP_503_SERVICE_UNAVAILABLE, 
                               detail="Bot instance not available")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ getChatMember
            # –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±—â–∞–ª—Å—è —Å –±–æ—Ç–æ–º –Ω–µ–¥–∞–≤–Ω–æ
            # –ù–æ —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —á–ª–µ–Ω–æ–º —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
            user_id = payload.user_id
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ Telegram")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ getChat
            try:
                chat = await bot_app.bot.get_chat(user_id)
                user_data = {
                    "user_id": chat.id,
                    "first_name": chat.first_name or "",
                    "last_name": chat.last_name or "",
                    "username": chat.username or "",
                    "photo_url": ""  # –ü–æ–ª—É—á–∏–º —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ
                }
                
                # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                try:
                    photos = await bot_app.bot.get_user_profile_photos(user_id, limit=1)
                    if photos and photos.photos and len(photos.photos) > 0:
                        photo = photos.photos[0][-1]  # –ë–µ—Ä—ë–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
                        photo_file = await bot_app.bot.get_file(photo.file_id)
                        user_data["photo_url"] = photo_file.file_path
                except Exception as photo_err:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {photo_err}")
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º photo_url –ø—É—Å—Ç—ã–º
                
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
                return user_data
                
            except Exception as chat_err:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ getChat: {chat_err}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ - —á–µ—Ä–µ–∑ getChatMember, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ
                # –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å ID —á–∞—Ç–∞, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤–º–µ—Å—Ç–µ —Å –±–æ—Ç–æ–º
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ getChatMember,
                # –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç–∞–º, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                
                # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail=f"User information cannot be retrieved from Telegram: {chat_err}"
                )
                
        except HTTPException as http_exc:
            raise http_exc
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {payload.user_id}: {e}", 
                         exc_info=True)
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Error retrieving user data from Telegram: {e}"
            )
            
    except HTTPException as http_exc:
        raise http_exc
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /api/refresh_user: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error: {e}"
        ) 


