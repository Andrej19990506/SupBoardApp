import logging
import json
import traceback
import os
# import aiohttp # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ aiohttp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ handle_deletion_callback
from telegram import Update, Bot, MenuButton, MenuButtonWebApp, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config.config import Config
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ json_service –∏ deletion_requests –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ context.application.state
# –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Ö –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–Ω–∞—á–µ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–º–µ–Ω–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ)

logger = logging.getLogger(__name__)

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not update.effective_message:
            logger.warning("–ù–µ—Ç effective_message –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ web_app_data
        if not hasattr(update.effective_message, 'web_app_data') or not update.effective_message.web_app_data:
            # logger.warning("–ù–µ—Ç web_app_data –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏") # –ß–∞—Å—Ç–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ª–æ–≥
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data_str = update.effective_message.web_app_data.data
        if not data_str:
            logger.warning("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ web_app_data")
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {data_str}")

        try:
            data = json.loads(data_str)
            logger.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ WebApp: {data}")

            if data.get('action') == 'open_user_profile':
                user_id = data.get('user_id')
                first_name = data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name} (ID: {user_id}) —á–µ—Ä–µ–∑ WebApp")

                if user_id:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text=f"–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å {first_name}",
                            url=f"tg://user?id={user_id}"
                        )]
                    ])

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                    await update.effective_message.reply_text(
                        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å {first_name}:",
                        reply_markup=keyboard
                    )
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ WebApp —Å –∫–Ω–æ–ø–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω user_id –≤ –¥–∞–Ω–Ω—ã—Ö WebApp")
            # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö 'action' –∏–∑ –≤–∞—à–µ–≥–æ WebApp, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ WebApp: {data.get('action')}")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç WebApp: {e}")
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)


async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")

        # --- –£–±—Ä–∞–ª–∏ –ª–æ–≥–∏–∫—É WebApp –∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ---

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}")
        logger.error(traceback.format_exc())
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_all_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –∫–æ–ª–±—ç–∫–∏)"""
    try:
        if not update.callback_query:
            return # –ù–µ –∫–æ–ª–±—ç–∫

        query = update.callback_query
        logger.debug(f"=== –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –õ–Æ–ë–û–ô callback-–∑–∞–ø—Ä–æ—Å ===")
        logger.debug(f"–î–∞–Ω–Ω—ã–µ callback: {query.data}")
        logger.debug(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query.from_user.username} ({query.from_user.id})")
        logger.debug(f"–í —á–∞—Ç–µ: {query.message.chat.title} ({query.message.chat_id})")

        # –ù–ï –æ—Ç–≤–µ—á–∞–µ–º –∑–¥–µ—Å—å query.answer(), —á—Ç–æ–±—ã –¥–∞—Ç—å —Å—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        # await query.answer()

        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ handle_deletion_callback
        if query.data and (query.data.startswith('confirm_del_') or query.data.startswith('reject_del_')):
            logger.debug("–≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω handle_deletion_callback")
            # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å handle_deletion_callback, —Ç.–∫. –æ–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
        else:
            logger.debug("–≠—Ç–æ –ù–ï –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ callback (handle_all_callbacks): {str(e)}")
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º 