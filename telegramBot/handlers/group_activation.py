import asyncio
import logging
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class GroupActivationManager:
    def __init__(self, db_service, valid_time=60):
        self.db_service = db_service
        self.valid_time = valid_time  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è (—Å–µ–∫)
        self.pending_activations = {}  # chat_id: asyncio.Task
        self.activated_groups = set()  # chat_id, –≥–¥–µ –±–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        self.group_handler = None  # –°—é–¥–∞ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ GroupHandler

    def set_group_handler(self, group_handler):
        self.group_handler = group_handler

    async def start_activation(self, chat_id, chat_title, context: ContextTypes.DEFAULT_TYPE):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∏ –∂–¥—ë—Ç –æ—Ç–≤–µ—Ç.
        –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å –∑–∞ valid_time —Å–µ–∫—É–Ω–¥ ‚Äî –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.
        """
        if chat_id in self.activated_groups:
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id} —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é.")
            return
        if chat_id in self.pending_activations:
            logger.info(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}.")
            return
        logger.info(f"–ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} ({chat_title})")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ."
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
        task = asyncio.create_task(self._wait_for_password(chat_id, context))
        self.pending_activations[chat_id] = task

    async def _wait_for_password(self, chat_id, context: ContextTypes.DEFAULT_TYPE):
        """
        –ñ–¥—ë—Ç valid_time —Å–µ–∫—É–Ω–¥. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å ‚Äî –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.
        """
        try:
            await asyncio.sleep(self.valid_time)
            if chat_id not in self.activated_groups:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ë–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É."
                )
                await context.bot.leave_chat(chat_id)
                logger.info(f"–ë–æ—Ç –≤—ã—à–µ–ª –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        finally:
            self.pending_activations.pop(chat_id, None)

    async def check_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
        """
        chat = update.effective_chat
        chat_id = chat.id
        if chat_id in self.activated_groups:
            return  # –£–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        if chat_id not in self.pending_activations:
            return  # –ù–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
        if not update.effective_message or not update.effective_message.text:
            return
        valid_password = await self.db_service.get_group_activation_password()
        user_message = update.effective_message.text.strip()
        if user_message == valid_password:
            self.activated_groups.add(chat_id)
            task = self.pending_activations.pop(chat_id, None)
            if task:
                task.cancel()
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!"
            )
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –ø–∞—Ä–æ–ª—é.")
            # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ---
            if self.group_handler:
                await self.save_group_after_activation(chat_id, context)
            return True
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
            logger.info(f"–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}.")
            return False

    async def save_group_after_activation(self, chat_id, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ group_handler –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä—É–ø–ø—É –≤ –ë–î.
        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        if not self.group_handler:
            logger.error("GroupHandler –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ GroupActivationManager!")
            return
        try:
            chat = await context.bot.get_chat(chat_id)
            chat_title = chat.title
            members = await self.group_handler._get_chat_members(chat, context)
            admins = await self.group_handler._get_chat_admins(chat_id, context)
            bot_id = await self.group_handler._get_bot_id(context)
            filtered_members = [m for m in members if m['user_id'] != bot_id]
            filtered_admins = [a for a in admins if a['user_id'] != bot_id]
            await self.db_service.save_group(
                chat_id=chat_id,
                chat_title=chat_title,
                members=filtered_members,
                admins=filtered_admins
            )
            logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üëã –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ '{chat_title}'! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {chat_id} –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}") 