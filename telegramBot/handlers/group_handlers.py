import os
import json
import logging
from datetime import datetime
from typing import List, Dict, Any, Optional, Union
from telegram import Update, ChatMember, Bot, Chat, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand, MenuButton, MenuButtonWebApp, User
from telegram.constants import ChatMemberStatus, ChatType, MenuButtonType
from telegram.ext import ContextTypes, MessageHandler, filters, ChatMemberHandler, CommandHandler, Application, CallbackQueryHandler
import random
import time
import telegram.error
import httpx
import aiofiles
import asyncio
from config.config import Config
from services.database_service import DatabaseService
import traceback
import re
from handlers.group_activation import GroupActivationManager

logger = logging.getLogger(__name__)

def get_member_status(member: ChatMember) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    status_map = {
        'creator': 'creator',
        'administrator': 'administrator',
        'member': 'member',
        'restricted': 'restricted',
        'left': 'left',
        'kicked': 'banned',
        'banned': 'banned'
    }
    return status_map.get(member.status, str(member.status).lower())

class GroupHandler:
    def __init__(self, application: Application, db_service: DatabaseService):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        self.application = application
        self.db_service = db_service # –°–æ—Ö—Ä–∞–Ω—è–µ–º db_service
        self.activation_manager = GroupActivationManager(db_service)
        self.activation_manager.set_group_handler(self)  # –ü–µ—Ä–µ–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è
        self.bot_id = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ None, –ø–æ–ª—É—á–∏–º –ø–æ–∑–∂–µ
        self.photo_cache = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        self._processed_new_member_events = set() # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self._processed_events = set() # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—â–∏—Ö —Å–æ–±—ã—Ç–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        logger.info("‚úÖ GroupHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    



    async def _clear_processed_groups(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        try:
            if hasattr(self, 'processed_groups'):
                self.processed_groups.clear()
                logger.info("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –æ—á–∏—â–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø: {str(e)}")
    

    async def handle_new_chat_members(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç"""
        try:
            chat = update.effective_chat
            new_members = update.message.new_chat_members if update.message else []
            
            # –ï—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            is_bot_added = any(member.id == context.bot.id for member in new_members)
            
            if is_bot_added:
                await self.activation_manager.start_activation(chat.id, chat.title, context)
                return
            
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if chat.id not in self.activation_manager.activated_groups:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç
            is_bot_added = any(member.id == context.bot.id for member in new_members)
            
            if is_bot_added:
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
                event_id = f"bot_added_{chat.id}_{update.message.message_id}"
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if not hasattr(self, '_processed_events'):
                    self._processed_events = set()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
                if event_id in self._processed_events:
                    logger.info(f"–°–æ–±—ã—Ç–∏–µ {event_id} —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                self._processed_events.add(event_id)
                
                logger.info(f"=== –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat.title} ===")
                await self._process_bot_added(chat, context)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            chat_id = await self._get_standardized_chat_id(chat.id)
            logger.info(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞: {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            original_chat_id = await self._get_original_chat_id(chat_id)
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API: {original_chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            current_members = await self._get_chat_members(chat, context)
            current_admins = await self._get_chat_admins(original_chat_id, context)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            for new_member in new_members:
                if new_member.is_bot:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
                    continue

                # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô (–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è) ---
                if update.message: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ID
                    event_id = f"new_member_{chat.id}_{new_member.id}_{update.message.message_id}"
                    if event_id in self._processed_new_member_events:
                        logger.info(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {event_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        continue
                    self._processed_new_member_events.add(event_id)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç update.message, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                    # –≠—Ç–æ –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ, –Ω–æ –ª—É—á—à–µ, —á–µ–º –Ω–∏—á–µ–≥–æ
                    timestamp_now = int(time.time())
                    event_id_fallback = f"new_member_{chat.id}_{new_member.id}_{timestamp_now // 5}" # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ 5-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –æ–∫–Ω–∞
                    if event_id_fallback in self._processed_new_member_events:
                         logger.info(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {event_id_fallback} (–ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ) —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                         continue
                    self._processed_new_member_events.add(event_id_fallback)
                 # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô (–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è) ---

                # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô (–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) ---
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                try:
                    # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                    welcome_message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É '{chat.title}', {new_member.mention_html()}!"
                    await context.bot.send_message(
                        chat_id=chat.id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —á–∞—Ç–∞
                        text=welcome_message,
                        parse_mode='HTML',
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {new_member.username or new_member.id} –≤ —á–∞—Ç {chat.title} —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                except telegram.error.BadRequest as e:
                    # –ü–æ–ø—ã—Ç–∫–∞ 2 —Å original_chat_id (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                    if "chat not found" in str(e).lower():
                         logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å chat_id={chat.id} (Chat not found), –ø—Ä–æ–±—É—é original_chat_id={original_chat_id}")
                         try:
                              await context.bot.send_message(
                                   chat_id=original_chat_id,
                                   text=welcome_message, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                                   parse_mode='HTML',
                              )
                              logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {new_member.username or new_member.id} –≤ —á–∞—Ç {chat.title} (—Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å original_chat_id) —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                         except Exception as e2:
                              logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è {new_member.username or new_member.id} –≤ —á–∞—Ç {chat.id} (–ø–æ–ø—ã—Ç–∫–∞ 2 —Å original_chat_id): {e2}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è {new_member.username or new_member.id} –≤ —á–∞—Ç {chat.id}: {e}")
                except Exception as e:
                    logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô (–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) ---

                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                photo_url = await self._get_user_photo(new_member.id, context, force_update=True)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
                member_info = {
                    'user_id': new_member.id,
                    'username': new_member.username,
                    'first_name': new_member.first_name or "",
                    'last_name': new_member.last_name or "",
                    'status': 'member',
                    'joined_date': datetime.now().isoformat(),
                    'is_bot': new_member.is_bot
                }
                
                if photo_url:
                    member_info['photo_url'] = photo_url
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                is_admin = await context.bot.get_chat_member(chat.id, new_member.id)
                if is_admin.status in ['administrator', 'creator']:
                    member_info['status'] = is_admin.status
                    if not any(a['user_id'] == new_member.id for a in current_admins):
                        current_admins.append(member_info)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
                if not any(m['user_id'] == new_member.id for m in current_members):
                    current_members.append(member_info)
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {new_member.username or new_member.id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            logger.error(traceback.format_exc())

    async def handle_chat_member_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç–µ"""
        try:
            chat = update.effective_chat
            user = update.chat_member.new_chat_member.user
            old_status = update.chat_member.old_chat_member.status
            new_status = update.chat_member.new_chat_member.status
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            chat_id = await self._get_standardized_chat_id(chat.id)
            logger.info(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞: {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            original_chat_id = await self._get_original_chat_id(chat_id)
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API: {original_chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            current_members = await self._get_chat_members(chat, context)
            current_admins = await self._get_chat_admins(original_chat_id, context)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            photo_url = await self._get_user_photo(user.id, context, force_update=True)
            
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            member_info = {
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'status': new_status,
                'joined_date': datetime.now().isoformat(),
                'is_bot': user.is_bot
            }
            
            if photo_url:
                member_info['photo_url'] = photo_url
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            member_updated = False
            for member in current_members:
                if member['user_id'] == user.id:
                    member.update(member_info)
                    member_updated = True
                    break
            
            # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if not member_updated and new_status not in ['left', 'kicked']:
                current_members.append(member_info)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user.username or user.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if new_status in ['administrator', 'creator']:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                if not any(a['user_id'] == user.id for a in current_admins):
                    current_admins.append(member_info)
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.username or user.id}")
            elif old_status in ['administrator', 'creator']:
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                current_admins = [a for a in current_admins if a['user_id'] != user.id]
                logger.info(f"–£–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.username or user.id}")
            

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
            logger.error(traceback.format_exc())

    async def _get_standardized_chat_id(self, chat_id: Union[int, str]) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ID —á–∞—Ç–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        str_id = str(chat_id)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å -100 –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
        if str_id.startswith('-100'):
            return str_id[4:]
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å - –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø
        elif str_id.startswith('-'):
            return str_id[1:]
        return str_id

    async def _get_original_chat_id(self, standardized_chat_id: Union[int, str]) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        str_id = str(standardized_chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É ID –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≥—Ä—É–ø–ø—ã
        if len(str_id) >= 10:  # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
            return f"-100{str_id}"
        else:  # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
            return f"-{str_id}"

    async def _get_user_photo(self, user_id: int, context: ContextTypes.DEFAULT_TYPE, force_update: bool = False) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            cache_key = str(user_id)
            if not force_update and cache_key in self.photo_cache:
                logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return self.photo_cache[cache_key]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            photos = await context.bot.get_user_profile_photos(user_id, limit=1)
            
            if photos and photos.photos:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                photo = photos.photos[0][-1]  # –ë–µ—Ä–µ–º —Ñ–∞–π–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
                file = await context.bot.get_file(photo.file_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ file.file_path —É–∂–µ –ø–æ–ª–Ω—ã–º URL
                if file.file_path.startswith('http'):
                    photo_url = file.file_path
                else:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                    bot_token = context.bot.token
                    photo_url = f"https://api.telegram.org/file/bot{bot_token}/{file.file_path}"
                
                # –û—á–∏—â–∞–µ–º URL –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                if "https://api.telegram.org/file/bot" in photo_url[30:]:
                    photo_url = photo_url[:photo_url.find("/https://")]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.photo_cache[cache_key] = photo_url

                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω URL —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {photo_url}")
                return photo_url
            
            logger.warning(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            logger.error(traceback.format_exc())
            return None

    async def _get_chat_members(self, chat: Chat, context: ContextTypes.DEFAULT_TYPE) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–±–µ–∑ –±–æ—Ç–∞)."""
        try:
            logger.info(f"=== –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat.title} ===")
            members = []
            bot_id = await self._get_bot_id(context) # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞

            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö
            admins_raw = None
            last_error = None
            successful_id = None
            # –ü–æ–ª—É—á–∞–µ–º original_chat_id –æ–¥–∏–Ω —Ä–∞–∑
            original_chat_id_for_admins = await self._get_original_chat_id(await self._get_standardized_chat_id(chat.id))
            chat_id_formats = [chat.id, original_chat_id_for_admins] # –ü—Ä–æ–±—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞

            # logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è _get_chat_members (–ø—Ä–æ–±—É—é —Ñ–æ—Ä–º–∞—Ç—ã: {chat_id_formats})")
            for format_id in chat_id_formats:
                 try:
                     admins_raw = await context.bot.get_chat_administrators(format_id)
                     successful_id = format_id
                     # logger.debug(f"–ê–¥–º–∏–Ω—ã –¥–ª—è _get_chat_members –ø–æ–ª—É—á–µ–Ω—ã —Å ID: {successful_id}")
                     break
                 except telegram.error.BadRequest as e:
                     if "chat not found" in str(e).lower():
                         last_error = e
                         continue
                     else:
                         last_error = e
                         break
                 except Exception as e:
                     last_error = e
                     break
            
            if admins_raw is None:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –Ω–∏ —Å –æ–¥–Ω–∏–º ID
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat.title} ({chat.id}/{original_chat_id_for_admins}) –≤ _get_chat_members."
                if last_error:
                     error_msg += f" –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}"
                logger.error(error_msg)
                # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                return [] 
            
            # logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(admins_raw)} –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            for admin_member in admins_raw:
                user = admin_member.user
                if user.id == bot_id: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                    continue
                    
                photo_url = await self._get_user_photo(user.id, context)
                member_info = {
                    'user_id': user.id,
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'status': get_member_status(admin_member), # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_member_status
                    'joined_date': datetime.now().isoformat(), # –î–∞—Ç–∞ —É—Å–ª–æ–≤–Ω–∞—è, —Ç.–∫. –Ω–µ –∑–Ω–∞–µ–º –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –≤—Å—Ç—É–ø–∏–ª
                    'is_bot': user.is_bot,
                    'photo_url': photo_url
                }
                members.append(member_info)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫): {user.username or user.id}")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ API –ø–æ–∑–≤–æ–ª–∏—Ç
            # –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –¥–ª—è –≥—Ä—É–ø–ø –±–æ—Ç —á–∞—Å—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            # –ü–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å

            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) –¥–ª—è —á–∞—Ç–∞ {chat.title} (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(members)}). –ë–æ—Ç –∏—Å–∫–ª—é—á–µ–Ω.")
            return members # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫, –≥–¥–µ –±–æ—Ç–∞ —É–∂–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
            return []

    async def _get_chat_admins(self, chat_id: Union[int, str], context: ContextTypes.DEFAULT_TYPE) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ (–±–µ–∑ –±–æ—Ç–∞)."""
        admin_list = []
        bot_id = await self._get_bot_id(context) # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞
        
        try:
            # logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}") # –£–±—Ä–∞–ª–∏ –ª–æ–≥, —Ç.–∫. –æ–Ω –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –Ω–∏–∂–µ
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
            str_chat_id = str(chat_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã ID –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫
            chat_id_formats = []
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç –æ–±—ã—á–Ω–æ–π –≥—Ä—É–ø–ø—ã
            if str_chat_id.startswith('-100'):
                # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100, –ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                chat_id_formats.append(f"-{str_chat_id[4:]}")
                chat_id_formats.append(str_chat_id)  # –ó–∞—Ç–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            elif str_chat_id.startswith('-'):
                chat_id_formats.append(str_chat_id)  # –°–Ω–∞—á–∞–ª–∞ –∫–∞–∫ –µ—Å—Ç—å
                chat_id_formats.append(f"-100{str_chat_id[1:]}")  # –ó–∞—Ç–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
            else:
                chat_id_formats.append(f"-{str_chat_id}")  # –°–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                chat_id_formats.append(f"-100{str_chat_id}")  # –ó–∞—Ç–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
            
            admins = None
            last_error = None
            successful_id = None
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–ø—ã—Ç–∫–∏
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id} (–ø—Ä–æ–±—É—é —Ñ–æ—Ä–º–∞—Ç—ã: {chat_id_formats})")

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ ID
            for format_id in chat_id_formats:
                try:
                    # logger.debug(f"–ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ —Å ID: {format_id}") # –£–±–∏—Ä–∞–µ–º –ª–æ–≥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    admins = await context.bot.get_chat_administrators(format_id)
                    successful_id = format_id # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π ID
                    break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                except telegram.error.BadRequest as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º 'Chat not found' –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç
                    if "chat not found" in str(e).lower():
                        last_error = e
                        continue
                    else:
                        # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ BadRequest, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
                        last_error = e
                        break 
                except Exception as e:
                    last_error = e
                    break # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –≤—ã—Ö–æ–¥–∏–º
            
            if admins is not None and successful_id:
                 logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å ID: {successful_id}")
            else:
                # –ï—Å–ª–∏ admins –ø—É—Å—Ç–æ–π –∏–ª–∏ None –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
                if last_error:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id} –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
                    raise last_error # –ü–æ–¥–Ω–∏–º–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
                else:
                     logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id} (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Ö –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤), –æ—à–∏–±–æ–∫ –Ω–µ –±—ã–ª–æ.")
                return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∞–¥–º–∏–Ω–æ–≤
            
            for admin in admins:
                user = admin.user
                admin_info = {
                    'user_id': user.id,
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'status': get_member_status(admin),
                    'is_bot': user.is_bot,
                    'can_manage_chat': getattr(admin, 'can_manage_chat', True),
                    'can_delete_messages': getattr(admin, 'can_delete_messages', True),
                    'can_manage_voice_chats': getattr(admin, 'can_manage_voice_chats', True),
                    'can_restrict_members': getattr(admin, 'can_restrict_members', True),
                    'can_promote_members': getattr(admin, 'can_promote_members', True),
                    'can_change_info': getattr(admin, 'can_change_info', True),
                    'can_invite_users': getattr(admin, 'can_invite_users', True),
                    'can_pin_messages': getattr(admin, 'can_pin_messages', True)
                }
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                photo_url = await self._get_user_photo(user.id, context)
                if photo_url:
                    admin_info['photo_url'] = photo_url
                
                admin_list.append(admin_info)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.username or user.id}")
            
            logger.info(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(admin_list)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return admin_list
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}")
            return []

    # --- –ù–û–í–´–ô –ú–ï–¢–û–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –±–æ—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
    async def _get_bot_id(self, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç ID –±–æ—Ç–∞."""
        if self.bot_id is None:
            try:
                me = await context.bot.get_me()
                self.bot_id = me.id
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω ID –±–æ—Ç–∞: {self.bot_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –±–æ—Ç–∞: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, 
                # –∫–æ—Ç–æ—Ä–æ–µ —Ç–æ—á–Ω–æ –Ω–µ —Å–æ–≤–ø–∞–¥–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º user_id
                return 0 
        return self.bot_id
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ú–ï–¢–û–î–ê ---

    async def _standardize_chat_id(self, chat_id: Union[int, str]) -> str:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è ID —á–∞—Ç–∞"""
        chat_id_str = str(chat_id)
        
        # –£–±–∏—Ä–∞–µ–º '-100' –∏–∑ –Ω–∞—á–∞–ª–∞ ID –µ—Å–ª–∏ –µ—Å—Ç—å
        if chat_id_str.startswith('-100'):
            return chat_id_str[4:]
        # –£–±–∏—Ä–∞–µ–º '-' –∏–∑ –Ω–∞—á–∞–ª–∞ ID –µ—Å–ª–∏ –µ—Å—Ç—å
        elif chat_id_str.startswith('-'):
            return chat_id_str[1:]
        return chat_id_str

    async def _process_bot_added(self, chat: Chat, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç. –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
        try:
            logger.info(f"=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç {chat.title} (—Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö) ===")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            chat_id = await self._get_standardized_chat_id(chat.id)
            logger.info(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞: {chat_id}")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            original_chat_id = await self._get_original_chat_id(chat_id)
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API: {original_chat_id}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            members = await self._get_chat_members(chat, context)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...")
            admins = await self._get_chat_admins(original_chat_id, context)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö —Ç–∞–º –Ω–µ—Ç
            for admin in admins:
                if not any(m['user_id'] == admin['user_id'] for m in members):
                    members.append(admin)
                    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin['username'] or admin['user_id']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

            # –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            bot_id = await self._get_bot_id(context)
            filtered_members = [m for m in members if m['user_id'] != bot_id]
            filtered_admins = [a for a in admins if a['user_id'] != bot_id]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.db_service –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≥—Ä—É–ø–ø
            # await self.db_service.save_group(
            #     chat_id=original_chat_id,
            #     chat_title=chat.title,
            #     members=filtered_members, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            #     admins=filtered_admins    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
            # )
            # logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã {chat.title} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö): {str(e)}")
            logger.error(traceback.format_exc())

    async def handle_left_chat_member(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —á–∞—Ç–∞"""
        try:
            chat = update.effective_chat
            user = update.message.left_chat_member if update.message else None
            
            if not user:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∏–Ω—É–≤—à–µ–≥–æ —á–∞—Ç.")
                return

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –±–æ—Ç —Å–∞–º —Å–µ–±—è —É–¥–∞–ª–∏–ª (—ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handle_my_chat_member)
            if user.id == context.bot.id:
                logger.info("–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ handle_my_chat_member.")
                return

            logger.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.username or user.id} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {chat.title} (ID: {chat.id})")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            chat_id = await self._get_standardized_chat_id(chat.id)
            # logger.info(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞: {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            original_chat_id = await self._get_original_chat_id(chat_id)
            # logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API: {original_chat_id}")
            
            # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê ---
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≥—Ä—É–ø–ø—ã
            db_service = self.db_service # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            if db_service:
                logger.info(f"–í—ã–∑–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ user_id: {user.id} –∏–∑ –≥—Ä—É–ø–ø—ã chat_id: {original_chat_id} —á–µ—Ä–µ–∑ DatabaseService...")
                deleted = await db_service.remove_member_from_group(original_chat_id, user.id)
                if deleted:
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.id} –∏–∑ –≥—Ä—É–ø–ø—ã {original_chat_id} –≤ –ë–î –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")
                else:
                    logger.warning(f"–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.id} –∏–∑ –≥—Ä—É–ø–ø—ã {original_chat_id} –≤ –ë–î –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞).")
            else:
                 logger.error("DatabaseService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ application –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
            logger.error(traceback.format_exc())

    async def handle_webapp_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if not update.message or not update.message.web_app_data:
                return
                
            data = json.loads(update.message.web_app_data.data)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {data}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ç.–¥.
            
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
          
    async def handle_profile_photo_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if not update.message or not update.message.from_user:
                return

            user = update.message.from_user
            chat = update.effective_chat
            chat_id = await self._get_standardized_chat_id(chat.id)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
            photo_url = await self._get_user_photo(user.id, context)
            if not photo_url:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await self.db_service.save_group(
                    chat_id=chat_id,
                    chat_title=chat.title,
                members=await self._get_chat_members(chat, context),
                admins=await self._get_chat_admins(chat_id, context)
            )
            logger.info(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat.title}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}", exc_info=True)

    async def update_all_photos(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –ë–î
            all_groups_data = await self.db_service.get_all_groups()

            if not all_groups_data:
                logger.info("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
                return

            updated_photos_count = 0
            for group in all_groups_data:
                chat_id = group.get('chat_id')
                chat_title = group.get('title')
                members = group.get('members')
                
                if not members or not chat_id:
                    continue
                    
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è –≥—Ä—É–ø–ø—ã '{chat_title}' ({chat_id})...")
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ
                    current_members = await self._get_chat_members(chat_id)
                    current_admins = await self._get_chat_admins(chat_id, context)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    for member in current_members:
                        if not member.get('is_bot'):
                            user_id = int(member.get('user_id'))
                            new_photo = await self._get_user_photo(user_id, context)
                            if new_photo and new_photo != member.get('photo_url'):
                                member['photo_url'] = new_photo
                                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_title}")
                    
                    for admin in current_admins:
                        if not admin.get('is_bot'):
                            user_id = int(admin.get('user_id'))
                            new_photo = await self._get_user_photo(user_id, context)
                            if new_photo and new_photo != admin.get('photo_url'):
                                admin['photo_url'] = new_photo
                                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_title}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ db_service
                    await self.db_service.save_group(
                        chat_id=chat_id,
                        chat_title=chat_title,
                        members=current_members,
                        admins=current_admins
                    )
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≥—Ä—É–ø–ø–µ {chat_title}")
                    updated_photos_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
                    continue
            
            logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {updated_photos_count}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}", exc_info=True)

    async def handle_my_chat_member(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤)."""
        try:
            chat_member_update = update.my_chat_member
            if not chat_member_update:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ChatMember, –Ω–æ my_chat_member –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return

            chat = chat_member_update.chat
            old_member = chat_member_update.old_chat_member
            new_member = chat_member_update.new_chat_member

            old_status = old_member.status if old_member else None
            new_status = new_member.status if new_member else None

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º f-string –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫ –≤–Ω—É—Ç—Ä–∏
            chat_title_safe = chat.title.replace("'", "\\\\'") # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
            logger.info(f"=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ '{chat_title_safe}' (ID: {chat.id}) ===")
            logger.info(f"–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {old_status}, –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞
            standardized_chat_id = await self._get_standardized_chat_id(chat.id)
            original_chat_id = await self._get_original_chat_id(standardized_chat_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

            # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ ---
            if new_status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR]:
                # –ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –∏–ª–∏ —Å–¥–µ–ª–∞–ª–∏ –∞–¥–º–∏–Ω–æ–º
                if new_status == ChatMemberStatus.MEMBER and old_status != ChatMemberStatus.MEMBER:
                    logger.info(f"–ë–æ—Ç–∞ ({self.bot_id}) –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç '{chat_title_safe}' ({chat.id}).")
                elif new_status == ChatMemberStatus.ADMINISTRATOR:
                     logger.info(f"–ë–æ—Ç–∞ ({self.bot_id}) —Å–¥–µ–ª–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ '{chat_title_safe}' ({chat.id}). –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ.")

                # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º/–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ (–≤—ã–∑—ã–≤–∞–µ–º _process_bot_added) - –î–ï–õ–ê–ï–ú –í–°–ï–ì–î–ê
                await self._process_bot_added(chat, context)

    
                         
            # --- –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ---
            elif new_status in [ChatMemberStatus.LEFT, ChatMemberStatus.BANNED]:
                # –ë–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–ª–∏ –æ–Ω —Å–∞–º –≤—ã—à–µ–ª
                logger.warning(f"–ë–æ—Ç–∞ ({self.bot_id}) —É–¥–∞–ª–∏–ª–∏ (—Å—Ç–∞—Ç—É—Å: {new_status}) –∏–∑ —á–∞—Ç–∞ '{chat_title_safe}' ({original_chat_id}).")
                # –£–¥–∞–ª—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                await self._delete_group_data(original_chat_id, chat.title)

            # --- –ü—Ä–æ—á–∏–µ —Å—Ç–∞—Ç—É—Å—ã ---
            else:
                 logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ ({self.bot_id}) –≤ —á–∞—Ç–µ '{chat_title_safe}' ({chat.id}) –∏–∑–º–µ–Ω–µ–Ω —Å {old_status} –Ω–∞ {new_status}. –≠—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ handle_my_chat_member.")

        except Exception as e:
            chat_id_for_error = update.effective_chat.id if update.effective_chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_my_chat_member –¥–ª—è —á–∞—Ç–∞ {chat_id_for_error}: {e}")
            logger.error(traceback.format_exc())
            
    async def _delete_group_data(self, chat_id: str, chat_title: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø–æ–π, –∏–∑ –ë–î."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º f-string –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        chat_title_safe = chat_title.replace("'", "\\'") # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
        logger.warning(f"=== –ó–ê–ü–£–°–ö –£–î–ê–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• –¥–ª—è –≥—Ä—É–ø–ø—ã '{chat_title_safe}' (ID: {chat_id}) ===" )
        try:
            # 1. –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—á–µ—Ä–µ–∑ DatabaseService)
            db_service = self.db_service # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            if db_service:
                logger.info(f"–í—ã–∑–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –¥–ª—è —á–∞—Ç–∞ {chat_id} —á–µ—Ä–µ–∑ DatabaseService...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ delete_group
                deleted = await db_service.delete_group(chat_id)
                if deleted:
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã '{chat_title}' (ID: {chat_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î.")
                else:
                    logger.warning(f"–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –≥—Ä—É–ø–ø–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞).")
            else:
                logger.error("DatabaseService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ application.")

            logger.warning(f"‚úÖ –£–î–ê–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –¥–ª—è –≥—Ä—É–ø–ø—ã '{chat_title_safe}' (ID: {chat_id}) –ó–ê–í–ï–†–®–ï–ù–û." )

        except Exception as e:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º f-string –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã '{chat_title_safe}' (ID: {chat_id}): {e}")
            logger.error(traceback.format_exc())

    async def _notify_server_about_admin_update(self, chat_id: str, admins_data: dict) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            standardized_chat_id = await self._get_standardized_chat_id(chat_id)
            logger.info(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞: {standardized_chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            original_chat_id = await self._get_original_chat_id(standardized_chat_id)
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API: {original_chat_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.server_url}/api/admin/update",
                    json={
                        "chat_id": original_chat_id,
                        "admins": admins_data
                    }
                ) as response:
                    if response.status == 200:
                        logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {original_chat_id}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {response.status}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            logger.error(traceback.format_exc())

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ NEW_CHAT_MEMBERS –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
            self.application.add_handler(
                MessageHandler(
                    filters.StatusUpdate.NEW_CHAT_MEMBERS,
                    self.handle_new_chat_members
                )
            )
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            self.application.add_handler(
                ChatMemberHandler(
                    self.handle_chat_member_update,
                    ChatMemberHandler.CHAT_MEMBER
                )
            )
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            self.application.add_handler(
                MessageHandler(
                    filters.StatusUpdate.LEFT_CHAT_MEMBER,
                    self.handle_left_chat_member
                )
            )
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            self.application.add_handler(
                MessageHandler(
                    filters.CONTACT,
                    self.handle_contact
                )
            )
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
            self.application.add_handler(
                MessageHandler(
                    filters.PHOTO,
                    self.handle_photo
                )
            )
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application.add_handler(
                MessageHandler(
                    filters.StatusUpdate.WEB_APP_DATA,
                    self.handle_webapp_data
                )
            )
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

            # –í–†–ï–ú–ï–ù–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            async def group_password_handler(update, context):
                logger.info(f"[DEBUG] group_password_handler –≤—ã–∑–≤–∞–Ω! update={update}")
                chat = update.effective_chat
                logger.info(f"[DEBUG] group_password_handler: chat_id={getattr(chat, 'id', None)}, type={getattr(chat, 'type', None)}, pending={getattr(chat, 'id', None) in self.activation_manager.pending_activations}, activated={getattr(chat, 'id', None) in self.activation_manager.activated_groups}")
                if chat and chat.type in ["group", "supergroup"]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –±–æ—Ç –∂–¥—ë—Ç –ø–∞—Ä–æ–ª—å
                    if chat.id in self.activation_manager.pending_activations and chat.id not in self.activation_manager.activated_groups:
                        logger.info(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã {chat.id} (–æ–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è)")
                        await self.activation_manager.check_password(update, context)
                    else:
                        logger.info(f"[DEBUG] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –≥—Ä—É–ø–ø–∞ {chat.id} –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è")
                else:
                    logger.info(f"[DEBUG] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞")
            self.application.add_handler(MessageHandler(filters.ALL, group_password_handler), group=0)

            logger.info("‚úÖ [DEBUG] –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å group=0 (–ø–µ—Ä–≤—ã–π)")

            logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            logger.error(traceback.format_exc())
            raise

    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            message = update.effective_message
            contact = message.contact
            user = message.from_user
            chat = message.chat
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            chat_id = await self._get_standardized_chat_id(chat.id)
            logger.info(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞: {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            original_chat_id = await self._get_original_chat_id(chat_id)
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API: {original_chat_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ admins.json
            data = self.json_service.load_from_json('admins.json')
            success_count = 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö (—ç—Ç–æ—Ç —Ü–∏–∫–ª —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–µ–Ω –∏–ª–∏ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ë–î)
            # –ó–∞–º–µ–Ω—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–æ–ª–∞–≥–∞–ª—Å—è –Ω–∞ JSON
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –≤ –ë–î
            
            current_admins = await self._get_chat_admins(original_chat_id, context)
            updated_in_db = False
            for admin in current_admins:
                 if admin.get('user_id') == user.id:
                     admin['phone'] = contact.phone_number # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ phone
                     updated_in_db = True
                     logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ user_id: {user.id} –≤ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã chat_id: {original_chat_id}")
                     break

            if updated_in_db:
                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ë–î –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
                 # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ save_group –æ–±–Ω–æ–≤–∏—Ç –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏—Ö
                 await self.db_service.save_group(
                     chat_id=original_chat_id,
                     chat_title=chat.title, # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                     members=await self._get_chat_members(chat, context), # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                     admins=current_admins # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
                 )
                 success_count = 1 # –û–±–Ω–æ–≤–∏–ª–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ (—Ç–µ–∫—É—â–µ–π)

            if success_count > 0:
                await message.reply_text(
                    f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", # –£–±—Ä–∞–ª–∏ –∫–æ–ª-–≤–æ –≥—Ä—É–ø–ø
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=ReplyKeyboardRemove()
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            logger.error(traceback.format_exc())

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            message = update.effective_message
            user = message.from_user
            chat = message.chat
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            chat_id = await self._get_standardized_chat_id(chat.id)
            logger.info(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞: {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            original_chat_id = await self._get_original_chat_id(chat_id)
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è API: {original_chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
            photo_url = await self._get_user_photo(user.id, context)
            if not photo_url:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await self.db_service.save_group(
                chat_id=chat_id,
                    chat_title=chat.title,
                members=await self._get_chat_members(chat, context),
                admins=await self._get_chat_admins(original_chat_id, context)
            )
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat.title}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}", exc_info=True)

 