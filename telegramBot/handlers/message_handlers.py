import logging
import json
import os
import traceback
from datetime import datetime
from typing import Dict, Any, List
import asyncio
import hashlib

from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞"""

    def __init__(self, data_dir: str):
        self.data_dir = data_dir
        self.password_change_requests_file = os.path.join(data_dir, 'password_change_requests.json')
        self.senior_courier_passwords_file = os.path.join(data_dir, 'senior_courier_passwords.json')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self._ensure_file_exists(self.password_change_requests_file, {})
        self._ensure_file_exists(self.senior_courier_passwords_file, {})
        
        logger.info(f"‚úÖ MessageHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {data_dir}")
    
    def _ensure_file_exists(self, file_path: str, default_content: dict) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                dir_path = os.path.dirname(file_path)
                if dir_path and not os.path.exists(dir_path):
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {dir_path}")
                    os.makedirs(dir_path, exist_ok=True)
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(default_content, f, ensure_ascii=False, indent=2)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {os.path.basename(file_path)}")
            else:
                logger.debug(f"–§–∞–π–ª {os.path.basename(file_path)} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            logger.error(traceback.format_exc())

    async def handle_private_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç—É"""
        try:
            if not update.message or not update.message.text or not update.effective_user:
                return

            user_id = update.effective_user.id
            text = update.message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if await self._check_password_change_request(user_id, text, context):
                # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                return
            
            # –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞
            await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            logger.error(traceback.format_exc())
            
            try:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass

    async def _check_password_change_request(self, user_id: int, text: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è"""
        try:
            if not os.path.exists(self.password_change_requests_file):
                return False
                
            with open(self.password_change_requests_file, 'r', encoding='utf-8') as f:
                requests = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id_str = str(user_id)
            if user_id_str not in requests:
                return False
                
            request_data = requests[user_id_str]
            status = request_data.get('status', '')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            request_data['last_active'] = datetime.now().isoformat()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
            if status == 'waiting_new_password':
                return await self._handle_new_password(user_id, text, request_data, requests, context)
            elif status == 'waiting_confirm_password':
                return await self._handle_confirm_password(user_id, text, request_data, requests, context)
                
            return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è: {str(e)}")
            logger.error(traceback.format_exc())
            return False

    async def _handle_current_password(self, user_id: int, password: str, request_data: Dict[str, Any], 
                                      all_requests: Dict[str, Any], context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è"""
        try:
            user_id_str = str(user_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–æ–ª–∏
            if not os.path.exists(self.senior_courier_passwords_file):
                with open(self.senior_courier_passwords_file, 'w', encoding='utf-8') as f:
                    json.dump({}, f, ensure_ascii=False, indent=2)
                    
            with open(self.senior_courier_passwords_file, 'r', encoding='utf-8') as f:
                passwords = json.load(f)
            
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π 1234, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—è –µ—â–µ –Ω–µ—Ç
            current_hashed_password = passwords.get(user_id_str, self._hash_password('1234'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            if self._hash_password(password) != current_hashed_password:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                request_data['attempts'] = request_data.get('attempts', 0) + 1
                
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                if request_data['attempts'] >= 3:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω."
                    )
                    del all_requests[user_id_str]
                else:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - request_data['attempts']}"
                    )
                    all_requests[user_id_str] = request_data
            else:
                # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                request_data['status'] = 'waiting_new_password'
                request_data['attempts'] = 0
                all_requests[user_id_str] = request_data
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚úÖ –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π.\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            with open(self.password_change_requests_file, 'w', encoding='utf-8') as f:
                json.dump(all_requests, f, ensure_ascii=False, indent=2)
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è: {str(e)}")
            logger.error(traceback.format_exc())
            return False

    async def _handle_new_password(self, user_id: int, password: str, request_data: Dict[str, Any], 
                                  all_requests: Dict[str, Any], context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        try:
            user_id_str = str(user_id)
            chat_title = request_data.get('chat_title', '—ç—Ç–æ–≥–æ —á–∞—Ç–∞')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
            if len(password) < 4:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return True
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ –∑–∞–ø—Ä–æ—Å–µ
            request_data['new_password'] = password
            request_data['status'] = 'waiting_confirm_password'
            all_requests[user_id_str] = request_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            with open(self.password_change_requests_file, 'w', encoding='utf-8') as f:
                json.dump(all_requests, f, ensure_ascii=False, indent=2)
                
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç.\n\n‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—ã –º–µ–Ω—è–µ—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —á–∞—Ç–∞ *{chat_title}*.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                parse_mode="Markdown"
            )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è: {str(e)}")
            logger.error(traceback.format_exc())
            return False

    async def _handle_confirm_password(self, user_id: int, password: str, request_data: Dict[str, Any], 
                                      all_requests: Dict[str, Any], context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        try:
            user_id_str = str(user_id)
            new_password = request_data.get('new_password', '')
            chat_id = request_data.get('chat_id')
            chat_title = request_data.get('chat_title', '—á–∞—Ç –∫—É—Ä—å–µ—Ä–æ–≤')
            
            if not chat_id:
                # –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞), –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                logger.warning(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç chat_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                chat_id = "default"
                
            if password != new_password:
                # –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:"
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
                request_data['status'] = 'waiting_new_password'
                request_data['attempts'] = 0
                if 'new_password' in request_data:
                    del request_data['new_password']
                    
                all_requests[user_id_str] = request_data
            else:
                # –ü–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–æ–ª–∏
                with open(self.senior_courier_passwords_file, 'r', encoding='utf-8') as f:
                    passwords = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
                if "chat_passwords" not in passwords:
                    passwords = {"chat_passwords": {}}
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
                passwords["chat_passwords"][str(chat_id)] = self._hash_password(new_password)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
                with open(self.senior_courier_passwords_file, 'w', encoding='utf-8') as f:
                    json.dump(passwords, f, ensure_ascii=False, indent=2)
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                del all_requests[user_id_str]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
                message = f"üîê –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—Å–µ —Å—Ç–∞—Ä—à–∏–µ –∫—É—Ä—å–µ—Ä—ã –≤ —á–∞—Ç–µ *{chat_title}* –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode="Markdown"
                )
                
                logger.info(f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è —á–∞—Ç–∞ {chat_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            with open(self.password_change_requests_file, 'w', encoding='utf-8') as f:
                json.dump(all_requests, f, ensure_ascii=False, indent=2)
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {str(e)}")
            logger.error(traceback.format_exc())
            return False
            
    def _hash_password(self, password: str) -> str:
        """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        hash_obj = hashlib.sha256(password.encode())
        return hash_obj.hexdigest() 