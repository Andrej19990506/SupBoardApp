import logging
import socketio
import engineio
import socket
from socketio import ASGIApp
from src.config.settings import CORS_ALLOWED_ORIGINS
from engineio.payload import Payload
from fastapi import FastAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO) # –û—Å—Ç–∞–≤–ª—è–µ–º INFO –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞
logger = logging.getLogger(__name__)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DEBUG –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('socketio').setLevel(logging.DEBUG)
logging.getLogger('engineio').setLevel(logging.DEBUG)

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ö–æ—Å—Ç–∞ –∏ IP –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
hostname = socket.gethostname()
try:
    ip_address = socket.gethostbyname(hostname)
except:
    ip_address = "unknown"

logger.info(f"üì° –•–æ—Å—Ç: {hostname}, IP: {ip_address}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Engine.IO —Å–µ—Ä–≤–µ—Ä–∞
eio = engineio.AsyncServer(
    async_mode='asgi',
    cors_allowed_origins=CORS_ALLOWED_ORIGINS,
    ping_timeout=60,
    ping_interval=25,
    max_http_buffer_size=1e8,
    allow_upgrades=True,
    upgrade_timeout=10000,
    cookie=None,
    transports=['polling', 'websocket']
)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
sio = socketio.AsyncServer(
    async_mode='asgi',
    engineio_server=eio,
    cors_allowed_origins=CORS_ALLOWED_ORIGINS,
    ping_timeout=60,
    ping_interval=25,
    max_http_buffer_size=1e8,
    allow_upgrades=True,
    upgrade_timeout=10000,
    cookie=None,
    transports=['polling', 'websocket']
)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
@sio.on('*')
async def catch_all(event, sid, *args):
    logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event}")
    logger.debug(f"üîë SID: {sid}")
    logger.debug(f"üì¶ –î–∞–Ω–Ω—ã–µ: {args}")
    logger.debug("=" * 80)

# –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
logger.info("‚úÖ Socket.IO —Å–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω c –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
logger.info(f"üîí CORS allowed origins: {CORS_ALLOWED_ORIGINS}")
logger.info(f"‚è±Ô∏è Ping timeout: 60s, interval: 25s")
logger.info(f"üîÑ Async mode: {sio.async_mode}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
handlers = {ns: [event for event in sio.handlers[ns].keys() if not event.startswith('_')] 
           for ns in sio.handlers.keys()}
logger.info("=" * 80)
logger.info("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ namespace:")
for ns, events in handlers.items():
    logger.info(f"üîπ Namespace {ns}: {events}")
logger.info("=" * 80)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è uvicorn
__all__ = ['sio']

class DebugNamespace(socketio.AsyncNamespace):
    def trigger_event(self, event, *args):
        logger.debug(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏—è {event} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}")
        return super().trigger_event(event, *args) 