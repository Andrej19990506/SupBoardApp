import asyncio
import json
import logging
import os
from collections import defaultdict
from datetime import datetime, timedelta
import functools # –ü–µ—Ä–µ–Ω–æ—Å–∏–º functools –≤—ã—à–µ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞
from typing import Dict, Set, Any

import aiohttp
# import socketio # <-- –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç socketio
from dotenv import load_dotenv
# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç Gauge –∏ REGISTRY –æ—Ç—Å—é–¥–∞
# from prometheus_client import Gauge, REGISTRY 

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º sio –∏–∑ socket_instance
from .socket_instance import sio # <-- –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô SIO

# --- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –∏–∑ metrics.py ---
from .metrics import connected_clients, events_received 
# ---------------------------------------------

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Socket.IO # <-- –£–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ sio –∏ app
# sio = socketio.AsyncServer(async_mode='aiohttp', cors_allowed_origins=os.getenv('CORS_ALLOWED_ORIGINS', '*'))
# app = aiohttp.web.Application()
# sio.attach(app)

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
USER_INACTIVITY_TIMEOUT = int(os.getenv('USER_INACTIVITY_TIMEOUT', 1800)) # 30 –º–∏–Ω—É—Ç

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
user_info = defaultdict(lambda: {'last_activity': datetime.utcnow(), 'rooms': set(), 'is_away': False})
user_rooms = defaultdict(set) # sid -> {room1, room2}
room_users = defaultdict(set) # room -> {sid1, sid2}

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–æ–º–Ω–∞—Ç
COURIER_ROOM_PREFIX = 'couriers_'
RESERVE_ROOM_PREFIX = 'reserves_'
ADMIN_ROOM_PREFIX = 'admins_'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Socket.IO
# @sio.on("*") # <-- –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
# async def catch_all(event, sid, *args, **kwargs): # <-- –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
#     \"\"\"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π\"\"\"
#     logger.info(f\" CATCH_ALL received event: '{event}' from SID: {sid}\")\n#     logger.info(f\"üéØ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event} –æ—Ç {sid}\")\n#     logger.info(f\"üì¶ –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}\")\n#     logger.info(f\"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {kwargs}\")\n

@sio.on("error")
async def error_handler(sid, data):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"üö´ Socket.IO –æ—à–∏–±–∫–∞ –¥–ª—è {sid}: {data}")
    logger.error("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:", exc_info=True)

@sio.event
async def connect_error(sid, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {sid}: {data}")
    logger.error("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:", exc_info=True)

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –£–±–∏—Ä–∞–µ–º, —Ç.–∫. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º?
# active_users = set()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∏–Ω–≥-–ø–æ–Ω–≥–∞
PING_INTERVAL = 25  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
PING_TIMEOUT = 10   # –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –ø–∏–Ω–≥-–ø–æ–Ω–≥–∞
ping_timers = {}
pong_waiting = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö {sid: user_data}
user_info: Dict[str, Dict[str, Any]] = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sid: set(rooms)}
user_rooms: Dict[str, Set[str]] = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç–µ {room: set(sids)}
room_users: Dict[str, Set[str]] = defaultdict(set)
# --- –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–≤—è–∑–∏ userId -> sid --- 
user_id_to_sid: Dict[str, str] = {}
# -------------------------------------------

def debug_handler(func):
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        logger.info(f"üéØ –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}")
        logger.info(f"üì¶ –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
        logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {kwargs}")
        try:
            result = await func(*args, **kwargs)
            logger.info(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func.__name__} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ")
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {e}")
            logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
            raise
    return wrapper

@sio.event
async def connect(sid, environ, auth):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    user_id = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º userId
    try:
        # --- –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ auth –∞—Ä–≥—É–º–µ–Ω—Ç–∞ --- 
        if auth and isinstance(auth, dict):
            user_id = auth.get('userId')
            logger.info(f"üë§ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç User ID: {user_id} (SID: {sid})")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å userId –∏–∑ auth –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SID: {sid}. Auth: {auth}")
        # --------------------------------------

        logger.info("=" * 80)
        logger.info(f"üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {sid}")
        logger.info(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ (—á–∞—Å—Ç–∏—á–Ω–æ): { {k: v for k, v in environ.items() if k.startswith('HTTP') or k in ['PATH_INFO', 'QUERY_STRING']} }") # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å environ

        # --- –õ–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ --- 
        previous_sid = None
        if user_id:
            previous_sid = user_id_to_sid.get(user_id)
            if previous_sid and previous_sid != sid:
                logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è User ID: {user_id}. –°—Ç–∞—Ä—ã–π SID: {previous_sid}, –ù–æ–≤—ã–π SID: {sid}")
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∫–æ–º–Ω–∞—Ç—ã?)
                if previous_sid in user_info:
                    logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è SID: {previous_sid}")
                    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã:
                    # existing_rooms = user_info[previous_sid].get('rooms', set())
                    del user_info[previous_sid]
                if previous_sid in user_rooms:
                    del user_rooms[previous_sid]
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É user_id -> sid
                user_id_to_sid[user_id] = sid
            elif not previous_sid:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id
                user_id_to_sid[user_id] = sid
                logger.info(f"ÎßµÌïë New mapping: User ID {user_id} -> SID {sid}")
        # -------------------------------------------------- 

        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–Ω–µ—Ç –æ—à–∏–±–∫–∏)
        if connected_clients is not None:
            connected_clients.inc()
            logger.info(f"üìä –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info[sid] = { # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π sid –∫–∞–∫ –∫–ª—é—á
            "sid": sid,
            "user_id": user_id, # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id
            "connection_time": str(asyncio.get_event_loop().time()),
            "rooms": set(), # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç (–∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ sid?)
            "transport": environ.get('wsgi.url_scheme', 'unknown'),
            "user_info": {}, # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–±–∞–≤—è—Ç—Å—è –ø—Ä–∏ join_room
            "last_activity": asyncio.get_event_loop().time(),
            "connection_state": "active"
        }
        logger.info(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info[sid]}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
        await sio.enter_room(sid, 'global')
        if sid not in user_rooms:
            user_rooms[sid] = set()
        user_rooms[sid].add('global')
        logger.info(f"üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sid} (User ID: {user_id}) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É global")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
        await sio.emit('message', {'data': 'Connected successfully', 'isSystem': True}, room=sid)
        logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {sid}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å user_id)
        await sio.emit('user_joined', {
            'status': 'success',
            'room': 'global',
            'user_info': user_info[sid].get('user_info', {}), # –ü–æ–∫–∞ –ø—É—Å—Ç–æ–µ
            'sid': sid,
            'user_id': user_id,
            'timestamp': user_info[sid]['connection_time']
        }, room='global', skip_sid=sid)
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (User ID: {user_id}, SID: {sid}): {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        # –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if connected_clients is not None:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å–ø–µ–ª–∏ –ª–∏ –º—ã —Å–¥–µ–ª–∞—Ç—å inc() –¥–æ –æ—à–∏–±–∫–∏
            # –ü—Ä–æ—â–µ –ø–æ–∫–∞ –Ω–µ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å
            pass
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å–ø–µ–ª–∞ —Å–æ–∑–¥–∞—Ç—å—Å—è
        if sid in user_info:
            del user_info[sid]
        if user_id and user_id_to_sid.get(user_id) == sid:
            del user_id_to_sid[user_id]
            
        return False # –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –ø—Ä–∏ –æ—à–∏–±–∫–µ

@sio.event
async def disconnect(sid):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        logger.info(f"Client disconnected: {sid}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        disconnect_reason = "manual"
        if sid in pong_waiting and pong_waiting[sid]:
            disconnect_reason = "timeout"
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        if sid in ping_timers:
            ping_timers[sid].cancel()
            del ping_timers[sid]
        if sid in pong_waiting:
            del pong_waiting[sid]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if sid in user_rooms:
            for room in user_rooms[sid].copy():
                await sio.emit('user_disconnected', {
                    'sid': sid,
                    'reason': disconnect_reason,
                    'user_info': user_info.get(sid, {}).get('user_info', {}),
                    'timestamp': str(asyncio.get_event_loop().time())
                }, room=room)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
        if sid in user_rooms:
            rooms_to_leave = user_rooms[sid].copy()
            for room in rooms_to_leave:
                await leave_room(sid, room) # leave_room —Ç–µ–ø–µ—Ä—å –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç –ë–î
            del user_rooms[sid]
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        # if sid in active_users: # –£–±–∏—Ä–∞–µ–º
        #     active_users.remove(sid)
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if sid in user_info:
            del user_info[sid]
        
        if connected_clients:
            connected_clients.dec()
            logger.info(f"üìä –£–º–µ–Ω—å—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            
    except Exception as e:
        logger.error(f"Error in disconnect handler: {e}")
        logger.exception("Full error stack:")

async def start_ping(sid):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏–Ω–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç—É"""
    try:
        while sid in active_users:
            await asyncio.sleep(PING_INTERVAL)
            if sid not in active_users:
                break
                
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç—É {sid}")
            pong_waiting[sid] = True
            
            try:
                await sio.emit('ping', {'timestamp': str(asyncio.get_event_loop().time())}, room=sid)
                
                # –ñ–¥–µ–º PING_TIMEOUT —Å–µ–∫—É–Ω–¥ –æ—Ç–≤–µ—Ç–∞
                await asyncio.sleep(PING_TIMEOUT)
                
                # –ï—Å–ª–∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –∂–¥–µ–º –ø–æ–Ω–≥, –∑–Ω–∞—á–∏—Ç —Ç–∞–π–º–∞—É—Ç
                if sid in pong_waiting and pong_waiting[sid]:
                    logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø–∏–Ω–≥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {sid}")
                    # –û—Ç–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ "away"
                    if sid in user_info:
                        user_info[sid]['connection_state'] = 'away'
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        for room in user_rooms.get(sid, set()):
                            await sio.emit('user_away', {
                                'sid': sid,
                                'user_info': user_info[sid].get('user_info', {}),
                                'timestamp': str(asyncio.get_event_loop().time())
                            }, room=room)
                    
            except Exception as e:
                logger.error(f"Error sending ping to {sid}: {e}")
                
    except Exception as e:
        logger.error(f"Error in ping loop for {sid}: {e}")
    finally:
        if sid in ping_timers:
            del ping_timers[sid]

@sio.event
async def pong(sid, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–Ω–≥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        if sid in pong_waiting:
            pong_waiting[sid] = False
            
        if sid in user_info:
            user_info[sid]['last_activity'] = asyncio.get_event_loop().time()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª away –∏ –≤–µ—Ä–Ω—É–ª—Å—è
            if user_info[sid].get('connection_state') == 'away':
                user_info[sid]['connection_state'] = 'active'
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for room in user_rooms.get(sid, set()):
                    await sio.emit('user_back', {
                        'sid': sid,
                        'user_info': user_info[sid].get('user_info', {}),
                        'timestamp': str(asyncio.get_event_loop().time())
                    }, room=room)
                    
        logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω –ø–æ–Ω–≥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {sid}")
        
    except Exception as e:
        logger.error(f"Error handling pong from {sid}: {e}")

@sio.event
async def join_room(sid, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    # !!!!! –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì–ò –ü–†–Ø–ú–û –í –ù–ê–ß–ê–õ–ï !!!!!
    logger.info(f"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    logger.info(f"!!!! JOIN_ROOM RECEIVED !!!! sid={sid}, data={data}")
    logger.info(f"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

    try:
        logger.info("=" * 80)
        logger.info(f"üéØ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò JOIN_ROOM")
        logger.info(f"üîç SID: {sid}")
        logger.info(f"üì¶ –î–∞–Ω–Ω—ã–µ: {data}")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –æ–±—ä–µ–∫—Ç–∞ —Å room, —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        if isinstance(data, dict):
            room = data.get('room')
            user_info_data = data.get('user_info', {})
        else:
            room = data
            user_info_data = {}

        logger.info(f"üö™ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room}")
        
        if not room:
            error_msg = {'error': 'Room not specified'}
            logger.error(f"‚ùå {error_msg}")
            return {'error': error_msg['error']}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        if sid in user_rooms and room in user_rooms[sid]:
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sid} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ {room}")
            # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ success
            return {'status': 'already_joined', 'room': room}

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        try:
            await sio.enter_room(sid, room)
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É {room}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–æ–º–Ω–∞—Ç–∞—Ö
            if sid not in user_rooms:
                user_rooms[sid] = set()
            user_rooms[sid].add(room)
            
            # –î–æ–±–∞–≤–ª—è–µ–º sid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã
            if room not in room_users: # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç—ã –µ—â–µ –Ω–µ—Ç
                room_users[room] = set()
            room_users[room].add(sid) # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É

            if sid in user_info:
                user_info[sid]['rooms'] = user_rooms[sid] # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤ user_info
                user_info[sid]['last_activity'] = asyncio.get_event_loop().time() # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if user_info_data: # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –¥–æ–ø. –∏–Ω—Ñ—É
                    user_info[sid]['user_info'].update(user_info_data) # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É
            else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ user_info (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sid} –Ω–µ—Ç –≤ user_info –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É {room}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = {
                'status': 'success',
                'room': room,
                'user_info': user_info.get(sid, {}).get('user_info', {}), # –ë–µ—Ä–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é user_info
                'sid': sid,
                'timestamp': str(asyncio.get_event_loop().time())
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ (–∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            await sio.emit('user_joined', response, room=room, skip_sid=sid) 
            logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sid} –∫ –∫–æ–º–Ω–∞—Ç–µ {room}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–º—É—Å—è
            current_room_sids = room_users.get(room, set()) # –ü–æ–ª—É—á–∞–µ–º SID—ã –∏–∑ room_users
            current_room_users_details = []
            for user_sid in current_room_sids:
                user_details = user_info.get(user_sid, {}).get('user_info', {})
                current_room_users_details.append({ # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    'sid': user_sid,
                    'user_info': user_details
                })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
            await sio.emit('room_users', {'room': room, 'users': current_room_users_details}, room=sid) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã {room} –∫–ª–∏–µ–Ω—Ç—É {sid}")

            return response
            
        except Exception as e:
            error_msg = f"Error joining room: {str(e)}"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
            if sid in user_rooms and room in user_rooms[sid]:
                user_rooms[sid].remove(room)
            if room in room_users and sid in room_users[room]:
                room_users[room].remove(sid)
            try: # –û—Ç–¥–µ–ª—å–Ω—ã–π try –¥–ª—è leave_room, —á—Ç–æ–±—ã –Ω–µ –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É
                await sio.leave_room(sid, room)
            except Exception as leave_err:
                logger.error(f"Error leaving room after failed join for {sid} in {room}: {leave_err}")
            return {'error': error_msg}
        
    except Exception as e:
        error_msg = f"Error in join_room: {str(e)}"
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ join_room: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        return {'error': error_msg}
    finally:
        logger.info("=" * 80)

@sio.event
async def leave_room(sid, room):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"""
    try:
        logger.info(f"üö™ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã {room} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {sid}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        await sio.leave_room(sid, room)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sid} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã {room} (Socket.IO)")
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if sid in user_rooms and room in user_rooms[sid]:
            user_rooms[sid].remove(room)
            logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sid}: {user_rooms[sid]}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
        response = {
            'status': 'success',
            'room': room,
            'timestamp': datetime.now().isoformat()
        }
        await sio.emit('room_left', response, room=room, skip_sid=sid)
        logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ {room} –æ –≤—ã—Ö–æ–¥–µ {sid}")
        
        return response
        
    except Exception as e:
        error_msg = f"Error leaving room: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        return {'error': error_msg}

@sio.event
async def message(sid, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        logger.info(f"Received message from {sid}: {data}")
        await sio.emit('message', f"Server received: {data}", room=sid)
    except Exception as e:
        logger.error(f"Error handling message: {e}")

@sio.on('echo')
async def handle_echo(sid, data):
    """–≠—Ö–æ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    logger.info(f"üì¢ –≠—Ö–æ-–∑–∞–ø—Ä–æ—Å –æ—Ç {sid}: {data}")
    await sio.emit('echo_response', {
        'status': 'success',
        'data': data,
        'server_time': datetime.now().isoformat(),
        'sid': sid
    }, room=sid)

async def notification_handler(payload):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç PostgreSQL (–∫–∞–Ω–∞–ª websocket_channel)"""
    try:
        data = json.loads(payload)
        event_type = data.get('type')
        logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ PostgreSQL: type='{event_type}', data: {data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∑–∞—Ä–∞–Ω–µ–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        chat_id = data.get('chat_id')
        courier_room = f"{COURIER_ROOM_PREFIX}{chat_id}" if chat_id else None

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –Ω–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∏–ø—ã
        if event_type == 'shifts_updated': # <<< –°–ª—É—à–∞–µ–º –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ç–∏–ø
            if courier_room:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –ò–ó –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
                shift_data = data.get('shift_data')
                source = data.get('source', 'unknown')

                if not shift_data:
                    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã ('shift_data') –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ shifts_updated: {data}")
                    return # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
                
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ shift_data - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (—Ö–æ—Ç—è –ø–æ—Å–ª–µ json.loads –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å)
                if not isinstance(shift_data, dict):
                    logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã ('shift_data') –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(shift_data)}")
                    return

                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã ID: {shift_data.get('id')} –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è PostgreSQL.")

                # –ì–æ—Ç–æ–≤–∏–º payload –¥–ª—è WebSocket. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç ApiShift.
                # –ú—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ shift_data –£–ñ–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è (–≤–∫–ª—é—á–∞—è member).
                ws_payload = {
                    **shift_data, # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
                    'source': source # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    # type –º–æ–∂–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —Ç.–∫. —Ñ—Ä–æ–Ω—Ç –µ–≥–æ –ø–æ–ª—É—á–∏—Ç –∏–∑ –∏–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
                }

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ 'shifts_updated' —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                await sio.emit('shifts_updated', ws_payload, room=courier_room)
                logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ shifts_updated —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (ID: {shift_data.get('id')}) –≤ –∫–æ–º–Ω–∞—Ç—É {courier_room}")

            else:
                 logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω chat_id –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ shifts_updated: {data}")

        elif event_type == 'shift_cancelled':
            if courier_room:
                payload_to_send = {
                    'shift_id': data.get('shift_id') or data.get('id'),
                    'chat_id': chat_id
                }
                if payload_to_send['shift_id']:
                    await sio.emit('shift_cancelled', payload_to_send, room=courier_room)
                    logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ shift_cancelled (id: {payload_to_send['shift_id']}) –≤ –∫–æ–º–Ω–∞—Ç—É {courier_room}...")
                else:
                    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID —Å–º–µ–Ω—ã ('shift_id' –∏–ª–∏ 'id') –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ shift_cancelled: {data}")
            else:
                 logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω chat_id –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ shift_cancelled: {data}")
        
        elif event_type == 'reserve_update': # –ò–ª–∏ reserve_added / reserve_deleted
             if courier_room:
                 # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ API —à–ª–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ–∑–µ—Ä–≤–æ–≤
                 # –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
                 await sio.emit('reserve_update', data, room=courier_room) 
                 logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ reserve_update –≤ –∫–æ–º–Ω–∞—Ç—É {courier_room}...")
             else:
                  logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω chat_id –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ reserve_update: {data}")
        
        # --- –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –û–¢–ö–†–´–¢–ò–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò --- 
        elif event_type == 'registration_opened':
            if courier_room:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ REGISTRATION_OPENED
                await sio.emit('REGISTRATION_OPENED', data, room=courier_room)
                logger.info(f"üîë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ REGISTRATION_OPENED –≤ –∫–æ–º–Ω–∞—Ç—É {courier_room}...")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω chat_id –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ registration_opened: {data}")
        # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø --- 
            
        # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –Ω—É–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ (reserve_added, reserve_deleted)
        # elif event_type == 'reserve_added': ...
        # elif event_type == 'reserve_deleted': ...
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–Ω—É–∂–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {event_type}")

    except json.JSONDecodeError as json_error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ PostgreSQL: {json_error}")
        logger.error(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π payload: {payload}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è PostgreSQL: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

async def start_notification_listener():
    """–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        logger.info("Starting notification listener task (websocket_channel only)...")
        await subscribe_to_events(notification_handler)
        logger.info("Notification listener finished (should not happen normally)")
    except Exception as e:
        logger.error(f"Error starting notification listener: {e}")
        logger.exception("Notification listener startup error stack:")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏ –∫—É—Ä—å–µ—Ä–æ–≤

def get_courier_room_name(chat_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ"""
    return f"{COURIER_ROOM_PREFIX}{chat_id}"

async def send_message_to_courier_room(chat_id, event_name, data):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫–æ–º–Ω–∞—Ç–µ –∫—É—Ä—å–µ—Ä–æ–≤"""
    room = get_courier_room_name(chat_id)
    logger.info(f"Sending {event_name} to courier room {room}")
    await sio.emit(event_name, data, room=room)

@sio.event
async def get_room_users(sid, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ"""
    try:
        if not isinstance(data, dict) or 'room' not in data:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {data}")
            return {'error': 'Invalid request format'}

        room = data['room']
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: get_room_users –æ—Ç {sid}")
        logger.info(f"üì¶ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: {room}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
        room_users = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–¥—ã –≤ –∫–æ–º–Ω–∞—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∫–æ–º–Ω–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞
        server_rooms = sio.manager.rooms.get('/', {})
        room_sids = server_rooms.get(room, set())
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω—ã SID –≤ –∫–æ–º–Ω–∞—Ç–µ {room}: {room_sids}")

        for user_sid in room_sids:
            if user_sid in user_info and user_info[user_sid].get('user_info'):
                user_data = {
                    'sid': user_sid,
                    **user_info[user_sid].get('user_info', {}),
                    'connection_time': user_info[user_sid].get('connection_time')
                }
                room_users.append(user_data)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data}")

        response = {
            'status': 'success',
            'room': room,
            'users': room_users,
            'timestamp': str(asyncio.get_event_loop().time())
        }

        logger.info(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {response}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
        await sio.emit('users_list', response, room=sid)
        logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room}")
        
        return response

    except Exception as e:
        error_msg = f"Error getting room users: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        return {'error': error_msg}

@sio.event
async def book_shift(sid, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã"""
    try:
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç {sid}: {data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ API
        async with aiohttp.ClientSession() as session:
            # TODO: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (/api/v1/shifts)
            api_url = os.getenv('API_SERVICE_URL', 'http://server:8000') + '/api/v1/shifts' 
            async with session.post(api_url, json=data) as response:
                if response.status == 201:
                    result = await response.json()
                    logger.info(f"‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ API: {result}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
                    chat_id = data.get('chat_id') # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ chat_id –µ—Å—Ç—å –≤ data
                    if chat_id:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
                        courier_room = f"{COURIER_ROOM_PREFIX}{chat_id}"
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ shift_booked
                        await sio.emit('shift_booked', result, room=courier_room)
                        logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ shift_booked –≤ –∫–æ–º–Ω–∞—Ç—É {courier_room}")
                    
                    return result
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–º–µ–Ω—ã: {error_text}")
                    await sio.emit('error', {
                        'message': f"Failed to book shift: {error_text}",
                        'status': response.status
                    }, room=sid)
                    return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        await sio.emit('error', {
            'message': f"Error processing shift booking: {str(e)}"
        }, room=sid)
        return None

@sio.event
async def shift_update(sid, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –±—ã –≤ update_shift)"""
    try:
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç {sid}: {data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ API
        async with aiohttp.ClientSession() as session:
            # TODO: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ URL –∏ –º–µ—Ç–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ (PUT /api/v1/shifts/{id} ?)
            api_url = os.getenv('API_SERVICE_URL', 'http://server:8000') + '/api/v1/shifts' # Placeholder URL
            # –ú–µ—Ç–æ–¥, –≤–µ—Ä–æ—è—Ç–Ω–æ, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PUT –∏–ª–∏ PATCH, –∏ –Ω—É–∂–µ–Ω ID —Å–º–µ–Ω—ã
            shift_id = data.get('id') 
            api_url_update = f"{os.getenv('API_SERVICE_URL', 'http://server:8000')}/api/v1/shifts/{shift_id}" if shift_id else None
            if not api_url_update:
                 logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID —Å–º–µ–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö: {data}")
                 return None # –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É
                 
            async with session.put(api_url_update, json=data) as response: # –ò—Å–ø–æ–ª—å–∑—É–µ–º PUT
                if response.status == 200: # –û–∂–∏–¥–∞–µ–º 200 OK –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    result = await response.json()
                    logger.info(f"‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ API: {result}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
                    chat_id = data.get('chat_id') # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ chat_id –µ—Å—Ç—å –≤ data
                    if chat_id:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
                        courier_room = f"{COURIER_ROOM_PREFIX}{chat_id}"
                        # –ú–µ–Ω—è–µ–º –∏–º—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ shift_updated
                        await sio.emit('shift_updated', result, room=courier_room) 
                        logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ shift_updated –≤ –∫–æ–º–Ω–∞—Ç—É {courier_room}")
                    
                    return result
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {error_text}")
                    await sio.emit('error', {
                        'message': f"Failed to update shift: {error_text}",
                        'status': response.status
                    }, room=sid)
                    return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        await sio.emit('error', {
            'message': f"Error processing shift update: {str(e)}"
        }, room=sid)
        return None

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@sio.event
async def startup():
    logger.info("üöÄ WebSocket Server Startup Event")
    # –£–±–∏—Ä–∞–µ–º init_db
    asyncio.create_task(start_notification_listener())
    logger.info("‚úÖ Notification listener task created")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —è–≤–Ω–æ
logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Socket.IO")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
handlers = [handler for handler in sio.handlers['/'].keys() if not handler.startswith('_')]
logger.info("=" * 80)
logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:")
logger.info(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {handlers}")
logger.info(f"üéØ join_room –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {'join_room' in handlers}")
logger.info("=" * 80)

logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    # ... (–∑–∞–ø—É—Å–∫ asyncio loop –∏ aiohttp app) ...
    pass 